
AVRASM ver. 2.1.30  D:\My Data\TanPhat\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm Thu Nov 29 23:00:37 2018

D:\My Data\TanPhat\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\My Data\TanPhat\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\My Data\TanPhat\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\My Data\TanPhat\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\My Data\TanPhat\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\My Data\TanPhat\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\My Data\TanPhat\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\My Data\TanPhat\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\My Data\TanPhat\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega88P
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega88P
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_I_Positive_Over=R5
                 	.DEF _Uc_U_Positive_Over=R4
                 	.DEF _Uc_I_Negative_Over=R7
                 	.DEF _Uc_U_Negative_Over=R6
                 	.DEF _Uc_I_Positive_Under=R9
                 	.DEF _Uc_U_Positive_Under=R8
                 	.DEF _Uc_I_Negative_Under=R11
                 	.DEF _Uc_U_Negative_Under=R10
                 	.DEF _Uc_Buffer_count=R13
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02e      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d c04f      	RJMP _timer1_ovf_isr
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
000015 cfea      	RJMP 0x00
000016 cfe9      	RJMP 0x00
000017 cfe8      	RJMP 0x00
000018 cfe7      	RJMP 0x00
000019 cfe6      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001a 0000
00001b 0000      	.DB  0x0,0x0,0x0,0x0
00001c 0000
00001d 0000      	.DB  0x0,0x0,0x0,0x0
00001e 0000      	.DB  0x0,0x0
                 
                 _0x20003:
D:\My Data\TanPhat\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1142): warning: .cseg .db misalignment - padding zero byte
00001f 0001      	.DB  0x1
                 _0x20004:
000020 21f9
000021 6bea
000022 5b33
000023 29db      	.DB  0xF9,0x21,0xEA,0x6B,0x33,0x5B,0xDB,0x29
000024 7bfb      	.DB  0xFB,0x7B
                 
                 __GLOBAL_INI_TBL:
000025 000a      	.DW  0x0A
000026 0004      	.DW  0x04
000027 0034      	.DW  __REG_VARS*2
                 
000028 0001      	.DW  0x01
000029 02fa      	.DW  _Uc_Select_led
00002a 003e      	.DW  _0x20003*2
                 
00002b 000a      	.DW  0x0A
00002c 02fb      	.DW  _BCDLED
00002d 0040      	.DW  _0x20004*2
                 
                 _0xFFFFFFFF:
00002e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bff5      	OUT  MCUCR,R31
000034 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000035 e08d      	LDI  R24,(14-2)+1
000036 e0a2      	LDI  R26,2
000037 27bb      	CLR  R27
                 __CLEAR_REG:
000038 93ed      	ST   X+,R30
000039 958a      	DEC  R24
00003a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003d e0a0      	LDI  R26,LOW(__SRAM_START)
00003e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000042 e4ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000043 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000044 9185      	LPM  R24,Z+
000045 9195      	LPM  R25,Z+
000046 9700      	SBIW R24,0
000047 f061      	BREQ __GLOBAL_INI_END
000048 91a5      	LPM  R26,Z+
000049 91b5      	LPM  R27,Z+
00004a 9005      	LPM  R0,Z+
00004b 9015      	LPM  R1,Z+
00004c 01bf      	MOVW R22,R30
00004d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004e 9005      	LPM  R0,Z+
00004f 920d      	ST   X+,R0
000050 9701      	SBIW R24,1
000051 f7e1      	BRNE __GLOBAL_INI_LOOP
000052 01fb      	MOVW R30,R22
000053 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000054 e0e0      	LDI  R30,__GPIOR0_INIT
000055 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000056 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000057 bfed      	OUT  SPL,R30
000058 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000059 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005a e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005c c18c      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : DC_Power_Supply_Adj_Protect
                 ;Version :
                 ;Date    : 29/11/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Uint_data_led1 = Dien ap am*10
                 ;Uint_data_led2 = Cuong do dong dien am*10
                 ;Uint_data_led3 = Dien ap duong*10
                 ;Uint_data_led4 = Cuong do dong dien duong*10
                 ;
                 ;Chip type               : ATmega8A
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega88.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <scan_led.h>
                 ;#include <delay.h>
                 ;
                 ;#define ADC_I_POSITIVE  0
                 ;#define ADC_U_POSITIVE  1
                 ;#define ADC_I_NEGATIVE  2
                 ;#define ADC_U_NEGATIVE  3
                 ;
                 ;#define CONTROL_RELAY   PORTC.4
                 ;
                 ;#define PROTECT_ON   CONTROL_RELAY  = 1
                 ;#define PROTECT_OFF   CONTROL_RELAY  = 0
                 ;
                 ;#define ADC_I_POSITIVE_SET  500
                 ;#define ADC_U_POSITIVE_SET  300
                 ;#define ADC_I_NEGATIVE_SET  500
                 ;#define ADC_U_NEGATIVE_SET  300
                 ;
                 ;#define ADC_I_POSITIVE_RATIO  100
                 ;#define ADC_U_POSITIVE_RATIO  370
                 ;#define ADC_I_NEGATIVE_RATIO  100
                 ;#define ADC_U_NEGATIVE_RATIO  370
                 ;
                 ;#define TIME_UPDATE_DISPLAY 200
                 ;
                 ;#define NUM_SAMPLE  30
                 ;#define NUM_FILTER  10
                 ;
                 ;unsigned char   Uc_I_Positive_Over = 0;
                 ;unsigned char   Uc_U_Positive_Over = 0;
                 ;unsigned char   Uc_I_Negative_Over = 0;
                 ;unsigned char   Uc_U_Negative_Over = 0;
                 ;
                 ;unsigned char   Uc_I_Positive_Under = 0;
                 ;unsigned char   Uc_U_Positive_Under = 0;
                 ;unsigned char   Uc_I_Negative_Under = 0;
                 ;unsigned char   Uc_U_Negative_Under = 0;
                 ;
                 ;unsigned int   Uint_U_Positive_Buff[NUM_SAMPLE];
                 ;unsigned int   Uint_U_Negative_Buff[NUM_SAMPLE];
                 ;unsigned int   Uint_I_Positive_Buff[NUM_SAMPLE];
                 ;unsigned int   Uint_I_Negative_Buff[NUM_SAMPLE];
                 ;
                 ;unsigned char   Uc_Buffer_count = 0;
                 ;
                 ;bit     Bit_I_Positive_Warning = 0;
                 ;bit     Bit_U_Positive_Warning = 0;
                 ;bit     Bit_I_Negative_Warning = 0;
                 ;bit     Bit_U_Negative_Warning = 0;
                 ;
                 ;unsigned int    Uint_Timer_Display = 0;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0054 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
00005d 920a      	ST   -Y,R0
00005e 921a      	ST   -Y,R1
00005f 92fa      	ST   -Y,R15
000060 936a      	ST   -Y,R22
000061 937a      	ST   -Y,R23
000062 938a      	ST   -Y,R24
000063 939a      	ST   -Y,R25
000064 93aa      	ST   -Y,R26
000065 93ba      	ST   -Y,R27
000066 93ea      	ST   -Y,R30
000067 93fa      	ST   -Y,R31
000068 b7ef      	IN   R30,SREG
000069 93ea      	ST   -Y,R30
                 ; 0000 0055     // Reinitialize Timer1 value
                 ; 0000 0056     TCNT1H=0x9380 >> 8;
00006a e9e3      	LDI  R30,LOW(147)
00006b d28c      	RCALL SUBOPT_0x0
                 ; 0000 0057     TCNT1L=0x9380 & 0xff;
                 ; 0000 0058     if(Uint_Timer_Display < TIME_UPDATE_DISPLAY)    Uint_Timer_Display++;
00006c d291      	RCALL SUBOPT_0x1
00006d f438      	BRSH _0x3
00006e efa8      	LDI  R26,LOW(_Uint_Timer_Display)
00006f e0b2      	LDI  R27,HIGH(_Uint_Timer_Display)
000070 91ed      	LD   R30,X+
000071 91fd      	LD   R31,X+
000072 9631      	ADIW R30,1
000073 93fe      	ST   -X,R31
000074 93ee      	ST   -X,R30
                 ; 0000 0059     // Place your code here
                 ; 0000 005A     SCAN_LED();
                 _0x3:
000075 d1f9      	RCALL _SCAN_LED
                 ; 0000 005B 
                 ; 0000 005C }
000076 91e9      	LD   R30,Y+
000077 bfef      	OUT  SREG,R30
000078 91f9      	LD   R31,Y+
000079 91e9      	LD   R30,Y+
00007a 91b9      	LD   R27,Y+
00007b 91a9      	LD   R26,Y+
00007c 9199      	LD   R25,Y+
00007d 9189      	LD   R24,Y+
00007e 9179      	LD   R23,Y+
00007f 9169      	LD   R22,Y+
000080 90f9      	LD   R15,Y+
000081 9019      	LD   R1,Y+
000082 9009      	LD   R0,Y+
000083 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0063 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0064     ADMUX=adc_input | ADC_VREF_TYPE;
000084 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000085 81e8      	LD   R30,Y
000086 93e0 007c 	STS  124,R30
                 ; 0000 0065     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0066     delay_us(10);
                +
000088 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000089 958a     +DEC R24
00008a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0067     // Start the AD conversion
                 ; 0000 0068     ADCSRA|=(1<<ADSC);
00008b 91e0 007a 	LDS  R30,122
00008d 64e0      	ORI  R30,0x40
00008e 93e0 007a 	STS  122,R30
                 ; 0000 0069     // Wait for the AD conversion to complete
                 ; 0000 006A     while ((ADCSRA & (1<<ADIF))==0);
                 _0x4:
000090 91e0 007a 	LDS  R30,122
000092 71e0      	ANDI R30,LOW(0x10)
000093 f3e1      	BREQ _0x4
                 ; 0000 006B     ADCSRA|=(1<<ADIF);
000094 91e0 007a 	LDS  R30,122
000096 61e0      	ORI  R30,0x10
000097 93e0 007a 	STS  122,R30
                 ; 0000 006C     return ADCW;
000099 91e0 0078 	LDS  R30,120
00009b 91f0 0079 	LDS  R31,120+1
00009d 9621      	ADIW R28,1
00009e 9508      	RET
                 ; 0000 006D }
                 ; .FEND
                 ;
                 ;void    PROTECT(void)
                 ; 0000 0070 {
                 _PROTECT:
                 ; .FSTART _PROTECT
                 ; 0000 0071     unsigned int    Uint_ADC_Value;
                 ; 0000 0072     unsigned char   Uc_Loop_count,Uc_Loop2_count;
                 ; 0000 0073     unsigned long int Ul_Sum;
                 ; 0000 0074     unsigned int    Uint_Buff_Temp[NUM_SAMPLE];
                 ; 0000 0075     unsigned int    Uint_temp;
                 ; 0000 0076 
                 ; 0000 0077     /* I Negative */
                 ; 0000 0078     Uint_I_Negative_Buff[Uc_Buffer_count] = read_adc(ADC_I_NEGATIVE);
00009f 97ef      	SBIW R28,63
0000a0 9721      	SBIW R28,1
0000a1 d49e      	RCALL __SAVELOCR6
                 ;	Uint_ADC_Value -> R16,R17
                 ;	Uc_Loop_count -> R19
                 ;	Uc_Loop2_count -> R18
                 ;	Ul_Sum -> Y+66
                 ;	Uint_Buff_Temp -> Y+6
                 ;	Uint_temp -> R20,R21
0000a2 2ded      	MOV  R30,R13
0000a3 d262      	RCALL SUBOPT_0x2
0000a4 d267      	RCALL SUBOPT_0x3
0000a5 93ff      	PUSH R31
0000a6 93ef      	PUSH R30
0000a7 e0a2      	LDI  R26,LOW(2)
0000a8 dfdb      	RCALL _read_adc
0000a9 91af      	POP  R26
0000aa 91bf      	POP  R27
0000ab d263      	RCALL SUBOPT_0x4
                 ; 0000 0079     if(Uint_Timer_Display >= TIME_UPDATE_DISPLAY)
0000ac d251      	RCALL SUBOPT_0x1
0000ad f158      	BRLO _0x7
                 ; 0000 007A     {
                 ; 0000 007B         /* Chuyen sang bo nho dem */
                 ; 0000 007C         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
0000ae e030      	LDI  R19,LOW(0)
                 _0x9:
0000af 313e      	CPI  R19,30
0000b0 f440      	BRSH _0xA
                 ; 0000 007D         {
                 ; 0000 007E             Uint_Buff_Temp[Uc_Loop_count] = Uint_I_Negative_Buff[Uc_Loop_count];
0000b1 d260      	RCALL SUBOPT_0x5
0000b2 d266      	RCALL SUBOPT_0x6
0000b3 2fe3      	MOV  R30,R19
0000b4 d251      	RCALL SUBOPT_0x2
0000b5 d266      	RCALL SUBOPT_0x7
0000b6 d268      	RCALL SUBOPT_0x8
                 ; 0000 007F         }
0000b7 5f3f      	SUBI R19,-1
0000b8 cff6      	RJMP _0x9
                 _0xA:
                 ; 0000 0080         /* Sap xep bo nho dem tu min -> max */
                 ; 0000 0081         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
0000b9 e030      	LDI  R19,LOW(0)
                 _0xC:
0000ba 313e      	CPI  R19,30
0000bb f488      	BRSH _0xD
                 ; 0000 0082         {
                 ; 0000 0083             for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count < NUM_SAMPLE; Uc_Loop2_count++)
0000bc 2f23      	MOV  R18,R19
                 _0xF:
0000bd 312e      	CPI  R18,30
0000be f460      	BRSH _0x10
                 ; 0000 0084             {
                 ; 0000 0085                 if(Uint_Buff_Temp[Uc_Loop_count] > Uint_Buff_Temp[Uc_Loop2_count])
0000bf d252      	RCALL SUBOPT_0x5
0000c0 d261      	RCALL SUBOPT_0x9
0000c1 f438      	BRSH _0x11
                 ; 0000 0086                 {
                 ; 0000 0087                     Uint_temp = Uint_Buff_Temp[Uc_Loop_count];
0000c2 d24f      	RCALL SUBOPT_0x5
0000c3 d26c      	RCALL SUBOPT_0xA
                 ; 0000 0088                     Uint_Buff_Temp[Uc_Loop_count] = Uint_Buff_Temp[Uc_Loop2_count];
0000c4 d254      	RCALL SUBOPT_0x6
0000c5 d26e      	RCALL SUBOPT_0xB
0000c6 d274      	RCALL SUBOPT_0xC
                 ; 0000 0089                     Uint_Buff_Temp[Uc_Loop2_count] = Uint_temp;
0000c7 d26c      	RCALL SUBOPT_0xB
0000c8 d274      	RCALL SUBOPT_0xD
                 ; 0000 008A                 }
                 ; 0000 008B             }
                 _0x11:
0000c9 5f2f      	SUBI R18,-1
0000ca cff2      	RJMP _0xF
                 _0x10:
                 ; 0000 008C         }
0000cb 5f3f      	SUBI R19,-1
0000cc cfed      	RJMP _0xC
                 _0xD:
                 ; 0000 008D         /* Low filter & hight filter */
                 ; 0000 008E         Ul_Sum = 0;
0000cd d273      	RCALL SUBOPT_0xE
                 ; 0000 008F         for(Uc_Loop_count = NUM_FILTER; Uc_Loop_count < (NUM_SAMPLE-NUM_FILTER); Uc_Loop_count++)
                 _0x13:
0000ce 3134      	CPI  R19,20
0000cf f420      	BRSH _0x14
                 ; 0000 0090         {
                 ; 0000 0091             Ul_Sum += Uint_Buff_Temp[Uc_Loop_count];
0000d0 d241      	RCALL SUBOPT_0x5
0000d1 d279      	RCALL SUBOPT_0xF
                 ; 0000 0092         }
0000d2 5f3f      	SUBI R19,-1
0000d3 cffa      	RJMP _0x13
                 _0x14:
                 ; 0000 0093         Uint_data_led4 = (unsigned int)((float)Ul_Sum*ADC_U_NEGATIVE_RATIO/(1024*(NUM_SAMPLE-2*NUM_FILTER)));
0000d4 d28b      	RCALL SUBOPT_0x10
0000d5 93e0 0206 	STS  _Uint_data_led4,R30
0000d7 93f0 0207 	STS  _Uint_data_led4+1,R31
                 ; 0000 0094     }
                 ; 0000 0095     if(Uint_data_led4 > ADC_I_NEGATIVE_SET)
                 _0x7:
0000d9 d29d      	RCALL SUBOPT_0x11
0000da f048      	BRLO _0x15
                 ; 0000 0096     {
                 ; 0000 0097         Uc_I_Negative_Over++;
0000db 9473      	INC  R7
                 ; 0000 0098         if(Uc_I_Negative_Over > 10)
0000dc e0ea      	LDI  R30,LOW(10)
0000dd 15e7      	CP   R30,R7
0000de f420      	BRSH _0x16
                 ; 0000 0099         {
                 ; 0000 009A             Uc_I_Negative_Over = 11;
0000df e0eb      	LDI  R30,LOW(11)
0000e0 2e7e      	MOV  R7,R30
                 ; 0000 009B             Uc_I_Negative_Under = 0;
0000e1 24bb      	CLR  R11
                 ; 0000 009C             Bit_I_Negative_Warning = 1;
0000e2 9af2      	SBI  0x1E,2
                 ; 0000 009D         }
                 ; 0000 009E     }
                 _0x16:
                 ; 0000 009F     else
0000e3 c008      	RJMP _0x19
                 _0x15:
                 ; 0000 00A0     {
                 ; 0000 00A1         Uc_I_Negative_Under++;
0000e4 94b3      	INC  R11
                 ; 0000 00A2         if(Uc_I_Negative_Under > 10)
0000e5 e0ea      	LDI  R30,LOW(10)
0000e6 15eb      	CP   R30,R11
0000e7 f420      	BRSH _0x1A
                 ; 0000 00A3         {
                 ; 0000 00A4             Uc_I_Negative_Under = 11;
0000e8 e0eb      	LDI  R30,LOW(11)
0000e9 2ebe      	MOV  R11,R30
                 ; 0000 00A5             Uc_I_Negative_Over = 0;
0000ea 2477      	CLR  R7
                 ; 0000 00A6             Bit_I_Negative_Warning = 0;
0000eb 98f2      	CBI  0x1E,2
                 ; 0000 00A7         }
                 ; 0000 00A8     }
                 _0x1A:
                 _0x19:
                 ; 0000 00A9     /* I Positive */
                 ; 0000 00AA     Uint_I_Positive_Buff[Uc_Buffer_count] = read_adc(ADC_I_POSITIVE);
0000ec 2ded      	MOV  R30,R13
0000ed d291      	RCALL SUBOPT_0x12
0000ee d21d      	RCALL SUBOPT_0x3
0000ef 93ff      	PUSH R31
0000f0 93ef      	PUSH R30
0000f1 e0a0      	LDI  R26,LOW(0)
0000f2 df91      	RCALL _read_adc
0000f3 91af      	POP  R26
0000f4 91bf      	POP  R27
0000f5 d219      	RCALL SUBOPT_0x4
                 ; 0000 00AB     if(Uint_Timer_Display >= TIME_UPDATE_DISPLAY)
0000f6 d207      	RCALL SUBOPT_0x1
0000f7 f150      	BRLO _0x1D
                 ; 0000 00AC     {
                 ; 0000 00AD         /* Chuyen sang bo nho dem */
                 ; 0000 00AE         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
0000f8 e030      	LDI  R19,LOW(0)
                 _0x1F:
0000f9 313e      	CPI  R19,30
0000fa f438      	BRSH _0x20
                 ; 0000 00AF         {
                 ; 0000 00B0             Uint_Buff_Temp[Uc_Loop_count] = Uint_I_Positive_Buff[Uc_Loop_count];
0000fb d216      	RCALL SUBOPT_0x5
0000fc d21c      	RCALL SUBOPT_0x6
0000fd 2fe3      	MOV  R30,R19
0000fe d280      	RCALL SUBOPT_0x12
0000ff d23b      	RCALL SUBOPT_0xC
                 ; 0000 00B1         }
000100 5f3f      	SUBI R19,-1
000101 cff7      	RJMP _0x1F
                 _0x20:
                 ; 0000 00B2         /* Sap xep bo nho dem tu min -> max */
                 ; 0000 00B3         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
000102 e030      	LDI  R19,LOW(0)
                 _0x22:
000103 313e      	CPI  R19,30
000104 f488      	BRSH _0x23
                 ; 0000 00B4         {
                 ; 0000 00B5             for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count < NUM_SAMPLE; Uc_Loop2_count++)
000105 2f23      	MOV  R18,R19
                 _0x25:
000106 312e      	CPI  R18,30
000107 f460      	BRSH _0x26
                 ; 0000 00B6             {
                 ; 0000 00B7                 if(Uint_Buff_Temp[Uc_Loop_count] > Uint_Buff_Temp[Uc_Loop2_count])
000108 d209      	RCALL SUBOPT_0x5
000109 d218      	RCALL SUBOPT_0x9
00010a f438      	BRSH _0x27
                 ; 0000 00B8                 {
                 ; 0000 00B9                     Uint_temp = Uint_Buff_Temp[Uc_Loop_count];
00010b d206      	RCALL SUBOPT_0x5
00010c d223      	RCALL SUBOPT_0xA
                 ; 0000 00BA                     Uint_Buff_Temp[Uc_Loop_count] = Uint_Buff_Temp[Uc_Loop2_count];
00010d d20b      	RCALL SUBOPT_0x6
00010e d225      	RCALL SUBOPT_0xB
00010f d22b      	RCALL SUBOPT_0xC
                 ; 0000 00BB                     Uint_Buff_Temp[Uc_Loop2_count] = Uint_temp;
000110 d223      	RCALL SUBOPT_0xB
000111 d22b      	RCALL SUBOPT_0xD
                 ; 0000 00BC                 }
                 ; 0000 00BD             }
                 _0x27:
000112 5f2f      	SUBI R18,-1
000113 cff2      	RJMP _0x25
                 _0x26:
                 ; 0000 00BE         }
000114 5f3f      	SUBI R19,-1
000115 cfed      	RJMP _0x22
                 _0x23:
                 ; 0000 00BF         /* Low filter & hight filter */
                 ; 0000 00C0         Ul_Sum = 0;
000116 d22a      	RCALL SUBOPT_0xE
                 ; 0000 00C1         for(Uc_Loop_count = NUM_FILTER; Uc_Loop_count < (NUM_SAMPLE-NUM_FILTER); Uc_Loop_count++)
                 _0x29:
000117 3134      	CPI  R19,20
000118 f420      	BRSH _0x2A
                 ; 0000 00C2         {
                 ; 0000 00C3             Ul_Sum += Uint_Buff_Temp[Uc_Loop_count];
000119 d1f8      	RCALL SUBOPT_0x5
00011a d230      	RCALL SUBOPT_0xF
                 ; 0000 00C4         }
00011b 5f3f      	SUBI R19,-1
00011c cffa      	RJMP _0x29
                 _0x2A:
                 ; 0000 00C5         Uint_data_led2 = (unsigned int)((float)Ul_Sum*ADC_U_NEGATIVE_RATIO/(1024*(NUM_SAMPLE-2*NUM_FILTER)));
00011d d242      	RCALL SUBOPT_0x10
00011e 93e0 0202 	STS  _Uint_data_led2,R30
000120 93f0 0203 	STS  _Uint_data_led2+1,R31
                 ; 0000 00C6     }
                 ; 0000 00C7     if(Uint_data_led4 > ADC_I_POSITIVE_SET)
                 _0x1D:
000122 d254      	RCALL SUBOPT_0x11
000123 f048      	BRLO _0x2B
                 ; 0000 00C8     {
                 ; 0000 00C9         Uc_I_Positive_Over++;
000124 9453      	INC  R5
                 ; 0000 00CA         if(Uc_I_Positive_Over > 10)
000125 e0ea      	LDI  R30,LOW(10)
000126 15e5      	CP   R30,R5
000127 f420      	BRSH _0x2C
                 ; 0000 00CB         {
                 ; 0000 00CC             Uc_I_Positive_Over = 11;
000128 e0eb      	LDI  R30,LOW(11)
000129 2e5e      	MOV  R5,R30
                 ; 0000 00CD             Uc_I_Positive_Under = 0;
00012a 2499      	CLR  R9
                 ; 0000 00CE             Bit_I_Positive_Warning = 1;
00012b 9af0      	SBI  0x1E,0
                 ; 0000 00CF         }
                 ; 0000 00D0     }
                 _0x2C:
                 ; 0000 00D1     else
00012c c008      	RJMP _0x2F
                 _0x2B:
                 ; 0000 00D2     {
                 ; 0000 00D3         Uc_I_Positive_Under++;
00012d 9493      	INC  R9
                 ; 0000 00D4         if(Uc_I_Positive_Under > 10)
00012e e0ea      	LDI  R30,LOW(10)
00012f 15e9      	CP   R30,R9
000130 f420      	BRSH _0x30
                 ; 0000 00D5         {
                 ; 0000 00D6             Uc_I_Positive_Under = 11;
000131 e0eb      	LDI  R30,LOW(11)
000132 2e9e      	MOV  R9,R30
                 ; 0000 00D7             Uc_I_Positive_Over = 0;
000133 2455      	CLR  R5
                 ; 0000 00D8             Bit_I_Positive_Warning = 0;
000134 98f0      	CBI  0x1E,0
                 ; 0000 00D9         }
                 ; 0000 00DA     }
                 _0x30:
                 _0x2F:
                 ; 0000 00DB     /* U Negative */
                 ; 0000 00DC     Uint_U_Negative_Buff[Uc_Buffer_count] = read_adc(ADC_U_NEGATIVE);
000135 2ded      	MOV  R30,R13
000136 d24e      	RCALL SUBOPT_0x13
000137 d1d4      	RCALL SUBOPT_0x3
000138 93ff      	PUSH R31
000139 93ef      	PUSH R30
00013a e0a3      	LDI  R26,LOW(3)
00013b df48      	RCALL _read_adc
00013c 91af      	POP  R26
00013d 91bf      	POP  R27
00013e d1d0      	RCALL SUBOPT_0x4
                 ; 0000 00DD     if(Uint_Timer_Display >= TIME_UPDATE_DISPLAY)
00013f d1be      	RCALL SUBOPT_0x1
000140 f150      	BRLO _0x33
                 ; 0000 00DE     {
                 ; 0000 00DF         /* Chuyen sang bo nho dem */
                 ; 0000 00E0         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
000141 e030      	LDI  R19,LOW(0)
                 _0x35:
000142 313e      	CPI  R19,30
000143 f438      	BRSH _0x36
                 ; 0000 00E1         {
                 ; 0000 00E2             Uint_Buff_Temp[Uc_Loop_count] = Uint_U_Negative_Buff[Uc_Loop_count];
000144 d1cd      	RCALL SUBOPT_0x5
000145 d1d3      	RCALL SUBOPT_0x6
000146 2fe3      	MOV  R30,R19
000147 d23d      	RCALL SUBOPT_0x13
000148 d1f2      	RCALL SUBOPT_0xC
                 ; 0000 00E3         }
000149 5f3f      	SUBI R19,-1
00014a cff7      	RJMP _0x35
                 _0x36:
                 ; 0000 00E4         /* Sap xep bo nho dem tu min -> max */
                 ; 0000 00E5         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
00014b e030      	LDI  R19,LOW(0)
                 _0x38:
00014c 313e      	CPI  R19,30
00014d f488      	BRSH _0x39
                 ; 0000 00E6         {
                 ; 0000 00E7             for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count < NUM_SAMPLE; Uc_Loop2_count++)
00014e 2f23      	MOV  R18,R19
                 _0x3B:
00014f 312e      	CPI  R18,30
000150 f460      	BRSH _0x3C
                 ; 0000 00E8             {
                 ; 0000 00E9                 if(Uint_Buff_Temp[Uc_Loop_count] > Uint_Buff_Temp[Uc_Loop2_count])
000151 d1c0      	RCALL SUBOPT_0x5
000152 d1cf      	RCALL SUBOPT_0x9
000153 f438      	BRSH _0x3D
                 ; 0000 00EA                 {
                 ; 0000 00EB                     Uint_temp = Uint_Buff_Temp[Uc_Loop_count];
000154 d1bd      	RCALL SUBOPT_0x5
000155 d1da      	RCALL SUBOPT_0xA
                 ; 0000 00EC                     Uint_Buff_Temp[Uc_Loop_count] = Uint_Buff_Temp[Uc_Loop2_count];
000156 d1c2      	RCALL SUBOPT_0x6
000157 d1dc      	RCALL SUBOPT_0xB
000158 d1e2      	RCALL SUBOPT_0xC
                 ; 0000 00ED                     Uint_Buff_Temp[Uc_Loop2_count] = Uint_temp;
000159 d1da      	RCALL SUBOPT_0xB
00015a d1e2      	RCALL SUBOPT_0xD
                 ; 0000 00EE                 }
                 ; 0000 00EF             }
                 _0x3D:
00015b 5f2f      	SUBI R18,-1
00015c cff2      	RJMP _0x3B
                 _0x3C:
                 ; 0000 00F0         }
00015d 5f3f      	SUBI R19,-1
00015e cfed      	RJMP _0x38
                 _0x39:
                 ; 0000 00F1         /* Low filter & hight filter */
                 ; 0000 00F2         Ul_Sum = 0;
00015f d1e1      	RCALL SUBOPT_0xE
                 ; 0000 00F3         for(Uc_Loop_count = NUM_FILTER; Uc_Loop_count < (NUM_SAMPLE-NUM_FILTER); Uc_Loop_count++)
                 _0x3F:
000160 3134      	CPI  R19,20
000161 f420      	BRSH _0x40
                 ; 0000 00F4         {
                 ; 0000 00F5             Ul_Sum += Uint_Buff_Temp[Uc_Loop_count];
000162 d1af      	RCALL SUBOPT_0x5
000163 d1e7      	RCALL SUBOPT_0xF
                 ; 0000 00F6         }
000164 5f3f      	SUBI R19,-1
000165 cffa      	RJMP _0x3F
                 _0x40:
                 ; 0000 00F7         Uint_data_led1 = (unsigned int)((float)Ul_Sum*ADC_U_NEGATIVE_RATIO/(1024*(NUM_SAMPLE-2*NUM_FILTER)));
000166 d1f9      	RCALL SUBOPT_0x10
000167 93e0 0200 	STS  _Uint_data_led1,R30
000169 93f0 0201 	STS  _Uint_data_led1+1,R31
                 ; 0000 00F8     }
                 ; 0000 00F9     if(Uint_data_led1 > ADC_U_NEGATIVE_SET)
                 _0x33:
00016b d21f      	RCALL SUBOPT_0x14
00016c 32ad      	CPI  R26,LOW(0x12D)
00016d e0e1      	LDI  R30,HIGH(0x12D)
00016e 07be      	CPC  R27,R30
00016f f048      	BRLO _0x41
                 ; 0000 00FA     {
                 ; 0000 00FB         Uc_U_Negative_Over++;
000170 9463      	INC  R6
                 ; 0000 00FC         if(Uc_U_Negative_Over > 10)
000171 e0ea      	LDI  R30,LOW(10)
000172 15e6      	CP   R30,R6
000173 f420      	BRSH _0x42
                 ; 0000 00FD         {
                 ; 0000 00FE             Uc_U_Negative_Over = 11;
000174 e0eb      	LDI  R30,LOW(11)
000175 2e6e      	MOV  R6,R30
                 ; 0000 00FF             Uc_U_Negative_Under = 0;
000176 24aa      	CLR  R10
                 ; 0000 0100             Bit_U_Negative_Warning = 1;
000177 9af3      	SBI  0x1E,3
                 ; 0000 0101         }
                 ; 0000 0102     }
                 _0x42:
                 ; 0000 0103     else
000178 c008      	RJMP _0x45
                 _0x41:
                 ; 0000 0104     {
                 ; 0000 0105         Uc_U_Negative_Under++;
000179 94a3      	INC  R10
                 ; 0000 0106         if(Uc_U_Negative_Under > 10)
00017a e0ea      	LDI  R30,LOW(10)
00017b 15ea      	CP   R30,R10
00017c f420      	BRSH _0x46
                 ; 0000 0107         {
                 ; 0000 0108             Uc_U_Negative_Under = 11;
00017d e0eb      	LDI  R30,LOW(11)
00017e 2eae      	MOV  R10,R30
                 ; 0000 0109             Uc_U_Negative_Over = 0;
00017f 2466      	CLR  R6
                 ; 0000 010A             Bit_U_Negative_Warning = 0;
000180 98f3      	CBI  0x1E,3
                 ; 0000 010B         }
                 ; 0000 010C     }
                 _0x46:
                 _0x45:
                 ; 0000 010D     /* U Positive */
                 ; 0000 010E     Uint_U_Positive_Buff[Uc_Buffer_count] = read_adc(ADC_U_POSITIVE);
000181 2ded      	MOV  R30,R13
000182 d20d      	RCALL SUBOPT_0x15
000183 d188      	RCALL SUBOPT_0x3
000184 93ff      	PUSH R31
000185 93ef      	PUSH R30
000186 e0a1      	LDI  R26,LOW(1)
000187 defc      	RCALL _read_adc
000188 91af      	POP  R26
000189 91bf      	POP  R27
00018a d184      	RCALL SUBOPT_0x4
                 ; 0000 010F     if(Uint_Timer_Display >= TIME_UPDATE_DISPLAY)
00018b d172      	RCALL SUBOPT_0x1
00018c f178      	BRLO _0x49
                 ; 0000 0110     {
                 ; 0000 0111         /* Chuyen sang bo nho dem */
                 ; 0000 0112         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
00018d e030      	LDI  R19,LOW(0)
                 _0x4B:
00018e 313e      	CPI  R19,30
00018f f438      	BRSH _0x4C
                 ; 0000 0113         {
                 ; 0000 0114             Uint_Buff_Temp[Uc_Loop_count] = Uint_U_Positive_Buff[Uc_Loop_count];
000190 d181      	RCALL SUBOPT_0x5
000191 d187      	RCALL SUBOPT_0x6
000192 2fe3      	MOV  R30,R19
000193 d1fc      	RCALL SUBOPT_0x15
000194 d1a6      	RCALL SUBOPT_0xC
                 ; 0000 0115         }
000195 5f3f      	SUBI R19,-1
000196 cff7      	RJMP _0x4B
                 _0x4C:
                 ; 0000 0116         /* Sap xep bo nho dem tu min -> max */
                 ; 0000 0117         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
000197 e030      	LDI  R19,LOW(0)
                 _0x4E:
000198 313e      	CPI  R19,30
000199 f488      	BRSH _0x4F
                 ; 0000 0118         {
                 ; 0000 0119             for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count < NUM_SAMPLE; Uc_Loop2_count++)
00019a 2f23      	MOV  R18,R19
                 _0x51:
00019b 312e      	CPI  R18,30
00019c f460      	BRSH _0x52
                 ; 0000 011A             {
                 ; 0000 011B                 if(Uint_Buff_Temp[Uc_Loop_count] > Uint_Buff_Temp[Uc_Loop2_count])
00019d d174      	RCALL SUBOPT_0x5
00019e d183      	RCALL SUBOPT_0x9
00019f f438      	BRSH _0x53
                 ; 0000 011C                 {
                 ; 0000 011D                     Uint_temp = Uint_Buff_Temp[Uc_Loop_count];
0001a0 d171      	RCALL SUBOPT_0x5
0001a1 d18e      	RCALL SUBOPT_0xA
                 ; 0000 011E                     Uint_Buff_Temp[Uc_Loop_count] = Uint_Buff_Temp[Uc_Loop2_count];
0001a2 d176      	RCALL SUBOPT_0x6
0001a3 d190      	RCALL SUBOPT_0xB
0001a4 d196      	RCALL SUBOPT_0xC
                 ; 0000 011F                     Uint_Buff_Temp[Uc_Loop2_count] = Uint_temp;
0001a5 d18e      	RCALL SUBOPT_0xB
0001a6 d196      	RCALL SUBOPT_0xD
                 ; 0000 0120                 }
                 ; 0000 0121             }
                 _0x53:
0001a7 5f2f      	SUBI R18,-1
0001a8 cff2      	RJMP _0x51
                 _0x52:
                 ; 0000 0122         }
0001a9 5f3f      	SUBI R19,-1
0001aa cfed      	RJMP _0x4E
                 _0x4F:
                 ; 0000 0123         /* Low filter & hight filter */
                 ; 0000 0124         Ul_Sum = 0;
0001ab d195      	RCALL SUBOPT_0xE
                 ; 0000 0125         for(Uc_Loop_count = NUM_FILTER; Uc_Loop_count < (NUM_SAMPLE-NUM_FILTER); Uc_Loop_count++)
                 _0x55:
0001ac 3134      	CPI  R19,20
0001ad f420      	BRSH _0x56
                 ; 0000 0126         {
                 ; 0000 0127             Ul_Sum += Uint_Buff_Temp[Uc_Loop_count];
0001ae d163      	RCALL SUBOPT_0x5
0001af d19b      	RCALL SUBOPT_0xF
                 ; 0000 0128         }
0001b0 5f3f      	SUBI R19,-1
0001b1 cffa      	RJMP _0x55
                 _0x56:
                 ; 0000 0129         Uint_data_led3 = (unsigned int)((float)Ul_Sum*ADC_U_POSITIVE_RATIO/(1024*(NUM_SAMPLE-2*NUM_FILTER)));
0001b2 d1ad      	RCALL SUBOPT_0x10
0001b3 93e0 0204 	STS  _Uint_data_led3,R30
0001b5 93f0 0205 	STS  _Uint_data_led3+1,R31
                 ; 0000 012A         Uint_Timer_Display = 0;
0001b7 e0e0      	LDI  R30,LOW(0)
0001b8 93e0 02f8 	STS  _Uint_Timer_Display,R30
0001ba 93e0 02f9 	STS  _Uint_Timer_Display+1,R30
                 ; 0000 012B     }
                 ; 0000 012C     if(Uint_data_led3 > ADC_U_POSITIVE_SET)
                 _0x49:
0001bc d1d9      	RCALL SUBOPT_0x16
0001bd 32ad      	CPI  R26,LOW(0x12D)
0001be e0e1      	LDI  R30,HIGH(0x12D)
0001bf 07be      	CPC  R27,R30
0001c0 f048      	BRLO _0x57
                 ; 0000 012D     {
                 ; 0000 012E         Uc_U_Positive_Over++;
0001c1 9443      	INC  R4
                 ; 0000 012F         if(Uc_U_Positive_Over > 10)
0001c2 e0ea      	LDI  R30,LOW(10)
0001c3 15e4      	CP   R30,R4
0001c4 f420      	BRSH _0x58
                 ; 0000 0130         {
                 ; 0000 0131             Uc_U_Positive_Over = 11;
0001c5 e0eb      	LDI  R30,LOW(11)
0001c6 2e4e      	MOV  R4,R30
                 ; 0000 0132             Uc_U_Positive_Under = 0;
0001c7 2488      	CLR  R8
                 ; 0000 0133             Bit_U_Positive_Warning = 1;
0001c8 9af1      	SBI  0x1E,1
                 ; 0000 0134         }
                 ; 0000 0135     }
                 _0x58:
                 ; 0000 0136     else
0001c9 c008      	RJMP _0x5B
                 _0x57:
                 ; 0000 0137     {
                 ; 0000 0138         Uc_U_Positive_Under++;
0001ca 9483      	INC  R8
                 ; 0000 0139         if(Uc_U_Positive_Under > 10)
0001cb e0ea      	LDI  R30,LOW(10)
0001cc 15e8      	CP   R30,R8
0001cd f420      	BRSH _0x5C
                 ; 0000 013A         {
                 ; 0000 013B             Uc_U_Positive_Under = 11;
0001ce e0eb      	LDI  R30,LOW(11)
0001cf 2e8e      	MOV  R8,R30
                 ; 0000 013C             Uc_U_Positive_Over = 0;
0001d0 2444      	CLR  R4
                 ; 0000 013D             Bit_U_Positive_Warning = 0;
0001d1 98f1      	CBI  0x1E,1
                 ; 0000 013E         }
                 ; 0000 013F     }
                 _0x5C:
                 _0x5B:
                 ; 0000 0140     Uc_Buffer_count++;
0001d2 94d3      	INC  R13
                 ; 0000 0141     if(Uc_Buffer_count >= NUM_SAMPLE)    Uc_Buffer_count = 0;
0001d3 e1ee      	LDI  R30,LOW(30)
0001d4 16de      	CP   R13,R30
0001d5 f008      	BRLO _0x5F
0001d6 24dd      	CLR  R13
                 ; 0000 0142 
                 ; 0000 0143     if(Bit_I_Negative_Warning || Bit_I_Positive_Warning || Bit_U_Positive_Warning || Bit_U_Negative_Warning)
                 _0x5F:
0001d7 99f2      	SBIC 0x1E,2
0001d8 c006      	RJMP _0x61
0001d9 99f0      	SBIC 0x1E,0
0001da c004      	RJMP _0x61
0001db 99f1      	SBIC 0x1E,1
0001dc c002      	RJMP _0x61
0001dd 9bf3      	SBIS 0x1E,3
0001de c002      	RJMP _0x60
                 _0x61:
                 ; 0000 0144     {
                 ; 0000 0145         PROTECT_ON;
0001df 9a44      	SBI  0x8,4
                 ; 0000 0146     }
                 ; 0000 0147     else
0001e0 c001      	RJMP _0x65
                 _0x60:
                 ; 0000 0148     {
                 ; 0000 0149         PROTECT_OFF;
0001e1 9844      	CBI  0x8,4
                 ; 0000 014A     }
                 _0x65:
                 ; 0000 014B     delay_ms(10);
0001e2 e0aa      	LDI  R26,LOW(10)
0001e3 e0b0      	LDI  R27,0
0001e4 d1fb      	RCALL _delay_ms
                 ; 0000 014C }
0001e5 d361      	RCALL __LOADLOCR6
0001e6 96ef      	ADIW R28,63
0001e7 9627      	ADIW R28,7
0001e8 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 014F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0150     // Declare your local variables here
                 ; 0000 0151 
                 ; 0000 0152     // Crystal Oscillator division factor: 1
                 ; 0000 0153     #pragma optsize-
                 ; 0000 0154     CLKPR=(1<<CLKPCE);
0001e9 e8e0      	LDI  R30,LOW(128)
0001ea 93e0 0061 	STS  97,R30
                 ; 0000 0155     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0001ec e0e0      	LDI  R30,LOW(0)
0001ed 93e0 0061 	STS  97,R30
                 ; 0000 0156     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0157     #pragma optsize+
                 ; 0000 0158     #endif
                 ; 0000 0159     // Input/Output Ports initialization
                 ; 0000 015A     // Port B initialization
                 ; 0000 015B     // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 015C     DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0001ef e2e8      	LDI  R30,LOW(40)
0001f0 b9e4      	OUT  0x4,R30
                 ; 0000 015D     // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 015E     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0001f1 e0e0      	LDI  R30,LOW(0)
0001f2 b9e5      	OUT  0x5,R30
                 ; 0000 015F 
                 ; 0000 0160     // Port C initialization
                 ; 0000 0161     // Function: Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0162     DDRC=(0<<DDC6) | (0<<DDC5) | (1<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0001f3 e1e0      	LDI  R30,LOW(16)
0001f4 b9e7      	OUT  0x7,R30
                 ; 0000 0163     // State: Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0164     PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0001f5 e0e0      	LDI  R30,LOW(0)
0001f6 b9e8      	OUT  0x8,R30
                 ; 0000 0165 
                 ; 0000 0166     // Port D initialization
                 ; 0000 0167     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=In
                 ; 0000 0168     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
0001f7 e0e4      	LDI  R30,LOW(4)
0001f8 b9ea      	OUT  0xA,R30
                 ; 0000 0169     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0000 016A     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0001f9 e0e0      	LDI  R30,LOW(0)
0001fa b9eb      	OUT  0xB,R30
                 ; 0000 016B 
                 ; 0000 016C     // Timer/Counter 0 initialization
                 ; 0000 016D     // Clock source: System Clock
                 ; 0000 016E     // Clock value: Timer 0 Stopped
                 ; 0000 016F     // Mode: Normal top=0xFF
                 ; 0000 0170     // OC0A output: Disconnected
                 ; 0000 0171     // OC0B output: Disconnected
                 ; 0000 0172     TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0001fb bde4      	OUT  0x24,R30
                 ; 0000 0173     TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0001fc bde5      	OUT  0x25,R30
                 ; 0000 0174     TCNT0=0x00;
0001fd bde6      	OUT  0x26,R30
                 ; 0000 0175     OCR0A=0x00;
0001fe bde7      	OUT  0x27,R30
                 ; 0000 0176     OCR0B=0x00;
0001ff bde8      	OUT  0x28,R30
                 ; 0000 0177 
                 ; 0000 0178     // Timer/Counter 1 initialization
                 ; 0000 0179     // Clock source: System Clock
                 ; 0000 017A     // Clock value: 8000,000 kHz
                 ; 0000 017B     // Mode: Normal top=0xFFFF
                 ; 0000 017C     // OC1A output: Disconnected
                 ; 0000 017D     // OC1B output: Disconnected
                 ; 0000 017E     // Noise Canceler: Off
                 ; 0000 017F     // Input Capture on Falling Edge
                 ; 0000 0180     // Timer Period: 2 ms
                 ; 0000 0181     // Timer1 Overflow Interrupt: On
                 ; 0000 0182     // Input Capture Interrupt: Off
                 ; 0000 0183     // Compare A Match Interrupt: Off
                 ; 0000 0184     // Compare B Match Interrupt: Off
                 ; 0000 0185     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000200 93e0 0080 	STS  128,R30
                 ; 0000 0186     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000202 e0e1      	LDI  R30,LOW(1)
000203 93e0 0081 	STS  129,R30
                 ; 0000 0187     TCNT1H=0xC1;
000205 ece1      	LDI  R30,LOW(193)
000206 d0f1      	RCALL SUBOPT_0x0
                 ; 0000 0188     TCNT1L=0x80;
                 ; 0000 0189     ICR1H=0x00;
000207 e0e0      	LDI  R30,LOW(0)
000208 93e0 0087 	STS  135,R30
                 ; 0000 018A     ICR1L=0x00;
00020a 93e0 0086 	STS  134,R30
                 ; 0000 018B     OCR1AH=0x00;
00020c 93e0 0089 	STS  137,R30
                 ; 0000 018C     OCR1AL=0x00;
00020e 93e0 0088 	STS  136,R30
                 ; 0000 018D     OCR1BH=0x00;
000210 93e0 008b 	STS  139,R30
                 ; 0000 018E     OCR1BL=0x00;
000212 93e0 008a 	STS  138,R30
                 ; 0000 018F 
                 ; 0000 0190     // Timer/Counter 2 initialization
                 ; 0000 0191     // Clock source: System Clock
                 ; 0000 0192     // Clock value: Timer2 Stopped
                 ; 0000 0193     // Mode: Normal top=0xFF
                 ; 0000 0194     // OC2A output: Disconnected
                 ; 0000 0195     // OC2B output: Disconnected
                 ; 0000 0196     ASSR=(0<<EXCLK) | (0<<AS2);
000214 93e0 00b6 	STS  182,R30
                 ; 0000 0197     TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
000216 93e0 00b0 	STS  176,R30
                 ; 0000 0198     TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000218 93e0 00b1 	STS  177,R30
                 ; 0000 0199     TCNT2=0x00;
00021a 93e0 00b2 	STS  178,R30
                 ; 0000 019A     OCR2A=0x00;
00021c 93e0 00b3 	STS  179,R30
                 ; 0000 019B     OCR2B=0x00;
00021e 93e0 00b4 	STS  180,R30
                 ; 0000 019C 
                 ; 0000 019D     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 019E     TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
000220 93e0 006e 	STS  110,R30
                 ; 0000 019F 
                 ; 0000 01A0     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 01A1     TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
000222 e0e1      	LDI  R30,LOW(1)
000223 93e0 006f 	STS  111,R30
                 ; 0000 01A2 
                 ; 0000 01A3     // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 01A4     TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
000225 e0e0      	LDI  R30,LOW(0)
000226 93e0 0070 	STS  112,R30
                 ; 0000 01A5 
                 ; 0000 01A6     // External Interrupt(s) initialization
                 ; 0000 01A7     // INT0: Off
                 ; 0000 01A8     // INT1: Off
                 ; 0000 01A9     // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 01AA     // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 01AB     // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 01AC     EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000228 93e0 0069 	STS  105,R30
                 ; 0000 01AD     EIMSK=(0<<INT1) | (0<<INT0);
00022a bbed      	OUT  0x1D,R30
                 ; 0000 01AE     PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
00022b 93e0 0068 	STS  104,R30
                 ; 0000 01AF 
                 ; 0000 01B0     // USART initialization
                 ; 0000 01B1     // USART disabled
                 ; 0000 01B2     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00022d 93e0 00c1 	STS  193,R30
                 ; 0000 01B3 
                 ; 0000 01B4     // Analog Comparator initialization
                 ; 0000 01B5     // Analog Comparator: Off
                 ; 0000 01B6     // The Analog Comparator's positive input is
                 ; 0000 01B7     // connected to the AIN0 pin
                 ; 0000 01B8     // The Analog Comparator's negative input is
                 ; 0000 01B9     // connected to the AIN1 pin
                 ; 0000 01BA     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00022f e8e0      	LDI  R30,LOW(128)
000230 bfe0      	OUT  0x30,R30
                 ; 0000 01BB     ADCSRB=(0<<ACME);
000231 d169      	RCALL SUBOPT_0x17
                 ; 0000 01BC     // Digital input buffer on AIN0: On
                 ; 0000 01BD     // Digital input buffer on AIN1: On
                 ; 0000 01BE     DIDR1=(0<<AIN0D) | (0<<AIN1D);
000232 93e0 007f 	STS  127,R30
                 ; 0000 01BF 
                 ; 0000 01C0 
                 ; 0000 01C1     // ADC initialization
                 ; 0000 01C2     // ADC Clock frequency: 1000,000 kHz
                 ; 0000 01C3     // ADC Voltage Reference: AREF pin
                 ; 0000 01C4     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 01C5     // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 01C6     // ADC4: On, ADC5: On
                 ; 0000 01C7     DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
000234 e0e0      	LDI  R30,LOW(0)
000235 93e0 007e 	STS  126,R30
                 ; 0000 01C8     ADMUX=ADC_VREF_TYPE;
000237 93e0 007c 	STS  124,R30
                 ; 0000 01C9     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000239 e8e3      	LDI  R30,LOW(131)
00023a 93e0 007a 	STS  122,R30
                 ; 0000 01CA     ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00023c d15e      	RCALL SUBOPT_0x17
                 ; 0000 01CB 
                 ; 0000 01CC 
                 ; 0000 01CD     // SPI initialization
                 ; 0000 01CE     // SPI disabled
                 ; 0000 01CF     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00023d bdec      	OUT  0x2C,R30
                 ; 0000 01D0 
                 ; 0000 01D1     // TWI initialization
                 ; 0000 01D2     // TWI disabled
                 ; 0000 01D3     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00023e e0e0      	LDI  R30,LOW(0)
00023f 93e0 00bc 	STS  188,R30
                 ; 0000 01D4 
                 ; 0000 01D5     // Global enable interrupts
                 ; 0000 01D6     #asm("sei")
000241 9478      	sei
                 ; 0000 01D7     PROTECT_OFF;
000242 9844      	CBI  0x8,4
                 ; 0000 01D8     while (1)
                 _0x6A:
                 ; 0000 01D9     {
                 ; 0000 01DA     // Place your code here
                 ; 0000 01DB         PROTECT();
000243 de5b      	RCALL _PROTECT
                 ; 0000 01DC     }
000244 cffe      	RJMP _0x6A
                 ; 0000 01DD }
                 _0x6D:
000245 cfff      	RJMP _0x6D
                 ; .FEND
                 ;#include "scan_led.h"
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;unsigned int    Uint_data_led1 = 0;
                 ;unsigned int    Uint_data_led2 = 0;
                 ;unsigned int    Uint_data_led3 = 0;
                 ;unsigned int    Uint_data_led4 = 0;
                 ;unsigned char   Uc_Select_led=1;
                 
                 	.DSEG
                 ;
                 ;unsigned char   BCDLED[11]={0xF9,0x21,0xEA,0x6B,0x33,0x5B,0xDB,0x29,0xFB,0x7B,0};
                 ;
                 ;/* Day du lieu quet led qua duong spi_software
                 ;Co thẻ day tu 1 den 3 byte du lieu.
                 ;Du lieu sau khi day ra day du moi tien hanh xuat du lieu
                 ;num_bytes : so byte duoc day ra
                 ;data_first : du lieu dau tien
                 ;data_second: du lieu thu 2
                 ;data_third ; du lieu thu 3
                 ;*/
                 ;void    SEND_DATA_LED(unsigned char num_bytes,unsigned char  byte_1,unsigned char  byte_2,unsigned char  byte_3)
                 ; 0001 0015 {
                 
                 	.CSEG
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0001 0016     unsigned char   i;
                 ; 0001 0017     unsigned char   data[6];
                 ; 0001 0018     for(i=0;i<6;i++)    data[i] = 0;
000246 93aa      	ST   -Y,R26
000247 9726      	SBIW R28,6
000248 931a      	ST   -Y,R17
                 ;	num_bytes -> Y+10
                 ;	byte_1 -> Y+9
                 ;	byte_2 -> Y+8
                 ;	byte_3 -> Y+7
                 ;	i -> R17
                 ;	data -> Y+1
000249 e010      	LDI  R17,LOW(0)
                 _0x20006:
00024a 3016      	CPI  R17,6
00024b f428      	BRSH _0x20007
00024c d152      	RCALL SUBOPT_0x18
00024d e0e0      	LDI  R30,LOW(0)
00024e 93ec      	ST   X,R30
00024f 5f1f      	SUBI R17,-1
000250 cff9      	RJMP _0x20006
                 _0x20007:
                 ; 0001 0019 data[0] = byte_1;
000251 85e9      	LDD  R30,Y+9
000252 83e9      	STD  Y+1,R30
                 ; 0001 001A     data[1] = byte_2;
000253 85e8      	LDD  R30,Y+8
000254 83ea      	STD  Y+2,R30
                 ; 0001 001B     data[2] = byte_3;
000255 81ef      	LDD  R30,Y+7
000256 83eb      	STD  Y+3,R30
                 ; 0001 001C 
                 ; 0001 001D     for(i=0;i<(num_bytes - 1);i++)    SPI_SENDBYTE(data[i],0);
000257 e010      	LDI  R17,LOW(0)
                 _0x20009:
000258 85ea      	LDD  R30,Y+10
000259 e0f0      	LDI  R31,0
00025a 9731      	SBIW R30,1
00025b 2fa1      	MOV  R26,R17
00025c e0b0      	LDI  R27,0
00025d 17ae      	CP   R26,R30
00025e 07bf      	CPC  R27,R31
00025f f43c      	BRGE _0x2000A
000260 d13e      	RCALL SUBOPT_0x18
000261 91ec      	LD   R30,X
000262 93ea      	ST   -Y,R30
000263 e0a0      	LDI  R26,LOW(0)
000264 d078      	RCALL _SPI_SENDBYTE
000265 5f1f      	SUBI R17,-1
000266 cff1      	RJMP _0x20009
                 _0x2000A:
                 ; 0001 001E SPI_SENDBYTE(data[i],1);
000267 d137      	RCALL SUBOPT_0x18
000268 91ec      	LD   R30,X
000269 93ea      	ST   -Y,R30
00026a e0a1      	LDI  R26,LOW(1)
00026b d071      	RCALL _SPI_SENDBYTE
                 ; 0001 001F }
00026c 8118      	LDD  R17,Y+0
00026d 962b      	ADIW R28,11
00026e 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;/*
                 ;Ham quet led
                 ;num_led: Thu tu led
                 ;data: Du lieu hien thi tren led.
                 ;*/
                 ;void    SCAN_LED(void)
                 ; 0001 0028 {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0001 0029     unsigned char   byte1,byte2,byte3;
                 ; 0001 002A     unsigned char    data;
                 ; 0001 002B     unsigned char   bit_left;
                 ; 0001 002C     bit_left = 0x01;
00026f d2d0      	RCALL __SAVELOCR6
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
                 ;	data -> R18
                 ;	bit_left -> R21
000270 e051      	LDI  R21,LOW(1)
                 ; 0001 002D     byte1 = 0;
000271 e010      	LDI  R17,LOW(0)
                 ; 0001 002E     byte2 = 0;
000272 e000      	LDI  R16,LOW(0)
                 ; 0001 002F     byte3 = 0;
000273 e030      	LDI  R19,LOW(0)
                 ; 0001 0030 
                 ; 0001 0031     Uc_Select_led++;
000274 91e0 02fa 	LDS  R30,_Uc_Select_led
000276 5fef      	SUBI R30,-LOW(1)
000277 93e0 02fa 	STS  _Uc_Select_led,R30
                 ; 0001 0032     bit_left <<= (Uc_Select_led-1);
000279 50e1      	SUBI R30,LOW(1)
00027a 2fa5      	MOV  R26,R21
00027b d2a2      	RCALL __LSLB12
00027c 2f5e      	MOV  R21,R30
                 ; 0001 0033     if(Uc_Select_led > 8)
00027d 91a0 02fa 	LDS  R26,_Uc_Select_led
00027f 30a9      	CPI  R26,LOW(0x9)
000280 f020      	BRLO _0x2000B
                 ; 0001 0034     {
                 ; 0001 0035         Uc_Select_led = 1;
000281 e0e1      	LDI  R30,LOW(1)
000282 93e0 02fa 	STS  _Uc_Select_led,R30
                 ; 0001 0036         bit_left = 0x01;
000284 e051      	LDI  R21,LOW(1)
                 ; 0001 0037     }
                 ; 0001 0038     /* 7-seg 1*/
                 ; 0001 0039     data = Uint_data_led1/1000;
                 _0x2000B:
000285 d105      	RCALL SUBOPT_0x14
000286 d11d      	RCALL SUBOPT_0x19
                 ; 0001 003A     byte1 = BCDLED[data];
                 ; 0001 003B     // byte1 = 0xFE;
                 ; 0001 003C     if((byte1 & bit_left)) byte3 |= 0x04;
000287 f009      	BREQ _0x2000C
000288 6034      	ORI  R19,LOW(4)
                 ; 0001 003D     data = Uint_data_led1/100%10;
                 _0x2000C:
000289 d101      	RCALL SUBOPT_0x14
00028a d124      	RCALL SUBOPT_0x1A
                 ; 0001 003E     byte1 = BCDLED[data];
                 ; 0001 003F     // byte1 = 0x06;
                 ; 0001 0040     if(byte1 & bit_left) byte3 |= 0x08;
00028b d130      	RCALL SUBOPT_0x1B
00028c f009      	BREQ _0x2000D
00028d 6038      	ORI  R19,LOW(8)
                 ; 0001 0041     data = Uint_data_led1/10%10;
                 _0x2000D:
00028e d0fc      	RCALL SUBOPT_0x14
00028f d12f      	RCALL SUBOPT_0x1C
000290 d131      	RCALL SUBOPT_0x1D
                 ; 0001 0042     byte1 = BCDLED[data];
                 ; 0001 0043     byte1 |= 0x04;
000291 d13a      	RCALL SUBOPT_0x1E
                 ; 0001 0044     // byte1 = 0x06;
                 ; 0001 0045     if(byte1 & bit_left) byte3 |= 0x10;
000292 f009      	BREQ _0x2000E
000293 6130      	ORI  R19,LOW(16)
                 ; 0001 0046     data = Uint_data_led1%10;
                 _0x2000E:
000294 d0f6      	RCALL SUBOPT_0x14
000295 d138      	RCALL SUBOPT_0x1F
                 ; 0001 0047     byte1 = BCDLED[data];
                 ; 0001 0048     // byte1 = 0x06;
                 ; 0001 0049     if(byte1 & bit_left) byte2 |= 0x10;
000296 f009      	BREQ _0x2000F
000297 6100      	ORI  R16,LOW(16)
                 ; 0001 004A     /* 7-seg 2 */
                 ; 0001 004B     data = Uint_data_led2/1000;
                 _0x2000F:
000298 d13d      	RCALL SUBOPT_0x20
000299 d10a      	RCALL SUBOPT_0x19
                 ; 0001 004C     byte1 = BCDLED[data];
                 ; 0001 004D     if(byte1 & bit_left) byte2 |= 0x20;
00029a f009      	BREQ _0x20010
00029b 6200      	ORI  R16,LOW(32)
                 ; 0001 004E     data = Uint_data_led2/100%10;
                 _0x20010:
00029c d139      	RCALL SUBOPT_0x20
00029d d111      	RCALL SUBOPT_0x1A
                 ; 0001 004F     byte1 = BCDLED[data];
                 ; 0001 0050     byte1 |= 0x04;
00029e d12d      	RCALL SUBOPT_0x1E
                 ; 0001 0051     if(byte1 & bit_left) byte2 |= 0x08;
00029f f009      	BREQ _0x20011
0002a0 6008      	ORI  R16,LOW(8)
                 ; 0001 0052     data = Uint_data_led2/10%10;
                 _0x20011:
0002a1 d134      	RCALL SUBOPT_0x20
0002a2 d11c      	RCALL SUBOPT_0x1C
0002a3 d11e      	RCALL SUBOPT_0x1D
                 ; 0001 0053     byte1 = BCDLED[data];
                 ; 0001 0054     if(byte1 & bit_left) byte2 |= 0x04;
0002a4 d117      	RCALL SUBOPT_0x1B
0002a5 f009      	BREQ _0x20012
0002a6 6004      	ORI  R16,LOW(4)
                 ; 0001 0055     data = Uint_data_led2%10;
                 _0x20012:
0002a7 d12e      	RCALL SUBOPT_0x20
0002a8 d125      	RCALL SUBOPT_0x1F
                 ; 0001 0056     byte1 = BCDLED[data];
                 ; 0001 0057     if(byte1 & bit_left) byte2 |= 0x01;
0002a9 f009      	BREQ _0x20013
0002aa 6001      	ORI  R16,LOW(1)
                 ; 0001 0058     /* 7-seg 3 */
                 ; 0001 0059     data = Uint_data_led3/1000;
                 _0x20013:
0002ab d0ea      	RCALL SUBOPT_0x16
0002ac d0f7      	RCALL SUBOPT_0x19
                 ; 0001 005A     byte1 = BCDLED[data];
                 ; 0001 005B     if(byte1 & bit_left) byte3 |= 0x20;
0002ad f009      	BREQ _0x20014
0002ae 6230      	ORI  R19,LOW(32)
                 ; 0001 005C     data = Uint_data_led3/100%10;
                 _0x20014:
0002af d0e6      	RCALL SUBOPT_0x16
0002b0 d0fe      	RCALL SUBOPT_0x1A
                 ; 0001 005D     byte1 = BCDLED[data];
                 ; 0001 005E     // byte1 |= 0x80;
                 ; 0001 005F     if(byte1 & bit_left) byte3 |= 0x40;
0002b1 d10a      	RCALL SUBOPT_0x1B
0002b2 f009      	BREQ _0x20015
0002b3 6430      	ORI  R19,LOW(64)
                 ; 0001 0060     data = Uint_data_led3/10%10;
                 _0x20015:
0002b4 d0e1      	RCALL SUBOPT_0x16
0002b5 d109      	RCALL SUBOPT_0x1C
0002b6 d10b      	RCALL SUBOPT_0x1D
                 ; 0001 0061     byte1 = BCDLED[data];
                 ; 0001 0062     byte1 |= 0x04;
0002b7 d114      	RCALL SUBOPT_0x1E
                 ; 0001 0063     if(byte1 & bit_left) byte3 |= 0x80;
0002b8 f009      	BREQ _0x20016
0002b9 6830      	ORI  R19,LOW(128)
                 ; 0001 0064     data = Uint_data_led3%10;
                 _0x20016:
0002ba d0db      	RCALL SUBOPT_0x16
0002bb d112      	RCALL SUBOPT_0x1F
                 ; 0001 0065     byte1 = BCDLED[data];
                 ; 0001 0066     if(byte1 & bit_left) byte3 |= 0x02;
0002bc f009      	BREQ _0x20017
0002bd 6032      	ORI  R19,LOW(2)
                 ; 0001 0067     /* 7-seg 4 */
                 ; 0001 0068     data = Uint_data_led4/1000;
                 _0x20017:
0002be d11c      	RCALL SUBOPT_0x21
0002bf d0e4      	RCALL SUBOPT_0x19
                 ; 0001 0069     byte1 = BCDLED[data];
                 ; 0001 006A     if(byte1 & bit_left) byte3 |= 0x01; //2
0002c0 f009      	BREQ _0x20018
0002c1 6031      	ORI  R19,LOW(1)
                 ; 0001 006B     data = Uint_data_led4/100%10;
                 _0x20018:
0002c2 d118      	RCALL SUBOPT_0x21
0002c3 d0eb      	RCALL SUBOPT_0x1A
                 ; 0001 006C     byte1 = BCDLED[data];
                 ; 0001 006D     byte1 |= 0x04;
0002c4 d107      	RCALL SUBOPT_0x1E
                 ; 0001 006E     if(byte1 & bit_left) byte2 |= 0x40;
0002c5 f009      	BREQ _0x20019
0002c6 6400      	ORI  R16,LOW(64)
                 ; 0001 006F     data = Uint_data_led4/10%10;
                 _0x20019:
0002c7 d113      	RCALL SUBOPT_0x21
0002c8 d0f6      	RCALL SUBOPT_0x1C
0002c9 d0f8      	RCALL SUBOPT_0x1D
                 ; 0001 0070     byte1 = BCDLED[data];
                 ; 0001 0071     // byte1 |= 0x80;
                 ; 0001 0072     if(byte1 & bit_left) byte2 |= 0x80; //7
0002ca d0f1      	RCALL SUBOPT_0x1B
0002cb f009      	BREQ _0x2001A
0002cc 6800      	ORI  R16,LOW(128)
                 ; 0001 0073     data = Uint_data_led4%10;
                 _0x2001A:
0002cd d10d      	RCALL SUBOPT_0x21
0002ce d0ff      	RCALL SUBOPT_0x1F
                 ; 0001 0074     byte1 = BCDLED[data];
                 ; 0001 0075     if(byte1 & bit_left) byte2 |= 0x02;
0002cf f009      	BREQ _0x2001B
0002d0 6002      	ORI  R16,LOW(2)
                 ; 0001 0076     bit_left = 0xff- bit_left;
                 _0x2001B:
0002d1 efef      	LDI  R30,LOW(255)
0002d2 1be5      	SUB  R30,R21
0002d3 2f5e      	MOV  R21,R30
                 ; 0001 0077     SEND_DATA_LED(3,byte3,byte2,bit_left);
0002d4 e0e3      	LDI  R30,LOW(3)
0002d5 93ea      	ST   -Y,R30
0002d6 933a      	ST   -Y,R19
0002d7 930a      	ST   -Y,R16
0002d8 2fa5      	MOV  R26,R21
0002d9 df6c      	RCALL _SEND_DATA_LED
                 ; 0001 0078 }
0002da d26c      	RCALL __LOADLOCR6
0002db 9626      	ADIW R28,6
0002dc 9508      	RET
                 ; .FEND
                 ;
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void    SPI_SENDBYTE(unsigned char  data,unsigned char action)
                 ; 0002 0005 {
                 
                 	.CSEG
                 _SPI_SENDBYTE:
                 ; .FSTART _SPI_SENDBYTE
                 ; 0002 0006     unsigned char   i;
                 ; 0002 0007     for(i=0;i<8;i++)
0002dd 93aa      	ST   -Y,R26
0002de 931a      	ST   -Y,R17
                 ;	data -> Y+2
                 ;	action -> Y+1
                 ;	i -> R17
0002df e010      	LDI  R17,LOW(0)
                 _0x40004:
0002e0 3018      	CPI  R17,8
0002e1 f470      	BRSH _0x40005
                 ; 0002 0008     {
                 ; 0002 0009         if((data & 0x80) == 0x80)    DO_SPI_MOSI_HIGHT;
0002e2 81ea      	LDD  R30,Y+2
0002e3 78e0      	ANDI R30,LOW(0x80)
0002e4 38e0      	CPI  R30,LOW(0x80)
0002e5 f411      	BRNE _0x40006
0002e6 9a2b      	SBI  0x5,3
                 ; 0002 000A         else    DO_SPI_MOSI_LOW;
0002e7 c001      	RJMP _0x40009
                 _0x40006:
0002e8 982b      	CBI  0x5,3
                 ; 0002 000B         data <<= 1;
                 _0x40009:
0002e9 81ea      	LDD  R30,Y+2
0002ea 0fee      	LSL  R30
0002eb 83ea      	STD  Y+2,R30
                 ; 0002 000C         DO_SPI_SCK_HIGHT;
0002ec 9a2d      	SBI  0x5,5
                 ; 0002 000D         DO_SPI_SCK_LOW;
0002ed 982d      	CBI  0x5,5
                 ; 0002 000E     }
0002ee 5f1f      	SUBI R17,-1
0002ef cff0      	RJMP _0x40004
                 _0x40005:
                 ; 0002 000F     if(action)
0002f0 81e9      	LDD  R30,Y+1
0002f1 30e0      	CPI  R30,0
0002f2 f011      	BREQ _0x40010
                 ; 0002 0010     {
                 ; 0002 0011         DO_SPI_LATCH_HIGHT;
0002f3 9a5a      	SBI  0xB,2
                 ; 0002 0012         DO_SPI_LATCH_LOW;
0002f4 985a      	CBI  0xB,2
                 ; 0002 0013     }
                 ; 0002 0014 }
                 _0x40010:
0002f5 8118      	LDD  R17,Y+0
0002f6 9623      	ADIW R28,3
0002f7 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Uint_data_led1:
000200           	.BYTE 0x2
                 _Uint_data_led2:
000202           	.BYTE 0x2
                 _Uint_data_led3:
000204           	.BYTE 0x2
                 _Uint_data_led4:
000206           	.BYTE 0x2
                 _Uint_U_Positive_Buff:
000208           	.BYTE 0x3C
                 _Uint_U_Negative_Buff:
000244           	.BYTE 0x3C
                 _Uint_I_Positive_Buff:
000280           	.BYTE 0x3C
                 _Uint_I_Negative_Buff:
0002bc           	.BYTE 0x3C
                 _Uint_Timer_Display:
0002f8           	.BYTE 0x2
                 _Uc_Select_led:
0002fa           	.BYTE 0x1
                 _BCDLED:
0002fb           	.BYTE 0xB
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0002f8 93e0 0085 	STS  133,R30
0002fa e8e0      	LDI  R30,LOW(128)
0002fb 93e0 0084 	STS  132,R30
0002fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x1:
0002fe 91a0 02f8 	LDS  R26,_Uint_Timer_Display
000300 91b0 02f9 	LDS  R27,_Uint_Timer_Display+1
000302 3ca8      	CPI  R26,LOW(0xC8)
000303 e0e0      	LDI  R30,HIGH(0xC8)
000304 07be      	CPC  R27,R30
000305 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000306 ebac      	LDI  R26,LOW(_Uint_I_Negative_Buff)
000307 e0b2      	LDI  R27,HIGH(_Uint_I_Negative_Buff)
000308 e0f0      	LDI  R31,0
000309 0fee      	LSL  R30
00030a 1fff      	ROL  R31
00030b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
00030c 0fea      	ADD  R30,R26
00030d 1ffb      	ADC  R31,R27
00030e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
00030f 93ed      	ST   X+,R30
000310 93fc      	ST   X,R31
000311 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:93 WORDS
                 SUBOPT_0x5:
000312 2fe3      	MOV  R30,R19
000313 e0f0      	LDI  R31,0
000314 01de      	MOVW R26,R28
000315 9616      	ADIW R26,6
000316 0fee      	LSL  R30
000317 1fff      	ROL  R31
000318 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
000319 dff2      	RCALL SUBOPT_0x3
00031a 010f      	MOVW R0,R30
00031b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 27 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x7:
00031c 0fae      	ADD  R26,R30
00031d 1fbf      	ADC  R27,R31
00031e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x8:
00031f d21c      	RCALL __GETW1P
000320 01d0      	MOVW R26,R0
000321 cfed      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:34 WORDS
                 SUBOPT_0x9:
000322 dff9      	RCALL SUBOPT_0x7
000323 900d      	LD   R0,X+
000324 901c      	LD   R1,X
000325 2fe2      	MOV  R30,R18
000326 e0f0      	LDI  R31,0
000327 01de      	MOVW R26,R28
000328 9616      	ADIW R26,6
000329 0fee      	LSL  R30
00032a 1fff      	ROL  R31
00032b dff0      	RCALL SUBOPT_0x7
00032c d20f      	RCALL __GETW1P
00032d 15e0      	CP   R30,R0
00032e 05f1      	CPC  R31,R1
00032f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
000330 dfeb      	RCALL SUBOPT_0x7
000331 914d      	LD   R20,X+
000332 915c      	LD   R21,X
000333 cfde      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0xB:
000334 2fe2      	MOV  R30,R18
000335 e0f0      	LDI  R31,0
000336 01de      	MOVW R26,R28
000337 9616      	ADIW R26,6
000338 0fee      	LSL  R30
000339 1fff      	ROL  R31
00033a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
00033b dfe0      	RCALL SUBOPT_0x7
00033c cfe2      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
00033d dfce      	RCALL SUBOPT_0x3
00033e 8340      	ST   Z,R20
00033f 8351      	STD  Z+1,R21
000340 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xE:
000341 e0e0      	LDI  R30,LOW(0)
                +
000342 01de     +MOVW R26 , R28
000343 5bae     +SUBI R26 , LOW ( - 66 )
000344 4fbf     +SBCI R27 , HIGH ( - 66 )
000345 93ed     +ST X + , R30
000346 93ed     +ST X + , R30
000347 93ed     +ST X + , R30
000348 93ec     +ST X , R30
                 	__CLRD1SX 66
000349 e03a      	LDI  R19,LOW(10)
00034a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:55 WORDS
                 SUBOPT_0xF:
00034b dfd0      	RCALL SUBOPT_0x7
00034c d1ef      	RCALL __GETW1P
                +
00034d 01de     +MOVW R26 , R28
00034e 5bae     +SUBI R26 , LOW ( - 66 )
00034f 4fbf     +SBCI R27 , HIGH ( - 66 )
000350 900d     +LD R0 , X +
000351 901d     +LD R1 , X +
000352 918d     +LD R24 , X +
000353 919c     +LD R25 , X
000354 01d0     +MOVW R26 , R0
                 	__GETD2SX 66
000355 2766      	CLR  R22
000356 2777      	CLR  R23
000357 d1b9      	RCALL __ADDD12
                +
000358 01de     +MOVW R26 , R28
000359 5bae     +SUBI R26 , LOW ( - 66 )
00035a 4fbf     +SBCI R27 , HIGH ( - 66 )
00035b 93ed     +ST X + , R30
00035c 93fd     +ST X + , R31
00035d 936d     +ST X + , R22
00035e 937c     +ST X , R23
                 	__PUTD1SX 66
00035f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:61 WORDS
                 SUBOPT_0x10:
                +
000360 01fe     +MOVW R30 , R28
000361 5bee     +SUBI R30 , LOW ( - 66 )
000362 4fff     +SBCI R31 , HIGH ( - 66 )
000363 9001     +LD R0 , Z +
000364 9011     +LD R1 , Z +
000365 9161     +LD R22 , Z +
000366 8170     +LD R23 , Z
000367 01f0     +MOVW R30 , R0
                 	__GETD1SX 66
000368 d0e5      	RCALL __CDF1U
                +
000369 e0a0     +LDI R26 , LOW ( 0x43B90000 )
00036a e0b0     +LDI R27 , HIGH ( 0x43B90000 )
00036b eb89     +LDI R24 , BYTE3 ( 0x43B90000 )
00036c e493     +LDI R25 , BYTE4 ( 0x43B90000 )
                 	__GETD2N 0x43B90000
00036d d110      	RCALL __MULF12
00036e 01df      	MOVW R26,R30
00036f 01cb      	MOVW R24,R22
                +
000370 e0e0     +LDI R30 , LOW ( 0x46200000 )
000371 e0f0     +LDI R31 , HIGH ( 0x46200000 )
000372 e260     +LDI R22 , BYTE3 ( 0x46200000 )
000373 e476     +LDI R23 , BYTE4 ( 0x46200000 )
                 	__GETD1N 0x46200000
000374 d157      	RCALL __DIVF21
000375 d0a1      	RCALL __CFD1U
000376 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x11:
000377 91a0 0206 	LDS  R26,_Uint_data_led4
000379 91b0 0207 	LDS  R27,_Uint_data_led4+1
00037b 3fa5      	CPI  R26,LOW(0x1F5)
00037c e0e1      	LDI  R30,HIGH(0x1F5)
00037d 07be      	CPC  R27,R30
00037e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x12:
00037f e8a0      	LDI  R26,LOW(_Uint_I_Positive_Buff)
000380 e0b2      	LDI  R27,HIGH(_Uint_I_Positive_Buff)
000381 e0f0      	LDI  R31,0
000382 0fee      	LSL  R30
000383 1fff      	ROL  R31
000384 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
000385 e4a4      	LDI  R26,LOW(_Uint_U_Negative_Buff)
000386 e0b2      	LDI  R27,HIGH(_Uint_U_Negative_Buff)
000387 e0f0      	LDI  R31,0
000388 0fee      	LSL  R30
000389 1fff      	ROL  R31
00038a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x14:
00038b 91a0 0200 	LDS  R26,_Uint_data_led1
00038d 91b0 0201 	LDS  R27,_Uint_data_led1+1
00038f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x15:
000390 e0a8      	LDI  R26,LOW(_Uint_U_Positive_Buff)
000391 e0b2      	LDI  R27,HIGH(_Uint_U_Positive_Buff)
000392 e0f0      	LDI  R31,0
000393 0fee      	LSL  R30
000394 1fff      	ROL  R31
000395 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x16:
000396 91a0 0204 	LDS  R26,_Uint_data_led3
000398 91b0 0205 	LDS  R27,_Uint_data_led3+1
00039a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
00039b e0e0      	LDI  R30,LOW(0)
00039c 93e0 007b 	STS  123,R30
00039e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x18:
00039f 2fe1      	MOV  R30,R17
0003a0 e0f0      	LDI  R31,0
0003a1 01de      	MOVW R26,R28
0003a2 9611      	ADIW R26,1
0003a3 cf78      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0x19:
0003a4 eee8      	LDI  R30,LOW(1000)
0003a5 e0f3      	LDI  R31,HIGH(1000)
0003a6 d17f      	RCALL __DIVW21U
0003a7 2f2e      	MOV  R18,R30
0003a8 e0f0      	LDI  R31,0
0003a9 50e5      	SUBI R30,LOW(-_BCDLED)
0003aa 4ffd      	SBCI R31,HIGH(-_BCDLED)
0003ab 8110      	LD   R17,Z
0003ac 2fe5      	MOV  R30,R21
0003ad 23e1      	AND  R30,R17
0003ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:34 WORDS
                 SUBOPT_0x1A:
0003af e6e4      	LDI  R30,LOW(100)
0003b0 e0f0      	LDI  R31,HIGH(100)
0003b1 d174      	RCALL __DIVW21U
0003b2 01df      	MOVW R26,R30
0003b3 e0ea      	LDI  R30,LOW(10)
0003b4 e0f0      	LDI  R31,HIGH(10)
0003b5 d183      	RCALL __MODW21U
0003b6 2f2e      	MOV  R18,R30
0003b7 e0f0      	LDI  R31,0
0003b8 50e5      	SUBI R30,LOW(-_BCDLED)
0003b9 4ffd      	SBCI R31,HIGH(-_BCDLED)
0003ba 8110      	LD   R17,Z
0003bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
0003bc 2fe5      	MOV  R30,R21
0003bd 23e1      	AND  R30,R17
0003be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1C:
0003bf e0ea      	LDI  R30,LOW(10)
0003c0 e0f0      	LDI  R31,HIGH(10)
0003c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x1D:
0003c2 d163      	RCALL __DIVW21U
0003c3 01df      	MOVW R26,R30
0003c4 dffa      	RCALL SUBOPT_0x1C
0003c5 d173      	RCALL __MODW21U
0003c6 2f2e      	MOV  R18,R30
0003c7 e0f0      	LDI  R31,0
0003c8 50e5      	SUBI R30,LOW(-_BCDLED)
0003c9 4ffd      	SBCI R31,HIGH(-_BCDLED)
0003ca 8110      	LD   R17,Z
0003cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
0003cc 6014      	ORI  R17,LOW(4)
0003cd cfee      	RJMP SUBOPT_0x1B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x1F:
0003ce dff0      	RCALL SUBOPT_0x1C
0003cf d169      	RCALL __MODW21U
0003d0 2f2e      	MOV  R18,R30
0003d1 e0f0      	LDI  R31,0
0003d2 50e5      	SUBI R30,LOW(-_BCDLED)
0003d3 4ffd      	SBCI R31,HIGH(-_BCDLED)
0003d4 8110      	LD   R17,Z
0003d5 cfe6      	RJMP SUBOPT_0x1B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x20:
0003d6 91a0 0202 	LDS  R26,_Uint_data_led2
0003d8 91b0 0203 	LDS  R27,_Uint_data_led2+1
0003da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x21:
0003db 91a0 0206 	LDS  R26,_Uint_data_led4
0003dd 91b0 0207 	LDS  R27,_Uint_data_led4+1
0003df 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003e0 9610      	adiw r26,0
0003e1 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003e2 ed80     +LDI R24 , LOW ( 0x7D0 )
0003e3 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003e4 9701     +SBIW R24 , 1
0003e5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003e6 95a8      	wdr
0003e7 9711      	sbiw r26,1
0003e8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003e9 9508      	ret
                 
                 __ROUND_REPACK:
0003ea 2355      	TST  R21
0003eb f442      	BRPL __REPACK
0003ec 3850      	CPI  R21,0x80
0003ed f411      	BRNE __ROUND_REPACK0
0003ee ffe0      	SBRS R30,0
0003ef c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0003f0 9631      	ADIW R30,1
0003f1 1f69      	ADC  R22,R25
0003f2 1f79      	ADC  R23,R25
0003f3 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0003f4 e850      	LDI  R21,0x80
0003f5 2757      	EOR  R21,R23
0003f6 f411      	BRNE __REPACK0
0003f7 935f      	PUSH R21
0003f8 c073      	RJMP __ZERORES
                 __REPACK0:
0003f9 3f5f      	CPI  R21,0xFF
0003fa f031      	BREQ __REPACK1
0003fb 0f66      	LSL  R22
0003fc 0c00      	LSL  R0
0003fd 9557      	ROR  R21
0003fe 9567      	ROR  R22
0003ff 2f75      	MOV  R23,R21
000400 9508      	RET
                 __REPACK1:
000401 935f      	PUSH R21
000402 2000      	TST  R0
000403 f00a      	BRMI __REPACK2
000404 c073      	RJMP __MAXRES
                 __REPACK2:
000405 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000406 e850      	LDI  R21,0x80
000407 2e19      	MOV  R1,R25
000408 2215      	AND  R1,R21
000409 0f88      	LSL  R24
00040a 1f99      	ROL  R25
00040b 2795      	EOR  R25,R21
00040c 0f55      	LSL  R21
00040d 9587      	ROR  R24
                 
                 __UNPACK1:
00040e e850      	LDI  R21,0x80
00040f 2e07      	MOV  R0,R23
000410 2205      	AND  R0,R21
000411 0f66      	LSL  R22
000412 1f77      	ROL  R23
000413 2775      	EOR  R23,R21
000414 0f55      	LSL  R21
000415 9567      	ROR  R22
000416 9508      	RET
                 
                 __CFD1U:
000417 9468      	SET
000418 c001      	RJMP __CFD1U0
                 __CFD1:
000419 94e8      	CLT
                 __CFD1U0:
00041a 935f      	PUSH R21
00041b dff2      	RCALL __UNPACK1
00041c 3870      	CPI  R23,0x80
00041d f018      	BRLO __CFD10
00041e 3f7f      	CPI  R23,0xFF
00041f f408      	BRCC __CFD10
000420 c04b      	RJMP __ZERORES
                 __CFD10:
000421 e156      	LDI  R21,22
000422 1b57      	SUB  R21,R23
000423 f4aa      	BRPL __CFD11
000424 9551      	NEG  R21
000425 3058      	CPI  R21,8
000426 f40e      	BRTC __CFD19
000427 3059      	CPI  R21,9
                 __CFD19:
000428 f030      	BRLO __CFD17
000429 efef      	SER  R30
00042a efff      	SER  R31
00042b ef6f      	SER  R22
00042c e77f      	LDI  R23,0x7F
00042d f977      	BLD  R23,7
00042e c01a      	RJMP __CFD15
                 __CFD17:
00042f 2777      	CLR  R23
000430 2355      	TST  R21
000431 f0b9      	BREQ __CFD15
                 __CFD18:
000432 0fee      	LSL  R30
000433 1fff      	ROL  R31
000434 1f66      	ROL  R22
000435 1f77      	ROL  R23
000436 955a      	DEC  R21
000437 f7d1      	BRNE __CFD18
000438 c010      	RJMP __CFD15
                 __CFD11:
000439 2777      	CLR  R23
                 __CFD12:
00043a 3058      	CPI  R21,8
00043b f028      	BRLO __CFD13
00043c 2fef      	MOV  R30,R31
00043d 2ff6      	MOV  R31,R22
00043e 2f67      	MOV  R22,R23
00043f 5058      	SUBI R21,8
000440 cff9      	RJMP __CFD12
                 __CFD13:
000441 2355      	TST  R21
000442 f031      	BREQ __CFD15
                 __CFD14:
000443 9576      	LSR  R23
000444 9567      	ROR  R22
000445 95f7      	ROR  R31
000446 95e7      	ROR  R30
000447 955a      	DEC  R21
000448 f7d1      	BRNE __CFD14
                 __CFD15:
000449 2000      	TST  R0
00044a f40a      	BRPL __CFD16
00044b d0ca      	RCALL __ANEGD1
                 __CFD16:
00044c 915f      	POP  R21
00044d 9508      	RET
                 
                 __CDF1U:
00044e 9468      	SET
00044f c001      	RJMP __CDF1U0
                 __CDF1:
000450 94e8      	CLT
                 __CDF1U0:
000451 9730      	SBIW R30,0
000452 4060      	SBCI R22,0
000453 4070      	SBCI R23,0
000454 f0b1      	BREQ __CDF10
000455 2400      	CLR  R0
000456 f026      	BRTS __CDF11
000457 2377      	TST  R23
000458 f412      	BRPL __CDF11
000459 9400      	COM  R0
00045a d0bb      	RCALL __ANEGD1
                 __CDF11:
00045b 2e17      	MOV  R1,R23
00045c e17e      	LDI  R23,30
00045d 2011      	TST  R1
                 __CDF12:
00045e f032      	BRMI __CDF13
00045f 957a      	DEC  R23
000460 0fee      	LSL  R30
000461 1fff      	ROL  R31
000462 1f66      	ROL  R22
000463 1c11      	ROL  R1
000464 cff9      	RJMP __CDF12
                 __CDF13:
000465 2fef      	MOV  R30,R31
000466 2ff6      	MOV  R31,R22
000467 2d61      	MOV  R22,R1
000468 935f      	PUSH R21
000469 df8a      	RCALL __REPACK
00046a 915f      	POP  R21
                 __CDF10:
00046b 9508      	RET
                 
                 __ZERORES:
00046c 27ee      	CLR  R30
00046d 27ff      	CLR  R31
00046e 2766      	CLR  R22
00046f 2777      	CLR  R23
000470 915f      	POP  R21
000471 9508      	RET
                 
                 __MINRES:
000472 efef      	SER  R30
000473 efff      	SER  R31
000474 e76f      	LDI  R22,0x7F
000475 ef7f      	SER  R23
000476 915f      	POP  R21
000477 9508      	RET
                 
                 __MAXRES:
000478 efef      	SER  R30
000479 efff      	SER  R31
00047a e76f      	LDI  R22,0x7F
00047b e77f      	LDI  R23,0x7F
00047c 915f      	POP  R21
00047d 9508      	RET
                 
                 __MULF12:
00047e 935f      	PUSH R21
00047f df86      	RCALL __UNPACK
000480 3870      	CPI  R23,0x80
000481 f351      	BREQ __ZERORES
000482 3890      	CPI  R25,0x80
000483 f341      	BREQ __ZERORES
000484 2401      	EOR  R0,R1
000485 9408      	SEC
000486 1f79      	ADC  R23,R25
000487 f423      	BRVC __MULF124
000488 f31c      	BRLT __ZERORES
                 __MULF125:
000489 2000      	TST  R0
00048a f33a      	BRMI __MINRES
00048b cfec      	RJMP __MAXRES
                 __MULF124:
00048c 920f      	PUSH R0
00048d 931f      	PUSH R17
00048e 932f      	PUSH R18
00048f 933f      	PUSH R19
000490 934f      	PUSH R20
000491 2711      	CLR  R17
000492 2722      	CLR  R18
000493 2799      	CLR  R25
000494 9f68      	MUL  R22,R24
000495 01a0      	MOVW R20,R0
000496 9f8f      	MUL  R24,R31
000497 2d30      	MOV  R19,R0
000498 0d41      	ADD  R20,R1
000499 1f59      	ADC  R21,R25
00049a 9f6b      	MUL  R22,R27
00049b 0d30      	ADD  R19,R0
00049c 1d41      	ADC  R20,R1
00049d 1f59      	ADC  R21,R25
00049e 9f8e      	MUL  R24,R30
00049f d027      	RCALL __MULF126
0004a0 9fbf      	MUL  R27,R31
0004a1 d025      	RCALL __MULF126
0004a2 9f6a      	MUL  R22,R26
0004a3 d023      	RCALL __MULF126
0004a4 9fbe      	MUL  R27,R30
0004a5 d01d      	RCALL __MULF127
0004a6 9faf      	MUL  R26,R31
0004a7 d01b      	RCALL __MULF127
0004a8 9fae      	MUL  R26,R30
0004a9 0d11      	ADD  R17,R1
0004aa 1f29      	ADC  R18,R25
0004ab 1f39      	ADC  R19,R25
0004ac 1f49      	ADC  R20,R25
0004ad 1f59      	ADC  R21,R25
0004ae 2fe3      	MOV  R30,R19
0004af 2ff4      	MOV  R31,R20
0004b0 2f65      	MOV  R22,R21
0004b1 2f52      	MOV  R21,R18
0004b2 914f      	POP  R20
0004b3 913f      	POP  R19
0004b4 912f      	POP  R18
0004b5 911f      	POP  R17
0004b6 900f      	POP  R0
0004b7 2366      	TST  R22
0004b8 f02a      	BRMI __MULF122
0004b9 0f55      	LSL  R21
0004ba 1fee      	ROL  R30
0004bb 1fff      	ROL  R31
0004bc 1f66      	ROL  R22
0004bd c002      	RJMP __MULF123
                 __MULF122:
0004be 9573      	INC  R23
0004bf f24b      	BRVS __MULF125
                 __MULF123:
0004c0 df29      	RCALL __ROUND_REPACK
0004c1 915f      	POP  R21
0004c2 9508      	RET
                 
                 __MULF127:
0004c3 0d10      	ADD  R17,R0
0004c4 1d21      	ADC  R18,R1
0004c5 1f39      	ADC  R19,R25
0004c6 c002      	RJMP __MULF128
                 __MULF126:
0004c7 0d20      	ADD  R18,R0
0004c8 1d31      	ADC  R19,R1
                 __MULF128:
0004c9 1f49      	ADC  R20,R25
0004ca 1f59      	ADC  R21,R25
0004cb 9508      	RET
                 
                 __DIVF21:
0004cc 935f      	PUSH R21
0004cd df38      	RCALL __UNPACK
0004ce 3870      	CPI  R23,0x80
0004cf f421      	BRNE __DIVF210
0004d0 2011      	TST  R1
                 __DIVF211:
0004d1 f40a      	BRPL __DIVF219
0004d2 cf9f      	RJMP __MINRES
                 __DIVF219:
0004d3 cfa4      	RJMP __MAXRES
                 __DIVF210:
0004d4 3890      	CPI  R25,0x80
0004d5 f409      	BRNE __DIVF218
                 __DIVF217:
0004d6 cf95      	RJMP __ZERORES
                 __DIVF218:
0004d7 2401      	EOR  R0,R1
0004d8 9408      	SEC
0004d9 0b97      	SBC  R25,R23
0004da f41b      	BRVC __DIVF216
0004db f3d4      	BRLT __DIVF217
0004dc 2000      	TST  R0
0004dd cff3      	RJMP __DIVF211
                 __DIVF216:
0004de 2f79      	MOV  R23,R25
0004df 931f      	PUSH R17
0004e0 932f      	PUSH R18
0004e1 933f      	PUSH R19
0004e2 934f      	PUSH R20
0004e3 2411      	CLR  R1
0004e4 2711      	CLR  R17
0004e5 2722      	CLR  R18
0004e6 2733      	CLR  R19
0004e7 2744      	CLR  R20
0004e8 2755      	CLR  R21
0004e9 e290      	LDI  R25,32
                 __DIVF212:
0004ea 17ae      	CP   R26,R30
0004eb 07bf      	CPC  R27,R31
0004ec 0786      	CPC  R24,R22
0004ed 0741      	CPC  R20,R17
0004ee f030      	BRLO __DIVF213
0004ef 1bae      	SUB  R26,R30
0004f0 0bbf      	SBC  R27,R31
0004f1 0b86      	SBC  R24,R22
0004f2 0b41      	SBC  R20,R17
0004f3 9408      	SEC
0004f4 c001      	RJMP __DIVF214
                 __DIVF213:
0004f5 9488      	CLC
                 __DIVF214:
0004f6 1f55      	ROL  R21
0004f7 1f22      	ROL  R18
0004f8 1f33      	ROL  R19
0004f9 1c11      	ROL  R1
0004fa 1faa      	ROL  R26
0004fb 1fbb      	ROL  R27
0004fc 1f88      	ROL  R24
0004fd 1f44      	ROL  R20
0004fe 959a      	DEC  R25
0004ff f751      	BRNE __DIVF212
000500 01f9      	MOVW R30,R18
000501 2d61      	MOV  R22,R1
000502 914f      	POP  R20
000503 913f      	POP  R19
000504 912f      	POP  R18
000505 911f      	POP  R17
000506 2366      	TST  R22
000507 f032      	BRMI __DIVF215
000508 0f55      	LSL  R21
000509 1fee      	ROL  R30
00050a 1fff      	ROL  R31
00050b 1f66      	ROL  R22
00050c 957a      	DEC  R23
00050d f243      	BRVS __DIVF217
                 __DIVF215:
00050e dedb      	RCALL __ROUND_REPACK
00050f 915f      	POP  R21
000510 9508      	RET
                 
                 __ADDD12:
000511 0fea      	ADD  R30,R26
000512 1ffb      	ADC  R31,R27
000513 1f68      	ADC  R22,R24
000514 1f79      	ADC  R23,R25
000515 9508      	RET
                 
                 __ANEGD1:
000516 95f0      	COM  R31
000517 9560      	COM  R22
000518 9570      	COM  R23
000519 95e1      	NEG  R30
00051a 4fff      	SBCI R31,-1
00051b 4f6f      	SBCI R22,-1
00051c 4f7f      	SBCI R23,-1
00051d 9508      	RET
                 
                 __LSLB12:
00051e 23ee      	TST  R30
00051f 2e0e      	MOV  R0,R30
000520 2fea      	MOV  R30,R26
000521 f019      	BREQ __LSLB12R
                 __LSLB12L:
000522 0fee      	LSL  R30
000523 940a      	DEC  R0
000524 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000525 9508      	RET
                 
                 __DIVW21U:
000526 2400      	CLR  R0
000527 2411      	CLR  R1
000528 e190      	LDI  R25,16
                 __DIVW21U1:
000529 0faa      	LSL  R26
00052a 1fbb      	ROL  R27
00052b 1c00      	ROL  R0
00052c 1c11      	ROL  R1
00052d 1a0e      	SUB  R0,R30
00052e 0a1f      	SBC  R1,R31
00052f f418      	BRCC __DIVW21U2
000530 0e0e      	ADD  R0,R30
000531 1e1f      	ADC  R1,R31
000532 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000533 60a1      	SBR  R26,1
                 __DIVW21U3:
000534 959a      	DEC  R25
000535 f799      	BRNE __DIVW21U1
000536 01fd      	MOVW R30,R26
000537 01d0      	MOVW R26,R0
000538 9508      	RET
                 
                 __MODW21U:
000539 dfec      	RCALL __DIVW21U
00053a 01fd      	MOVW R30,R26
00053b 9508      	RET
                 
                 __GETW1P:
00053c 91ed      	LD   R30,X+
00053d 91fc      	LD   R31,X
00053e 9711      	SBIW R26,1
00053f 9508      	RET
                 
                 __SAVELOCR6:
000540 935a      	ST   -Y,R21
                 __SAVELOCR5:
000541 934a      	ST   -Y,R20
                 __SAVELOCR4:
000542 933a      	ST   -Y,R19
                 __SAVELOCR3:
000543 932a      	ST   -Y,R18
                 __SAVELOCR2:
000544 931a      	ST   -Y,R17
000545 930a      	ST   -Y,R16
000546 9508      	RET
                 
                 __LOADLOCR6:
000547 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000548 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000549 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00054a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00054b 8119      	LDD  R17,Y+1
00054c 8108      	LD   R16,Y
00054d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega88P register use summary:
r0 :  39 r1 :  28 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   4 r7 :   4 
r8 :   4 r9 :   4 r10:   4 r11:   4 r12:   0 r13:   7 r14:   0 r15:   2 
r16:  12 r17:  34 r18:  32 r19:  66 r20:  18 r21:  62 r22:  40 r23:  40 
r24:  25 r25:  32 r26:  78 r27:  41 r28:  18 r29:   1 r30: 272 r31:  77 
x  :  30 y  :  60 z  :  17 
Registers used: 31 out of 35 (88.6%)

ATmega88P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :   9 
adiw  :  13 and   :   4 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  27 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   2 brmi  :   5 brne  :  16 brpl  :   5 brsh  :  31 brtc  :   1 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   0 cbi   :   9 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :  31 
cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 cp    :  12 
cpc   :   9 cpi   :  36 cpse  :   0 dec   :   9 des   :   0 eor   :   5 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :  10 ld    :  36 ldd   :  14 ldi   : 140 lds   :  19 lpm   :   7 
lsl   :  20 lsr   :   1 mov   :  54 movw  :  24 mul   :   9 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :  19 out   :  21 
pop   :  24 push  :  23 rcall : 193 ret   :  52 reti  :   1 rjmp  :  85 
rol   :  32 ror   :   7 sbc   :   5 sbci  :  13 sbi   :   8 sbic  :   3 
sbis  :   1 sbiw  :  11 sbr   :   1 sbrc  :   0 sbrs  :   1 sec   :   3 
seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   2 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  45 std   :   5 
sts   :  45 sub   :   4 subi  :  30 swap  :   0 tst   :  13 wdr   :   1 

Instructions used: 72 out of 114 (63.2%)

ATmega88P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a9c   2674     42   2716    8192  33.2%
[.dseg] 0x000100 0x000306      0    262    262    1024  25.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
