
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm Thu Nov 29 19:18:37 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1096): warning: Register r12 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega88P
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega88P
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_I_Positive_Over=R5
                 	.DEF _Uc_U_Positive_Over=R4
                 	.DEF _Uc_I_Negative_Over=R7
                 	.DEF _Uc_U_Negative_Over=R6
                 	.DEF _Uc_I_Positive_Under=R9
                 	.DEF _Uc_U_Positive_Under=R8
                 	.DEF _Uc_I_Negative_Under=R11
                 	.DEF _Uc_U_Negative_Under=R10
                 	.DEF _Uint_Timer_Display=R12
                 	.DEF _Uint_Timer_Display_msb=R13
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02e      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d c04f      	RJMP _timer1_ovf_isr
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
000015 cfea      	RJMP 0x00
000016 cfe9      	RJMP 0x00
000017 cfe8      	RJMP 0x00
000018 cfe7      	RJMP 0x00
000019 cfe6      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001a 0000
00001b 0000      	.DB  0x0,0x0,0x0,0x0
00001c 0000
00001d 0000      	.DB  0x0,0x0,0x0,0x0
00001e 0000      	.DB  0x0,0x0
                 
                 _0x20003:
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1143): warning: .cseg .db misalignment - padding zero byte
00001f 0001      	.DB  0x1
                 _0x20004:
000020 21f9
000021 6bea
000022 5b33
000023 29db      	.DB  0xF9,0x21,0xEA,0x6B,0x33,0x5B,0xDB,0x29
000024 7bfb      	.DB  0xFB,0x7B
                 
                 __GLOBAL_INI_TBL:
000025 000a      	.DW  0x0A
000026 0004      	.DW  0x04
000027 0034      	.DW  __REG_VARS*2
                 
000028 0001      	.DW  0x01
000029 0208      	.DW  _Uc_Select_led
00002a 003e      	.DW  _0x20003*2
                 
00002b 000a      	.DW  0x0A
00002c 0209      	.DW  _BCDLED
00002d 0040      	.DW  _0x20004*2
                 
                 _0xFFFFFFFF:
00002e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bff5      	OUT  MCUCR,R31
000034 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000035 e08d      	LDI  R24,(14-2)+1
000036 e0a2      	LDI  R26,2
000037 27bb      	CLR  R27
                 __CLEAR_REG:
000038 93ed      	ST   X+,R30
000039 958a      	DEC  R24
00003a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003d e0a0      	LDI  R26,LOW(__SRAM_START)
00003e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000042 e4ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000043 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000044 9185      	LPM  R24,Z+
000045 9195      	LPM  R25,Z+
000046 9700      	SBIW R24,0
000047 f061      	BREQ __GLOBAL_INI_END
000048 91a5      	LPM  R26,Z+
000049 91b5      	LPM  R27,Z+
00004a 9005      	LPM  R0,Z+
00004b 9015      	LPM  R1,Z+
00004c 01bf      	MOVW R22,R30
00004d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004e 9005      	LPM  R0,Z+
00004f 920d      	ST   X+,R0
000050 9701      	SBIW R24,1
000051 f7e1      	BRNE __GLOBAL_INI_LOOP
000052 01fb      	MOVW R30,R22
000053 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000054 e0e0      	LDI  R30,__GPIOR0_INIT
000055 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000056 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000057 bfed      	OUT  SPL,R30
000058 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000059 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005a e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005c c01e      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : DC_Power_Supply_Adj_Protect
                 ;Version :
                 ;Date    : 29/11/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega8A
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega88.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <scan_led.h>
                 ;#include <delay.h>
                 ;
                 ;#define ADC_I_POSITIVE  0
                 ;#define ADC_U_POSITIVE  1
                 ;#define ADC_I_NEGATIVE  2
                 ;#define ADC_U_NEGATIVE  3
                 ;
                 ;#define CONTROL_RELAY   PORTC.4
                 ;
                 ;#define PROTECT_ON   CONTROL_RELAY  = 1
                 ;#define PROTECT_OFF   CONTROL_RELAY  = 0
                 ;
                 ;#define ADC_I_POSITIVE_SET  100
                 ;#define ADC_U_POSITIVE_SET  100
                 ;#define ADC_I_NEGATIVE_SET  100
                 ;#define ADC_U_NEGATIVE_SET  100
                 ;
                 ;#define ADC_I_POSITIVE_RATIO  100
                 ;#define ADC_U_POSITIVE_RATIO  100
                 ;#define ADC_I_NEGATIVE_RATIO  100
                 ;#define ADC_U_NEGATIVE_RATIO  100
                 ;
                 ;unsigned char   Uc_I_Positive_Over = 0;
                 ;unsigned char   Uc_U_Positive_Over = 0;
                 ;unsigned char   Uc_I_Negative_Over = 0;
                 ;unsigned char   Uc_U_Negative_Over = 0;
                 ;
                 ;unsigned char   Uc_I_Positive_Under = 0;
                 ;unsigned char   Uc_U_Positive_Under = 0;
                 ;unsigned char   Uc_I_Negative_Under = 0;
                 ;unsigned char   Uc_U_Negative_Under = 0;
                 ;
                 ;bit     Bit_I_Positive_Warning = 0;
                 ;bit     Bit_U_Positive_Warning = 0;
                 ;bit     Bit_I_Negative_Warning = 0;
                 ;bit     Bit_U_Negative_Warning = 0;
                 ;
                 ;unsigned int    Uint_Timer_Display = 0;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0045 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
00005d 920a      	ST   -Y,R0
00005e 921a      	ST   -Y,R1
00005f 92fa      	ST   -Y,R15
000060 936a      	ST   -Y,R22
000061 937a      	ST   -Y,R23
000062 938a      	ST   -Y,R24
000063 939a      	ST   -Y,R25
000064 93aa      	ST   -Y,R26
000065 93ba      	ST   -Y,R27
000066 93ea      	ST   -Y,R30
000067 93fa      	ST   -Y,R31
000068 b7ef      	IN   R30,SREG
000069 93ea      	ST   -Y,R30
                 ; 0000 0046     // Reinitialize Timer1 value
                 ; 0000 0047     TCNT1H=0x9380 >> 8;
00006a e9e3      	LDI  R30,LOW(147)
00006b d134      	RCALL SUBOPT_0x0
                 ; 0000 0048     TCNT1L=0x9380 & 0xff;
                 ; 0000 0049     // Place your code here
                 ; 0000 004A     SCAN_LED();
00006c d092      	RCALL _SCAN_LED
                 ; 0000 004B 
                 ; 0000 004C }
00006d 91e9      	LD   R30,Y+
00006e bfef      	OUT  SREG,R30
00006f 91f9      	LD   R31,Y+
000070 91e9      	LD   R30,Y+
000071 91b9      	LD   R27,Y+
000072 91a9      	LD   R26,Y+
000073 9199      	LD   R25,Y+
000074 9189      	LD   R24,Y+
000075 9179      	LD   R23,Y+
000076 9169      	LD   R22,Y+
000077 90f9      	LD   R15,Y+
000078 9019      	LD   R1,Y+
000079 9009      	LD   R0,Y+
00007a 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0053 {
                 ; 0000 0054     ADMUX=adc_input | ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
                 ; 0000 0055     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0056     delay_us(10);
                 ; 0000 0057     // Start the AD conversion
                 ; 0000 0058     ADCSRA|=(1<<ADSC);
                 ; 0000 0059     // Wait for the AD conversion to complete
                 ; 0000 005A     while ((ADCSRA & (1<<ADIF))==0);
                 ; 0000 005B     ADCSRA|=(1<<ADIF);
                 ; 0000 005C     return ADCW;
                 ; 0000 005D }
                 ;
                 ;void    PROTECT(void)
                 ; 0000 0060 {
                 ; 0000 0061     unsigned int    Uint_ADC_Value;
                 ; 0000 0062 
                 ; 0000 0063     /* I Negative */
                 ; 0000 0064     Uint_ADC_Value = read_adc(ADC_I_NEGATIVE);
                 ;	Uint_ADC_Value -> R16,R17
                 ; 0000 0065     Uint_data_led2 = Uint_ADC_Value*ADC_I_NEGATIVE_RATIO/1024;
                 ; 0000 0066     if(Uint_ADC_Value > ADC_I_NEGATIVE_SET)
                 ; 0000 0067     {
                 ; 0000 0068         Uc_I_Negative_Over++;
                 ; 0000 0069         if(Uc_I_Negative_Over > 10)
                 ; 0000 006A         {
                 ; 0000 006B             Uc_I_Negative_Over = 11;
                 ; 0000 006C             Uc_I_Negative_Under = 0;
                 ; 0000 006D             Bit_I_Negative_Warning = 1;
                 ; 0000 006E         }
                 ; 0000 006F     }
                 ; 0000 0070     else
                 ; 0000 0071     {
                 ; 0000 0072         Uc_I_Negative_Under++;
                 ; 0000 0073         if(Uc_I_Negative_Under > 10)
                 ; 0000 0074         {
                 ; 0000 0075             Uc_I_Negative_Under = 11;
                 ; 0000 0076             Uc_I_Negative_Over = 0;
                 ; 0000 0077             Bit_I_Negative_Warning = 0;
                 ; 0000 0078         }
                 ; 0000 0079     }
                 ; 0000 007A     /* I Positive */
                 ; 0000 007B     Uint_ADC_Value = read_adc(ADC_I_POSITIVE);
                 ; 0000 007C     Uint_data_led4 = Uint_ADC_Value*ADC_I_POSITIVE_RATIO/1024;
                 ; 0000 007D     if(Uint_ADC_Value > ADC_I_POSITIVE_SET)
                 ; 0000 007E     {
                 ; 0000 007F         Uc_I_Positive_Over++;
                 ; 0000 0080         if(Uc_I_Positive_Over > 10)
                 ; 0000 0081         {
                 ; 0000 0082             Uc_I_Positive_Over = 11;
                 ; 0000 0083             Uc_I_Positive_Under = 0;
                 ; 0000 0084             Bit_I_Positive_Warning = 1;
                 ; 0000 0085         }
                 ; 0000 0086     }
                 ; 0000 0087     else
                 ; 0000 0088     {
                 ; 0000 0089         Uc_I_Positive_Under++;
                 ; 0000 008A         if(Uc_I_Positive_Under > 10)
                 ; 0000 008B         {
                 ; 0000 008C             Uc_I_Positive_Under = 11;
                 ; 0000 008D             Uc_I_Positive_Over = 0;
                 ; 0000 008E             Bit_I_Positive_Warning = 0;
                 ; 0000 008F         }
                 ; 0000 0090     }
                 ; 0000 0091     /* U Negative */
                 ; 0000 0092     Uint_ADC_Value = read_adc(ADC_U_NEGATIVE);
                 ; 0000 0093     Uint_data_led1 = Uint_ADC_Value*ADC_U_NEGATIVE_RATIO/1024;
                 ; 0000 0094     if(Uint_ADC_Value > ADC_U_NEGATIVE_SET)
                 ; 0000 0095     {
                 ; 0000 0096         Uc_U_Negative_Over++;
                 ; 0000 0097         if(Uc_U_Negative_Over > 10)
                 ; 0000 0098         {
                 ; 0000 0099             Uc_U_Negative_Over = 11;
                 ; 0000 009A             Uc_U_Negative_Under = 0;
                 ; 0000 009B             Bit_U_Negative_Warning = 1;
                 ; 0000 009C         }
                 ; 0000 009D     }
                 ; 0000 009E     else
                 ; 0000 009F     {
                 ; 0000 00A0         Uc_U_Negative_Under++;
                 ; 0000 00A1         if(Uc_U_Negative_Under > 10)
                 ; 0000 00A2         {
                 ; 0000 00A3             Uc_U_Negative_Under = 11;
                 ; 0000 00A4             Uc_U_Negative_Over = 0;
                 ; 0000 00A5             Bit_U_Negative_Warning = 0;
                 ; 0000 00A6         }
                 ; 0000 00A7     }
                 ; 0000 00A8     /* U Positive */
                 ; 0000 00A9     Uint_ADC_Value = read_adc(ADC_U_POSITIVE);
                 ; 0000 00AA     Uint_data_led3 = Uint_ADC_Value*ADC_U_POSITIVE_RATIO/1024;
                 ; 0000 00AB     if(Uint_ADC_Value > ADC_U_POSITIVE_SET)
                 ; 0000 00AC     {
                 ; 0000 00AD         Uc_U_Positive_Over++;
                 ; 0000 00AE         if(Uc_U_Positive_Over > 10)
                 ; 0000 00AF         {
                 ; 0000 00B0             Uc_U_Positive_Over = 11;
                 ; 0000 00B1             Uc_U_Positive_Under = 0;
                 ; 0000 00B2             Bit_U_Positive_Warning = 1;
                 ; 0000 00B3         }
                 ; 0000 00B4     }
                 ; 0000 00B5     else
                 ; 0000 00B6     {
                 ; 0000 00B7         Uc_U_Positive_Under++;
                 ; 0000 00B8         if(Uc_U_Positive_Under > 10)
                 ; 0000 00B9         {
                 ; 0000 00BA             Uc_U_Positive_Under = 11;
                 ; 0000 00BB             Uc_U_Positive_Over = 0;
                 ; 0000 00BC             Bit_U_Positive_Warning = 0;
                 ; 0000 00BD         }
                 ; 0000 00BE     }
                 ; 0000 00BF     if(Bit_I_Negative_Warning || Bit_I_Positive_Warning || Bit_U_Positive_Warning || Bit_U_Negative_Warning)
                 ; 0000 00C0     {
                 ; 0000 00C1         PROTECT_ON;
                 ; 0000 00C2     }
                 ; 0000 00C3     else
                 ; 0000 00C4     {
                 ; 0000 00C5         PROTECT_OFF;
                 ; 0000 00C6     }
                 ; 0000 00C7     delay_ms(10);
                 ; 0000 00C8 }
                 ;
                 ;void main(void)
                 ; 0000 00CB {
                 _main:
                 ; .FSTART _main
                 ; 0000 00CC     // Declare your local variables here
                 ; 0000 00CD 
                 ; 0000 00CE     // Crystal Oscillator division factor: 1
                 ; 0000 00CF     #pragma optsize-
                 ; 0000 00D0     CLKPR=(1<<CLKPCE);
00007b e8e0      	LDI  R30,LOW(128)
00007c 93e0 0061 	STS  97,R30
                 ; 0000 00D1     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
00007e e0e0      	LDI  R30,LOW(0)
00007f 93e0 0061 	STS  97,R30
                 ; 0000 00D2     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00D3     #pragma optsize+
                 ; 0000 00D4     #endif
                 ; 0000 00D5     // Input/Output Ports initialization
                 ; 0000 00D6     // Port B initialization
                 ; 0000 00D7     // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 00D8     DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000081 e2e8      	LDI  R30,LOW(40)
000082 b9e4      	OUT  0x4,R30
                 ; 0000 00D9     // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 00DA     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000083 e0e0      	LDI  R30,LOW(0)
000084 b9e5      	OUT  0x5,R30
                 ; 0000 00DB 
                 ; 0000 00DC     // Port C initialization
                 ; 0000 00DD     // Function: Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00DE     DDRC=(0<<DDC6) | (0<<DDC5) | (1<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000085 e1e0      	LDI  R30,LOW(16)
000086 b9e7      	OUT  0x7,R30
                 ; 0000 00DF     // State: Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00E0     PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000087 e0e0      	LDI  R30,LOW(0)
000088 b9e8      	OUT  0x8,R30
                 ; 0000 00E1 
                 ; 0000 00E2     // Port D initialization
                 ; 0000 00E3     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=In
                 ; 0000 00E4     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
000089 e0e4      	LDI  R30,LOW(4)
00008a b9ea      	OUT  0xA,R30
                 ; 0000 00E5     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0000 00E6     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00008b e0e0      	LDI  R30,LOW(0)
00008c b9eb      	OUT  0xB,R30
                 ; 0000 00E7 
                 ; 0000 00E8     // Timer/Counter 0 initialization
                 ; 0000 00E9     // Clock source: System Clock
                 ; 0000 00EA     // Clock value: Timer 0 Stopped
                 ; 0000 00EB     // Mode: Normal top=0xFF
                 ; 0000 00EC     // OC0A output: Disconnected
                 ; 0000 00ED     // OC0B output: Disconnected
                 ; 0000 00EE     TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
00008d bde4      	OUT  0x24,R30
                 ; 0000 00EF     TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00008e bde5      	OUT  0x25,R30
                 ; 0000 00F0     TCNT0=0x00;
00008f bde6      	OUT  0x26,R30
                 ; 0000 00F1     OCR0A=0x00;
000090 bde7      	OUT  0x27,R30
                 ; 0000 00F2     OCR0B=0x00;
000091 bde8      	OUT  0x28,R30
                 ; 0000 00F3 
                 ; 0000 00F4     // Timer/Counter 1 initialization
                 ; 0000 00F5     // Clock source: System Clock
                 ; 0000 00F6     // Clock value: 8000,000 kHz
                 ; 0000 00F7     // Mode: Normal top=0xFFFF
                 ; 0000 00F8     // OC1A output: Disconnected
                 ; 0000 00F9     // OC1B output: Disconnected
                 ; 0000 00FA     // Noise Canceler: Off
                 ; 0000 00FB     // Input Capture on Falling Edge
                 ; 0000 00FC     // Timer Period: 2 ms
                 ; 0000 00FD     // Timer1 Overflow Interrupt: On
                 ; 0000 00FE     // Input Capture Interrupt: Off
                 ; 0000 00FF     // Compare A Match Interrupt: Off
                 ; 0000 0100     // Compare B Match Interrupt: Off
                 ; 0000 0101     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000092 93e0 0080 	STS  128,R30
                 ; 0000 0102     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000094 e0e1      	LDI  R30,LOW(1)
000095 93e0 0081 	STS  129,R30
                 ; 0000 0103     TCNT1H=0xC1;
000097 ece1      	LDI  R30,LOW(193)
000098 d107      	RCALL SUBOPT_0x0
                 ; 0000 0104     TCNT1L=0x80;
                 ; 0000 0105     ICR1H=0x00;
000099 e0e0      	LDI  R30,LOW(0)
00009a 93e0 0087 	STS  135,R30
                 ; 0000 0106     ICR1L=0x00;
00009c 93e0 0086 	STS  134,R30
                 ; 0000 0107     OCR1AH=0x00;
00009e 93e0 0089 	STS  137,R30
                 ; 0000 0108     OCR1AL=0x00;
0000a0 93e0 0088 	STS  136,R30
                 ; 0000 0109     OCR1BH=0x00;
0000a2 93e0 008b 	STS  139,R30
                 ; 0000 010A     OCR1BL=0x00;
0000a4 93e0 008a 	STS  138,R30
                 ; 0000 010B 
                 ; 0000 010C     // Timer/Counter 2 initialization
                 ; 0000 010D     // Clock source: System Clock
                 ; 0000 010E     // Clock value: Timer2 Stopped
                 ; 0000 010F     // Mode: Normal top=0xFF
                 ; 0000 0110     // OC2A output: Disconnected
                 ; 0000 0111     // OC2B output: Disconnected
                 ; 0000 0112     ASSR=(0<<EXCLK) | (0<<AS2);
0000a6 93e0 00b6 	STS  182,R30
                 ; 0000 0113     TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
0000a8 93e0 00b0 	STS  176,R30
                 ; 0000 0114     TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000aa 93e0 00b1 	STS  177,R30
                 ; 0000 0115     TCNT2=0x00;
0000ac 93e0 00b2 	STS  178,R30
                 ; 0000 0116     OCR2A=0x00;
0000ae 93e0 00b3 	STS  179,R30
                 ; 0000 0117     OCR2B=0x00;
0000b0 93e0 00b4 	STS  180,R30
                 ; 0000 0118 
                 ; 0000 0119     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 011A     TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0000b2 93e0 006e 	STS  110,R30
                 ; 0000 011B 
                 ; 0000 011C     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 011D     TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
0000b4 e0e1      	LDI  R30,LOW(1)
0000b5 93e0 006f 	STS  111,R30
                 ; 0000 011E 
                 ; 0000 011F     // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 0120     TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 93e0 0070 	STS  112,R30
                 ; 0000 0121 
                 ; 0000 0122     // External Interrupt(s) initialization
                 ; 0000 0123     // INT0: Off
                 ; 0000 0124     // INT1: Off
                 ; 0000 0125     // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 0126     // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 0127     // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 0128     EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000ba 93e0 0069 	STS  105,R30
                 ; 0000 0129     EIMSK=(0<<INT1) | (0<<INT0);
0000bc bbed      	OUT  0x1D,R30
                 ; 0000 012A     PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
0000bd 93e0 0068 	STS  104,R30
                 ; 0000 012B 
                 ; 0000 012C     // USART initialization
                 ; 0000 012D     // USART disabled
                 ; 0000 012E     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0000bf 93e0 00c1 	STS  193,R30
                 ; 0000 012F 
                 ; 0000 0130     // Analog Comparator initialization
                 ; 0000 0131     // Analog Comparator: Off
                 ; 0000 0132     // The Analog Comparator's positive input is
                 ; 0000 0133     // connected to the AIN0 pin
                 ; 0000 0134     // The Analog Comparator's negative input is
                 ; 0000 0135     // connected to the AIN1 pin
                 ; 0000 0136     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000c1 e8e0      	LDI  R30,LOW(128)
0000c2 bfe0      	OUT  0x30,R30
                 ; 0000 0137     ADCSRB=(0<<ACME);
0000c3 d0e2      	RCALL SUBOPT_0x1
                 ; 0000 0138     // Digital input buffer on AIN0: On
                 ; 0000 0139     // Digital input buffer on AIN1: On
                 ; 0000 013A     DIDR1=(0<<AIN0D) | (0<<AIN1D);
0000c4 93e0 007f 	STS  127,R30
                 ; 0000 013B 
                 ; 0000 013C 
                 ; 0000 013D     // ADC initialization
                 ; 0000 013E     // ADC Clock frequency: 1000,000 kHz
                 ; 0000 013F     // ADC Voltage Reference: AREF pin
                 ; 0000 0140     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0141     // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0142     // ADC4: On, ADC5: On
                 ; 0000 0143     DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 93e0 007e 	STS  126,R30
                 ; 0000 0144     ADMUX=ADC_VREF_TYPE;
0000c9 93e0 007c 	STS  124,R30
                 ; 0000 0145     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000cb e8e3      	LDI  R30,LOW(131)
0000cc 93e0 007a 	STS  122,R30
                 ; 0000 0146     ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000ce d0d7      	RCALL SUBOPT_0x1
                 ; 0000 0147 
                 ; 0000 0148 
                 ; 0000 0149     // SPI initialization
                 ; 0000 014A     // SPI disabled
                 ; 0000 014B     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000cf bdec      	OUT  0x2C,R30
                 ; 0000 014C 
                 ; 0000 014D     // TWI initialization
                 ; 0000 014E     // TWI disabled
                 ; 0000 014F     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 93e0 00bc 	STS  188,R30
                 ; 0000 0150 
                 ; 0000 0151     // Global enable interrupts
                 ; 0000 0152     #asm("sei")
0000d3 9478      	sei
                 ; 0000 0153 
                 ; 0000 0154     while (1)
                 _0x2E:
                 ; 0000 0155     {
                 ; 0000 0156     // Place your code here
                 ; 0000 0157         //PROTECT();
                 ; 0000 0158     }
0000d4 cfff      	RJMP _0x2E
                 ; 0000 0159 }
                 _0x31:
0000d5 cfff      	RJMP _0x31
                 ; .FEND
                 ;#include "scan_led.h"
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;unsigned int    Uint_data_led1 = 0;
                 ;unsigned int    Uint_data_led2 = 0;
                 ;unsigned int    Uint_data_led3 = 0;
                 ;unsigned int    Uint_data_led4 = 0;
                 ;unsigned char   Uc_Select_led=1;
                 
                 	.DSEG
                 ;
                 ;unsigned char   BCDLED[11]={0xF9,0x21,0xEA,0x6B,0x33,0x5B,0xDB,0x29,0xFB,0x7B,0};
                 ;
                 ;/* Day du lieu quet led qua duong spi_software
                 ;Co thẻ day tu 1 den 3 byte du lieu.
                 ;Du lieu sau khi day ra day du moi tien hanh xuat du lieu
                 ;num_bytes : so byte duoc day ra
                 ;data_first : du lieu dau tien
                 ;data_second: du lieu thu 2
                 ;data_third ; du lieu thu 3
                 ;*/
                 ;void    SEND_DATA_LED(unsigned char num_bytes,unsigned char  byte_1,unsigned char  byte_2,unsigned char  byte_3)
                 ; 0001 0015 {
                 
                 	.CSEG
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0001 0016     unsigned char   i;
                 ; 0001 0017     unsigned char   data[6];
                 ; 0001 0018     for(i=0;i<6;i++)    data[i] = 0;
0000d6 93aa      	ST   -Y,R26
0000d7 9726      	SBIW R28,6
0000d8 931a      	ST   -Y,R17
                 ;	num_bytes -> Y+10
                 ;	byte_1 -> Y+9
                 ;	byte_2 -> Y+8
                 ;	byte_3 -> Y+7
                 ;	i -> R17
                 ;	data -> Y+1
0000d9 e010      	LDI  R17,LOW(0)
                 _0x20006:
0000da 3016      	CPI  R17,6
0000db f428      	BRSH _0x20007
0000dc d0cd      	RCALL SUBOPT_0x2
0000dd e0e0      	LDI  R30,LOW(0)
0000de 93ec      	ST   X,R30
0000df 5f1f      	SUBI R17,-1
0000e0 cff9      	RJMP _0x20006
                 _0x20007:
                 ; 0001 0019 data[0] = byte_1;
0000e1 85e9      	LDD  R30,Y+9
0000e2 83e9      	STD  Y+1,R30
                 ; 0001 001A     data[1] = byte_2;
0000e3 85e8      	LDD  R30,Y+8
0000e4 83ea      	STD  Y+2,R30
                 ; 0001 001B     data[2] = byte_3;
0000e5 81ef      	LDD  R30,Y+7
0000e6 83eb      	STD  Y+3,R30
                 ; 0001 001C 
                 ; 0001 001D     for(i=0;i<(num_bytes - 1);i++)    SPI_SENDBYTE(data[i],0);
0000e7 e010      	LDI  R17,LOW(0)
                 _0x20009:
0000e8 85ea      	LDD  R30,Y+10
0000e9 e0f0      	LDI  R31,0
0000ea 9731      	SBIW R30,1
0000eb 2fa1      	MOV  R26,R17
0000ec e0b0      	LDI  R27,0
0000ed 17ae      	CP   R26,R30
0000ee 07bf      	CPC  R27,R31
0000ef f43c      	BRGE _0x2000A
0000f0 d0b9      	RCALL SUBOPT_0x2
0000f1 91ec      	LD   R30,X
0000f2 93ea      	ST   -Y,R30
0000f3 e0a0      	LDI  R26,LOW(0)
0000f4 d090      	RCALL _SPI_SENDBYTE
0000f5 5f1f      	SUBI R17,-1
0000f6 cff1      	RJMP _0x20009
                 _0x2000A:
                 ; 0001 001E SPI_SENDBYTE(data[i],1);
0000f7 d0b2      	RCALL SUBOPT_0x2
0000f8 91ec      	LD   R30,X
0000f9 93ea      	ST   -Y,R30
0000fa e0a1      	LDI  R26,LOW(1)
0000fb d089      	RCALL _SPI_SENDBYTE
                 ; 0001 001F }
0000fc 8118      	LDD  R17,Y+0
0000fd 962b      	ADIW R28,11
0000fe 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;/*
                 ;Ham quet led
                 ;num_led: Thu tu led
                 ;data: Du lieu hien thi tren led.
                 ;*/
                 ;void    SCAN_LED(void)
                 ; 0001 0028 {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0001 0029     unsigned char   byte1,byte2,byte3;
                 ; 0001 002A     unsigned char    data;
                 ; 0001 002B     unsigned char   bit_left;
                 ; 0001 002C     bit_left = 0x01;
0000ff d115      	RCALL __SAVELOCR6
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
                 ;	data -> R18
                 ;	bit_left -> R21
000100 e051      	LDI  R21,LOW(1)
                 ; 0001 002D     byte1 = 0;
000101 e010      	LDI  R17,LOW(0)
                 ; 0001 002E     byte2 = 0;
000102 e000      	LDI  R16,LOW(0)
                 ; 0001 002F     byte3 = 0;
000103 e030      	LDI  R19,LOW(0)
                 ; 0001 0030 
                 ; 0001 0031     Uint_data_led1 = 1234;
000104 ede2      	LDI  R30,LOW(1234)
000105 e0f4      	LDI  R31,HIGH(1234)
000106 93e0 0200 	STS  _Uint_data_led1,R30
000108 93f0 0201 	STS  _Uint_data_led1+1,R31
                 ; 0001 0032     Uint_data_led2 = 5678;
00010a e2ee      	LDI  R30,LOW(5678)
00010b e1f6      	LDI  R31,HIGH(5678)
00010c 93e0 0202 	STS  _Uint_data_led2,R30
00010e 93f0 0203 	STS  _Uint_data_led2+1,R31
                 ; 0001 0033     Uint_data_led3 = 1357;
000110 e4ed      	LDI  R30,LOW(1357)
000111 e0f5      	LDI  R31,HIGH(1357)
000112 93e0 0204 	STS  _Uint_data_led3,R30
000114 93f0 0205 	STS  _Uint_data_led3+1,R31
                 ; 0001 0034     Uint_data_led4 = 2468;
000116 eae4      	LDI  R30,LOW(2468)
000117 e0f9      	LDI  R31,HIGH(2468)
000118 93e0 0206 	STS  _Uint_data_led4,R30
00011a 93f0 0207 	STS  _Uint_data_led4+1,R31
                 ; 0001 0035 
                 ; 0001 0036     Uc_Select_led++;
00011c 91e0 0208 	LDS  R30,_Uc_Select_led
00011e 5fef      	SUBI R30,-LOW(1)
00011f 93e0 0208 	STS  _Uc_Select_led,R30
                 ; 0001 0037     bit_left <<= (Uc_Select_led-1);
000121 50e1      	SUBI R30,LOW(1)
000122 2fa5      	MOV  R26,R21
000123 d0d3      	RCALL __LSLB12
000124 2f5e      	MOV  R21,R30
                 ; 0001 0038     if(Uc_Select_led > 8)
000125 91a0 0208 	LDS  R26,_Uc_Select_led
000127 30a9      	CPI  R26,LOW(0x9)
000128 f020      	BRLO _0x2000B
                 ; 0001 0039     {
                 ; 0001 003A         Uc_Select_led = 1;
000129 e0e1      	LDI  R30,LOW(1)
00012a 93e0 0208 	STS  _Uc_Select_led,R30
                 ; 0001 003B         bit_left = 0x01;
00012c e051      	LDI  R21,LOW(1)
                 ; 0001 003C     }
                 ; 0001 003D     /* 7-seg 1*/
                 ; 0001 003E     data = Uint_data_led1/1000;
                 _0x2000B:
00012d d083      	RCALL SUBOPT_0x3
00012e d087      	RCALL SUBOPT_0x4
                 ; 0001 003F     byte1 = BCDLED[data];
                 ; 0001 0040     // byte1 = 0xFE;
                 ; 0001 0041     if((byte1 & bit_left)) byte3 |= 0x04;
00012f f009      	BREQ _0x2000C
000130 6034      	ORI  R19,LOW(4)
                 ; 0001 0042     data = Uint_data_led1/100%10;
                 _0x2000C:
000131 d07f      	RCALL SUBOPT_0x3
000132 d08e      	RCALL SUBOPT_0x5
                 ; 0001 0043     byte1 = BCDLED[data];
                 ; 0001 0044     // byte1 = 0x06;
                 ; 0001 0045     if(byte1 & bit_left) byte3 |= 0x08;
000133 d09a      	RCALL SUBOPT_0x6
000134 f009      	BREQ _0x2000D
000135 6038      	ORI  R19,LOW(8)
                 ; 0001 0046     data = Uint_data_led1/10%10;
                 _0x2000D:
000136 d07a      	RCALL SUBOPT_0x3
000137 d099      	RCALL SUBOPT_0x7
000138 d09b      	RCALL SUBOPT_0x8
                 ; 0001 0047     byte1 = BCDLED[data];
                 ; 0001 0048     byte1 |= 0x04;
000139 d0a4      	RCALL SUBOPT_0x9
                 ; 0001 0049     // byte1 = 0x06;
                 ; 0001 004A     if(byte1 & bit_left) byte3 |= 0x10;
00013a f009      	BREQ _0x2000E
00013b 6130      	ORI  R19,LOW(16)
                 ; 0001 004B     data = Uint_data_led1%10;
                 _0x2000E:
00013c d074      	RCALL SUBOPT_0x3
00013d d0a2      	RCALL SUBOPT_0xA
                 ; 0001 004C     byte1 = BCDLED[data];
                 ; 0001 004D     // byte1 = 0x06;
                 ; 0001 004E     if(byte1 & bit_left) byte2 |= 0x10;
00013e f009      	BREQ _0x2000F
00013f 6100      	ORI  R16,LOW(16)
                 ; 0001 004F     /* 7-seg 2 */
                 ; 0001 0050     data = Uint_data_led2/1000;
                 _0x2000F:
000140 d0a7      	RCALL SUBOPT_0xB
000141 d074      	RCALL SUBOPT_0x4
                 ; 0001 0051     byte1 = BCDLED[data];
                 ; 0001 0052     if(byte1 & bit_left) byte2 |= 0x20;
000142 f009      	BREQ _0x20010
000143 6200      	ORI  R16,LOW(32)
                 ; 0001 0053     data = Uint_data_led2/100%10;
                 _0x20010:
000144 d0a3      	RCALL SUBOPT_0xB
000145 d07b      	RCALL SUBOPT_0x5
                 ; 0001 0054     byte1 = BCDLED[data];
                 ; 0001 0055     byte1 |= 0x04;
000146 d097      	RCALL SUBOPT_0x9
                 ; 0001 0056     if(byte1 & bit_left) byte2 |= 0x08;
000147 f009      	BREQ _0x20011
000148 6008      	ORI  R16,LOW(8)
                 ; 0001 0057     data = Uint_data_led2/10%10;
                 _0x20011:
000149 d09e      	RCALL SUBOPT_0xB
00014a d086      	RCALL SUBOPT_0x7
00014b d088      	RCALL SUBOPT_0x8
                 ; 0001 0058     byte1 = BCDLED[data];
                 ; 0001 0059     if(byte1 & bit_left) byte2 |= 0x04;
00014c d081      	RCALL SUBOPT_0x6
00014d f009      	BREQ _0x20012
00014e 6004      	ORI  R16,LOW(4)
                 ; 0001 005A     data = Uint_data_led2%10;
                 _0x20012:
00014f d098      	RCALL SUBOPT_0xB
000150 d08f      	RCALL SUBOPT_0xA
                 ; 0001 005B     byte1 = BCDLED[data];
                 ; 0001 005C     if(byte1 & bit_left) byte2 |= 0x01;
000151 f009      	BREQ _0x20013
000152 6001      	ORI  R16,LOW(1)
                 ; 0001 005D     /* 7-seg 3 */
                 ; 0001 005E     data = Uint_data_led3/1000;
                 _0x20013:
000153 d099      	RCALL SUBOPT_0xC
000154 d061      	RCALL SUBOPT_0x4
                 ; 0001 005F     byte1 = BCDLED[data];
                 ; 0001 0060     if(byte1 & bit_left) byte3 |= 0x20;
000155 f009      	BREQ _0x20014
000156 6230      	ORI  R19,LOW(32)
                 ; 0001 0061     data = Uint_data_led3/100%10;
                 _0x20014:
000157 d095      	RCALL SUBOPT_0xC
000158 d068      	RCALL SUBOPT_0x5
                 ; 0001 0062     byte1 = BCDLED[data];
                 ; 0001 0063     // byte1 |= 0x80;
                 ; 0001 0064     if(byte1 & bit_left) byte3 |= 0x40;
000159 d074      	RCALL SUBOPT_0x6
00015a f009      	BREQ _0x20015
00015b 6430      	ORI  R19,LOW(64)
                 ; 0001 0065     data = Uint_data_led3/10%10;
                 _0x20015:
00015c d090      	RCALL SUBOPT_0xC
00015d d073      	RCALL SUBOPT_0x7
00015e d075      	RCALL SUBOPT_0x8
                 ; 0001 0066     byte1 = BCDLED[data];
                 ; 0001 0067     byte1 |= 0x04;
00015f d07e      	RCALL SUBOPT_0x9
                 ; 0001 0068     if(byte1 & bit_left) byte3 |= 0x80;
000160 f009      	BREQ _0x20016
000161 6830      	ORI  R19,LOW(128)
                 ; 0001 0069     data = Uint_data_led3%10;
                 _0x20016:
000162 d08a      	RCALL SUBOPT_0xC
000163 d07c      	RCALL SUBOPT_0xA
                 ; 0001 006A     byte1 = BCDLED[data];
                 ; 0001 006B     if(byte1 & bit_left) byte3 |= 0x02;
000164 f009      	BREQ _0x20017
000165 6032      	ORI  R19,LOW(2)
                 ; 0001 006C     /* 7-seg 4 */
                 ; 0001 006D     data = Uint_data_led4/1000;
                 _0x20017:
000166 d08b      	RCALL SUBOPT_0xD
000167 d04e      	RCALL SUBOPT_0x4
                 ; 0001 006E     byte1 = BCDLED[data];
                 ; 0001 006F     if(byte1 & bit_left) byte3 |= 0x01; //2
000168 f009      	BREQ _0x20018
000169 6031      	ORI  R19,LOW(1)
                 ; 0001 0070     data = Uint_data_led4/100%10;
                 _0x20018:
00016a d087      	RCALL SUBOPT_0xD
00016b d055      	RCALL SUBOPT_0x5
                 ; 0001 0071     byte1 = BCDLED[data];
                 ; 0001 0072     byte1 |= 0x04;
00016c d071      	RCALL SUBOPT_0x9
                 ; 0001 0073     if(byte1 & bit_left) byte2 |= 0x40;
00016d f009      	BREQ _0x20019
00016e 6400      	ORI  R16,LOW(64)
                 ; 0001 0074     data = Uint_data_led4/10%10;
                 _0x20019:
00016f d082      	RCALL SUBOPT_0xD
000170 d060      	RCALL SUBOPT_0x7
000171 d062      	RCALL SUBOPT_0x8
                 ; 0001 0075     byte1 = BCDLED[data];
                 ; 0001 0076     // byte1 |= 0x80;
                 ; 0001 0077     if(byte1 & bit_left) byte2 |= 0x80; //7
000172 d05b      	RCALL SUBOPT_0x6
000173 f009      	BREQ _0x2001A
000174 6800      	ORI  R16,LOW(128)
                 ; 0001 0078     data = Uint_data_led4%10;
                 _0x2001A:
000175 d07c      	RCALL SUBOPT_0xD
000176 d069      	RCALL SUBOPT_0xA
                 ; 0001 0079     byte1 = BCDLED[data];
                 ; 0001 007A     if(byte1 & bit_left) byte2 |= 0x02;
000177 f009      	BREQ _0x2001B
000178 6002      	ORI  R16,LOW(2)
                 ; 0001 007B     bit_left = 0xff- bit_left;
                 _0x2001B:
000179 efef      	LDI  R30,LOW(255)
00017a 1be5      	SUB  R30,R21
00017b 2f5e      	MOV  R21,R30
                 ; 0001 007C     SEND_DATA_LED(3,byte3,byte2,bit_left);
00017c e0e3      	LDI  R30,LOW(3)
00017d 93ea      	ST   -Y,R30
00017e 933a      	ST   -Y,R19
00017f 930a      	ST   -Y,R16
000180 2fa5      	MOV  R26,R21
000181 df54      	RCALL _SEND_DATA_LED
                 ; 0001 007D }
000182 d099      	RCALL __LOADLOCR6
000183 9626      	ADIW R28,6
000184 9508      	RET
                 ; .FEND
                 ;
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void    SPI_SENDBYTE(unsigned char  data,unsigned char action)
                 ; 0002 0005 {
                 
                 	.CSEG
                 _SPI_SENDBYTE:
                 ; .FSTART _SPI_SENDBYTE
                 ; 0002 0006     unsigned char   i;
                 ; 0002 0007     for(i=0;i<8;i++)
000185 93aa      	ST   -Y,R26
000186 931a      	ST   -Y,R17
                 ;	data -> Y+2
                 ;	action -> Y+1
                 ;	i -> R17
000187 e010      	LDI  R17,LOW(0)
                 _0x40004:
000188 3018      	CPI  R17,8
000189 f470      	BRSH _0x40005
                 ; 0002 0008     {
                 ; 0002 0009         if((data & 0x80) == 0x80)    DO_SPI_MOSI_HIGHT;
00018a 81ea      	LDD  R30,Y+2
00018b 78e0      	ANDI R30,LOW(0x80)
00018c 38e0      	CPI  R30,LOW(0x80)
00018d f411      	BRNE _0x40006
00018e 9a2b      	SBI  0x5,3
                 ; 0002 000A         else    DO_SPI_MOSI_LOW;
00018f c001      	RJMP _0x40009
                 _0x40006:
000190 982b      	CBI  0x5,3
                 ; 0002 000B         data <<= 1;
                 _0x40009:
000191 81ea      	LDD  R30,Y+2
000192 0fee      	LSL  R30
000193 83ea      	STD  Y+2,R30
                 ; 0002 000C         DO_SPI_SCK_HIGHT;
000194 9a2d      	SBI  0x5,5
                 ; 0002 000D         DO_SPI_SCK_LOW;
000195 982d      	CBI  0x5,5
                 ; 0002 000E     }
000196 5f1f      	SUBI R17,-1
000197 cff0      	RJMP _0x40004
                 _0x40005:
                 ; 0002 000F     if(action)
000198 81e9      	LDD  R30,Y+1
000199 30e0      	CPI  R30,0
00019a f011      	BREQ _0x40010
                 ; 0002 0010     {
                 ; 0002 0011         DO_SPI_LATCH_HIGHT;
00019b 9a5a      	SBI  0xB,2
                 ; 0002 0012         DO_SPI_LATCH_LOW;
00019c 985a      	CBI  0xB,2
                 ; 0002 0013     }
                 ; 0002 0014 }
                 _0x40010:
00019d 8118      	LDD  R17,Y+0
00019e 9623      	ADIW R28,3
00019f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Uint_data_led1:
000200           	.BYTE 0x2
                 _Uint_data_led2:
000202           	.BYTE 0x2
                 _Uint_data_led3:
000204           	.BYTE 0x2
                 _Uint_data_led4:
000206           	.BYTE 0x2
                 _Uc_Select_led:
000208           	.BYTE 0x1
                 _BCDLED:
000209           	.BYTE 0xB
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0001a0 93e0 0085 	STS  133,R30
0001a2 e8e0      	LDI  R30,LOW(128)
0001a3 93e0 0084 	STS  132,R30
0001a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001a6 e0e0      	LDI  R30,LOW(0)
0001a7 93e0 007b 	STS  123,R30
0001a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
0001aa 2fe1      	MOV  R30,R17
0001ab e0f0      	LDI  R31,0
0001ac 01de      	MOVW R26,R28
0001ad 9611      	ADIW R26,1
0001ae 0fae      	ADD  R26,R30
0001af 1fbf      	ADC  R27,R31
0001b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0001b1 91a0 0200 	LDS  R26,_Uint_data_led1
0001b3 91b0 0201 	LDS  R27,_Uint_data_led1+1
0001b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0x4:
0001b6 eee8      	LDI  R30,LOW(1000)
0001b7 e0f3      	LDI  R31,HIGH(1000)
0001b8 d046      	RCALL __DIVW21U
0001b9 2f2e      	MOV  R18,R30
0001ba e0f0      	LDI  R31,0
0001bb 5fe7      	SUBI R30,LOW(-_BCDLED)
0001bc 4ffd      	SBCI R31,HIGH(-_BCDLED)
0001bd 8110      	LD   R17,Z
0001be 2fe5      	MOV  R30,R21
0001bf 23e1      	AND  R30,R17
0001c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:34 WORDS
                 SUBOPT_0x5:
0001c1 e6e4      	LDI  R30,LOW(100)
0001c2 e0f0      	LDI  R31,HIGH(100)
0001c3 d03b      	RCALL __DIVW21U
0001c4 01df      	MOVW R26,R30
0001c5 e0ea      	LDI  R30,LOW(10)
0001c6 e0f0      	LDI  R31,HIGH(10)
0001c7 d04a      	RCALL __MODW21U
0001c8 2f2e      	MOV  R18,R30
0001c9 e0f0      	LDI  R31,0
0001ca 5fe7      	SUBI R30,LOW(-_BCDLED)
0001cb 4ffd      	SBCI R31,HIGH(-_BCDLED)
0001cc 8110      	LD   R17,Z
0001cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0001ce 2fe5      	MOV  R30,R21
0001cf 23e1      	AND  R30,R17
0001d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
0001d1 e0ea      	LDI  R30,LOW(10)
0001d2 e0f0      	LDI  R31,HIGH(10)
0001d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x8:
0001d4 d02a      	RCALL __DIVW21U
0001d5 01df      	MOVW R26,R30
0001d6 dffa      	RCALL SUBOPT_0x7
0001d7 d03a      	RCALL __MODW21U
0001d8 2f2e      	MOV  R18,R30
0001d9 e0f0      	LDI  R31,0
0001da 5fe7      	SUBI R30,LOW(-_BCDLED)
0001db 4ffd      	SBCI R31,HIGH(-_BCDLED)
0001dc 8110      	LD   R17,Z
0001dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0001de 6014      	ORI  R17,LOW(4)
0001df cfee      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xA:
0001e0 dff0      	RCALL SUBOPT_0x7
0001e1 d030      	RCALL __MODW21U
0001e2 2f2e      	MOV  R18,R30
0001e3 e0f0      	LDI  R31,0
0001e4 5fe7      	SUBI R30,LOW(-_BCDLED)
0001e5 4ffd      	SBCI R31,HIGH(-_BCDLED)
0001e6 8110      	LD   R17,Z
0001e7 cfe6      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
0001e8 91a0 0202 	LDS  R26,_Uint_data_led2
0001ea 91b0 0203 	LDS  R27,_Uint_data_led2+1
0001ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
0001ed 91a0 0204 	LDS  R26,_Uint_data_led3
0001ef 91b0 0205 	LDS  R27,_Uint_data_led3+1
0001f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
0001f2 91a0 0206 	LDS  R26,_Uint_data_led4
0001f4 91b0 0207 	LDS  R27,_Uint_data_led4+1
0001f6 9508      	RET
                 
                 
                 	.CSEG
                 __LSLB12:
0001f7 23ee      	TST  R30
0001f8 2e0e      	MOV  R0,R30
0001f9 2fea      	MOV  R30,R26
0001fa f019      	BREQ __LSLB12R
                 __LSLB12L:
0001fb 0fee      	LSL  R30
0001fc 940a      	DEC  R0
0001fd f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0001fe 9508      	RET
                 
                 __DIVW21U:
0001ff 2400      	CLR  R0
000200 2411      	CLR  R1
000201 e190      	LDI  R25,16
                 __DIVW21U1:
000202 0faa      	LSL  R26
000203 1fbb      	ROL  R27
000204 1c00      	ROL  R0
000205 1c11      	ROL  R1
000206 1a0e      	SUB  R0,R30
000207 0a1f      	SBC  R1,R31
000208 f418      	BRCC __DIVW21U2
000209 0e0e      	ADD  R0,R30
00020a 1e1f      	ADC  R1,R31
00020b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00020c 60a1      	SBR  R26,1
                 __DIVW21U3:
00020d 959a      	DEC  R25
00020e f799      	BRNE __DIVW21U1
00020f 01fd      	MOVW R30,R26
000210 01d0      	MOVW R26,R0
000211 9508      	RET
                 
                 __MODW21U:
000212 dfec      	RCALL __DIVW21U
000213 01fd      	MOVW R30,R26
000214 9508      	RET
                 
                 __SAVELOCR6:
000215 935a      	ST   -Y,R21
                 __SAVELOCR5:
000216 934a      	ST   -Y,R20
                 __SAVELOCR4:
000217 933a      	ST   -Y,R19
                 __SAVELOCR3:
000218 932a      	ST   -Y,R18
                 __SAVELOCR2:
000219 931a      	ST   -Y,R17
00021a 930a      	ST   -Y,R16
00021b 9508      	RET
                 
                 __LOADLOCR6:
00021c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00021d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00021e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00021f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000220 8119      	LDD  R17,Y+1
000221 8108      	LD   R16,Y
000222 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega88P register use summary:
r0 :  13 r1 :   7 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  12 r17:  24 r18:   6 r19:  12 r20:   2 r21:  11 r22:   4 r23:   2 
r24:   9 r25:   6 r26:  30 r27:  13 r28:   6 r29:   1 r30: 156 r31:  31 
x  :   6 y  :  58 z  :  11 
Registers used: 22 out of 35 (62.9%)

ATmega88P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   4 and   :   2 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  19 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   3 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   4 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 
cpc   :   1 cpi   :   5 cpse  :   0 dec   :   3 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   0 ld    :  19 ldd   :  14 ldi   :  72 lds   :  10 lpm   :   7 
lsl   :   3 lsr   :   0 mov   :  14 movw  :   9 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :  17 out   :  21 
pop   :   0 push  :   0 rcall :  67 ret   :  20 reti  :   1 rjmp  :  37 
rol   :   3 ror   :   0 sbc   :   1 sbci  :   4 sbi   :   3 sbic  :   0 
sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  31 std   :   4 
sts   :  40 sub   :   2 subi  :   9 swap  :   0 tst   :   1 wdr   :   0 

Instructions used: 46 out of 114 (40.4%)

ATmega88P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000446   1052     42   1094    8192  13.4%
[.dseg] 0x000100 0x000214      0     20     20    1024   2.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
