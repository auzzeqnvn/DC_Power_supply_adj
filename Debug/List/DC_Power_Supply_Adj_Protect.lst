
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm Fri Nov 30 18:00:07 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1096): warning: Register r13 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega88P
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega88P
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_I_Positive_Over=R5
                 	.DEF _Uc_U_Positive_Over=R4
                 	.DEF _Uc_I_Negative_Over=R7
                 	.DEF _Uc_U_Negative_Over=R6
                 	.DEF _Uc_I_Positive_Under=R9
                 	.DEF _Uc_U_Positive_Under=R8
                 	.DEF _Uc_I_Negative_Under=R11
                 	.DEF _Uc_U_Negative_Under=R10
                 	.DEF _Uc_Buffer_count=R13
                 	.DEF _Uc_Select_led=R12
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02b      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d c04c      	RJMP _timer1_ovf_isr
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
000015 cfea      	RJMP 0x00
000016 cfe9      	RJMP 0x00
000017 cfe8      	RJMP 0x00
000018 cfe7      	RJMP 0x00
000019 cfe6      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001a 0000
00001b 0000      	.DB  0x0,0x0,0x0,0x0
00001c 0000
00001d 0000      	.DB  0x0,0x0,0x0,0x0
00001e 0001      	.DB  0x1,0x0
                 
                 _0x20003:
00001f 21f9
000020 6bea
000021 5b33
000022 29db      	.DB  0xF9,0x21,0xEA,0x6B,0x33,0x5B,0xDB,0x29
000023 7bfb
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\DC_Power_supply_adj\Debug\List\DC_Power_Supply_Adj_Protect.asm(1144): warning: .cseg .db misalignment - padding zero byte
000024 0002      	.DB  0xFB,0x7B,0x2
                 
                 __GLOBAL_INI_TBL:
000025 000a      	.DW  0x0A
000026 0004      	.DW  0x04
000027 0034      	.DW  __REG_VARS*2
                 
000028 000b      	.DW  0x0B
000029 02fc      	.DW  _BCDLED
00002a 003e      	.DW  _0x20003*2
                 
                 _0xFFFFFFFF:
00002b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002c 94f8      	CLI
00002d 27ee      	CLR  R30
00002e bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002f e0f1      	LDI  R31,1
000030 bff5      	OUT  MCUCR,R31
000031 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000032 e08d      	LDI  R24,(14-2)+1
000033 e0a2      	LDI  R26,2
000034 27bb      	CLR  R27
                 __CLEAR_REG:
000035 93ed      	ST   X+,R30
000036 958a      	DEC  R24
000037 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000038 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000039 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003a e0a0      	LDI  R26,LOW(__SRAM_START)
00003b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00003c 93ed      	ST   X+,R30
00003d 9701      	SBIW R24,1
00003e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003f e4ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000040 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000041 9185      	LPM  R24,Z+
000042 9195      	LPM  R25,Z+
000043 9700      	SBIW R24,0
000044 f061      	BREQ __GLOBAL_INI_END
000045 91a5      	LPM  R26,Z+
000046 91b5      	LPM  R27,Z+
000047 9005      	LPM  R0,Z+
000048 9015      	LPM  R1,Z+
000049 01bf      	MOVW R22,R30
00004a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004b 9005      	LPM  R0,Z+
00004c 920d      	ST   X+,R0
00004d 9701      	SBIW R24,1
00004e f7e1      	BRNE __GLOBAL_INI_LOOP
00004f 01fb      	MOVW R30,R22
000050 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000051 e0e0      	LDI  R30,__GPIOR0_INIT
000052 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000053 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000054 bfed      	OUT  SPL,R30
000055 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000056 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000057 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000058 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000059 c1bd      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : DC_Power_Supply_Adj_Protect
                 ;Version :
                 ;Date    : 29/11/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Uint_data_led1 = Dien ap am*10
                 ;Uint_data_led2 = Cuong do dong dien am*10
                 ;Uint_data_led3 = Dien ap duong*10
                 ;Uint_data_led4 = Cuong do dong dien duong*10
                 ;
                 ;Chip type               : ATmega8A
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega88.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <scan_led.h>
                 ;#include <delay.h>
                 ;
                 ;#define ADC_I_POSITIVE  2
                 ;#define ADC_U_POSITIVE  1
                 ;#define ADC_I_NEGATIVE  0
                 ;#define ADC_U_NEGATIVE  3
                 ;
                 ;#define CONTROL_RELAY   PORTC.4
                 ;
                 ;#define PROTECT_ON   CONTROL_RELAY  = 1
                 ;#define PROTECT_OFF   CONTROL_RELAY  = 0
                 ;
                 ;#define ADC_I_POSITIVE_SET  300
                 ;#define ADC_U_POSITIVE_SET  300
                 ;#define ADC_I_NEGATIVE_SET  300
                 ;#define ADC_U_NEGATIVE_SET  300
                 ;
                 ;#define ADC_I_POSITIVE_RATIO  3.056152//2.894736
                 ;#define ADC_U_POSITIVE_RATIO  370
                 ;#define ADC_I_NEGATIVE_RATIO  3.129425
                 ;#define ADC_U_NEGATIVE_RATIO  370
                 ;
                 ;#define TIME_UPDATE_DISPLAY 200
                 ;
                 ;#define ADC_I_POSITIVE_ZERO 888
                 ;#define ADC_I_NEGATIVE_ZERO 883
                 ;
                 ;#define NUM_SAMPLE  30
                 ;#define NUM_FILTER  10
                 ;
                 ;unsigned char   Uc_I_Positive_Over = 0;
                 ;unsigned char   Uc_U_Positive_Over = 0;
                 ;unsigned char   Uc_I_Negative_Over = 0;
                 ;unsigned char   Uc_U_Negative_Over = 0;
                 ;
                 ;unsigned char   Uc_I_Positive_Under = 0;
                 ;unsigned char   Uc_U_Positive_Under = 0;
                 ;unsigned char   Uc_I_Negative_Under = 0;
                 ;unsigned char   Uc_U_Negative_Under = 0;
                 ;
                 ;unsigned int   Uint_U_Positive_Buff[NUM_SAMPLE];
                 ;unsigned int   Uint_U_Negative_Buff[NUM_SAMPLE];
                 ;unsigned int   Uint_I_Positive_Buff[NUM_SAMPLE];
                 ;unsigned int   Uint_I_Negative_Buff[NUM_SAMPLE];
                 ;
                 ;unsigned char   Uc_Buffer_count = 0;
                 ;
                 ;unsigned int   Uint_Turnoff_relay_timer;
                 ;
                 ;bit     Bit_I_Positive_Warning = 0;
                 ;bit     Bit_U_Positive_Warning = 0;
                 ;bit     Bit_I_Negative_Warning = 0;
                 ;bit     Bit_U_Negative_Warning = 0;
                 ;
                 ;unsigned int    Uint_Timer_Display = 0;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0059 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
00005a 920a      	ST   -Y,R0
00005b 921a      	ST   -Y,R1
00005c 92fa      	ST   -Y,R15
00005d 936a      	ST   -Y,R22
00005e 937a      	ST   -Y,R23
00005f 938a      	ST   -Y,R24
000060 939a      	ST   -Y,R25
000061 93aa      	ST   -Y,R26
000062 93ba      	ST   -Y,R27
000063 93ea      	ST   -Y,R30
000064 93fa      	ST   -Y,R31
000065 b7ef      	IN   R30,SREG
000066 93ea      	ST   -Y,R30
                 ; 0000 005A     // Reinitialize Timer1 value
                 ; 0000 005B     TCNT1H=0x9380 >> 8;
000067 e9e3      	LDI  R30,LOW(147)
000068 d2b8      	RCALL SUBOPT_0x0
                 ; 0000 005C     TCNT1L=0x9380 & 0xff;
                 ; 0000 005D     if(Uint_Timer_Display < TIME_UPDATE_DISPLAY)    Uint_Timer_Display++;
000069 d2bd      	RCALL SUBOPT_0x1
00006a f418      	BRSH _0x3
00006b efaa      	LDI  R26,LOW(_Uint_Timer_Display)
00006c e0b2      	LDI  R27,HIGH(_Uint_Timer_Display)
00006d d2c1      	RCALL SUBOPT_0x2
                 ; 0000 005E     // Place your code here
                 ; 0000 005F     SCAN_LED();
                 _0x3:
00006e d22e      	RCALL _SCAN_LED
                 ; 0000 0060     if(Uint_Turnoff_relay_timer < 500)    Uint_Turnoff_relay_timer++;
00006f d2c5      	RCALL SUBOPT_0x3
000070 f418      	BRSH _0x4
000071 efa8      	LDI  R26,LOW(_Uint_Turnoff_relay_timer)
000072 e0b2      	LDI  R27,HIGH(_Uint_Turnoff_relay_timer)
000073 d2bb      	RCALL SUBOPT_0x2
                 ; 0000 0061 }
                 _0x4:
000074 91e9      	LD   R30,Y+
000075 bfef      	OUT  SREG,R30
000076 91f9      	LD   R31,Y+
000077 91e9      	LD   R30,Y+
000078 91b9      	LD   R27,Y+
000079 91a9      	LD   R26,Y+
00007a 9199      	LD   R25,Y+
00007b 9189      	LD   R24,Y+
00007c 9179      	LD   R23,Y+
00007d 9169      	LD   R22,Y+
00007e 90f9      	LD   R15,Y+
00007f 9019      	LD   R1,Y+
000080 9009      	LD   R0,Y+
000081 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0068 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0069     ADMUX=adc_input | ADC_VREF_TYPE;
000082 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000083 81e8      	LD   R30,Y
000084 93e0 007c 	STS  124,R30
                 ; 0000 006A     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 006B     delay_us(10);
                +
000086 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000087 958a     +DEC R24
000088 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 006C     // Start the AD conversion
                 ; 0000 006D     ADCSRA|=(1<<ADSC);
000089 91e0 007a 	LDS  R30,122
00008b 64e0      	ORI  R30,0x40
00008c 93e0 007a 	STS  122,R30
                 ; 0000 006E     // Wait for the AD conversion to complete
                 ; 0000 006F     while ((ADCSRA & (1<<ADIF))==0);
                 _0x5:
00008e 91e0 007a 	LDS  R30,122
000090 71e0      	ANDI R30,LOW(0x10)
000091 f3e1      	BREQ _0x5
                 ; 0000 0070     ADCSRA|=(1<<ADIF);
000092 91e0 007a 	LDS  R30,122
000094 61e0      	ORI  R30,0x10
000095 93e0 007a 	STS  122,R30
                 ; 0000 0071     return ADCW;
000097 91e0 0078 	LDS  R30,120
000099 91f0 0079 	LDS  R31,120+1
00009b 9621      	ADIW R28,1
00009c 9508      	RET
                 ; 0000 0072 }
                 ; .FEND
                 ;
                 ;void    PROTECT(void)
                 ; 0000 0075 {
                 _PROTECT:
                 ; .FSTART _PROTECT
                 ; 0000 0076     unsigned int    Uint_ADC_Value;
                 ; 0000 0077     unsigned char   Uc_Loop_count,Uc_Loop2_count;
                 ; 0000 0078     unsigned long int Ul_Sum;
                 ; 0000 0079     unsigned int    Uint_Buff_Temp[NUM_SAMPLE];
                 ; 0000 007A     unsigned int    Uint_temp;
                 ; 0000 007B 
                 ; 0000 007C     /* I Negative */
                 ; 0000 007D     Uint_ADC_Value = (unsigned int) read_adc(ADC_I_NEGATIVE);
00009d 97ef      	SBIW R28,63
00009e 9721      	SBIW R28,1
00009f d4e8      	RCALL __SAVELOCR6
                 ;	Uint_ADC_Value -> R16,R17
                 ;	Uc_Loop_count -> R19
                 ;	Uc_Loop2_count -> R18
                 ;	Ul_Sum -> Y+66
                 ;	Uint_Buff_Temp -> Y+6
                 ;	Uint_temp -> R20,R21
0000a0 e0a0      	LDI  R26,LOW(0)
0000a1 dfe0      	RCALL _read_adc
0000a2 018f      	MOVW R16,R30
                 ; 0000 007E     // Uint_data_led2 = Uint_ADC_Value;
                 ; 0000 007F     // if(Uint_ADC_Value > ADC_I_NEGATIVE_ZERO)   Uint_ADC_Value = Uint_ADC_Value - ADC_I_NEGATIVE_ZERO;
                 ; 0000 0080     // else    Uint_ADC_Value = 0;
                 ; 0000 0081     // Uint_data_led2 = Uint_ADC_Value;
                 ; 0000 0082     Uint_I_Negative_Buff[Uc_Buffer_count] = Uint_ADC_Value;
0000a3 2ded      	MOV  R30,R13
0000a4 d298      	RCALL SUBOPT_0x4
0000a5 d29d      	RCALL SUBOPT_0x5
0000a6 8300      	ST   Z,R16
0000a7 8311      	STD  Z+1,R17
                 ; 0000 0083 
                 ; 0000 0084     if(Uint_Timer_Display >= TIME_UPDATE_DISPLAY)
0000a8 d27e      	RCALL SUBOPT_0x1
0000a9 f408      	BRSH PC+2
0000aa c043      	RJMP _0x8
                 ; 0000 0085     {
                 ; 0000 0086         /* Chuyen sang bo nho dem */
                 ; 0000 0087         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
0000ab e030      	LDI  R19,LOW(0)
                 _0xA:
0000ac 313e      	CPI  R19,30
0000ad f440      	BRSH _0xB
                 ; 0000 0088         {
                 ; 0000 0089             Uint_Buff_Temp[Uc_Loop_count] = Uint_I_Negative_Buff[Uc_Loop_count];
0000ae d297      	RCALL SUBOPT_0x6
0000af d29d      	RCALL SUBOPT_0x7
0000b0 2fe3      	MOV  R30,R19
0000b1 d28b      	RCALL SUBOPT_0x4
0000b2 d29d      	RCALL SUBOPT_0x8
0000b3 d29f      	RCALL SUBOPT_0x9
                 ; 0000 008A         }
0000b4 5f3f      	SUBI R19,-1
0000b5 cff6      	RJMP _0xA
                 _0xB:
                 ; 0000 008B         /* Sap xep bo nho dem tu min -> max */
                 ; 0000 008C         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
0000b6 e030      	LDI  R19,LOW(0)
                 _0xD:
0000b7 313e      	CPI  R19,30
0000b8 f488      	BRSH _0xE
                 ; 0000 008D         {
                 ; 0000 008E             for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count < NUM_SAMPLE; Uc_Loop2_count++)
0000b9 2f23      	MOV  R18,R19
                 _0x10:
0000ba 312e      	CPI  R18,30
0000bb f460      	BRSH _0x11
                 ; 0000 008F             {
                 ; 0000 0090                 if(Uint_Buff_Temp[Uc_Loop_count] > Uint_Buff_Temp[Uc_Loop2_count])
0000bc d289      	RCALL SUBOPT_0x6
0000bd d29a      	RCALL SUBOPT_0xA
0000be f438      	BRSH _0x12
                 ; 0000 0091                 {
                 ; 0000 0092                     Uint_temp = Uint_Buff_Temp[Uc_Loop_count];
0000bf d286      	RCALL SUBOPT_0x6
0000c0 d2a5      	RCALL SUBOPT_0xB
                 ; 0000 0093                     Uint_Buff_Temp[Uc_Loop_count] = Uint_Buff_Temp[Uc_Loop2_count];
0000c1 d28b      	RCALL SUBOPT_0x7
0000c2 d2a7      	RCALL SUBOPT_0xC
0000c3 d2ad      	RCALL SUBOPT_0xD
                 ; 0000 0094                     Uint_Buff_Temp[Uc_Loop2_count] = Uint_temp;
0000c4 d2a5      	RCALL SUBOPT_0xC
0000c5 d2ad      	RCALL SUBOPT_0xE
                 ; 0000 0095                 }
                 ; 0000 0096             }
                 _0x12:
0000c6 5f2f      	SUBI R18,-1
0000c7 cff2      	RJMP _0x10
                 _0x11:
                 ; 0000 0097         }
0000c8 5f3f      	SUBI R19,-1
0000c9 cfed      	RJMP _0xD
                 _0xE:
                 ; 0000 0098         /* Low filter & hight filter */
                 ; 0000 0099         Ul_Sum = 0;
0000ca d2ac      	RCALL SUBOPT_0xF
                 ; 0000 009A         for(Uc_Loop_count = NUM_FILTER; Uc_Loop_count < (NUM_SAMPLE-NUM_FILTER); Uc_Loop_count++)
                 _0x14:
0000cb 3134      	CPI  R19,20
0000cc f420      	BRSH _0x15
                 ; 0000 009B         {
                 ; 0000 009C             Ul_Sum += Uint_Buff_Temp[Uc_Loop_count];
0000cd d278      	RCALL SUBOPT_0x6
0000ce d2b2      	RCALL SUBOPT_0x10
                 ; 0000 009D         }
0000cf 5f3f      	SUBI R19,-1
0000d0 cffa      	RJMP _0x14
                 _0x15:
                 ; 0000 009E         // Uint_data_led2 = (unsigned int)((float)Ul_Sum*ADC_I_NEGATIVE_RATIO/(NUM_SAMPLE-2*NUM_FILTER));
                 ; 0000 009F         Uint_temp = (unsigned int)((float)Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER));
0000d1 d2c4      	RCALL SUBOPT_0x11
0000d2 d2cd      	RCALL SUBOPT_0x12
0000d3 01af      	MOVW R20,R30
                 ; 0000 00A0         // Uint_data_led1 = Uint_temp;
                 ; 0000 00A1         if(Uint_temp < ADC_I_NEGATIVE_ZERO) Uint_temp = ADC_I_NEGATIVE_ZERO - Uint_temp;
                +
0000d4 3743     +CPI R20 , LOW ( 883 )
0000d5 e0e3     +LDI R30 , HIGH ( 883 )
0000d6 075e     +CPC R21 , R30
                 	__CPWRN 20,21,883
0000d7 f430      	BRSH _0x16
0000d8 e7e3      	LDI  R30,LOW(883)
0000d9 e0f3      	LDI  R31,HIGH(883)
0000da 1be4      	SUB  R30,R20
0000db 0bf5      	SBC  R31,R21
0000dc 01af      	MOVW R20,R30
                 ; 0000 00A2         else    Uint_temp = 0;
0000dd c002      	RJMP _0x17
                 _0x16:
                +
0000de e040     +LDI R20 , LOW ( 0 )
0000df e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 00A3         Uint_data_led2 = Uint_temp*ADC_I_NEGATIVE_RATIO;
                 _0x17:
0000e0 01fa      	MOVW R30,R20
0000e1 2766      	CLR  R22
0000e2 2777      	CLR  R23
0000e3 d3af      	RCALL __CDF1
                +
0000e4 e8a0     +LDI R26 , LOW ( 0x40484880 )
0000e5 e4b8     +LDI R27 , HIGH ( 0x40484880 )
0000e6 e488     +LDI R24 , BYTE3 ( 0x40484880 )
0000e7 e490     +LDI R25 , BYTE4 ( 0x40484880 )
                 	__GETD2N 0x40484880
0000e8 d3d8      	RCALL __MULF12
0000e9 e0a2      	LDI  R26,LOW(_Uint_data_led2)
0000ea e0b2      	LDI  R27,HIGH(_Uint_data_led2)
0000eb d36e      	RCALL __CFD1U
0000ec 93ed      	ST   X+,R30
0000ed 93fc      	ST   X,R31
                 ; 0000 00A4 
                 ; 0000 00A5     }
                 ; 0000 00A6     if(Uint_data_led2 > ADC_I_NEGATIVE_SET)
                 _0x8:
0000ee d2ba      	RCALL SUBOPT_0x13
0000ef d2be      	RCALL SUBOPT_0x14
0000f0 f048      	BRLO _0x18
                 ; 0000 00A7     {
                 ; 0000 00A8         Uc_I_Negative_Over++;
0000f1 9473      	INC  R7
                 ; 0000 00A9         if(Uc_I_Negative_Over > 10)
0000f2 e0ea      	LDI  R30,LOW(10)
0000f3 15e7      	CP   R30,R7
0000f4 f420      	BRSH _0x19
                 ; 0000 00AA         {
                 ; 0000 00AB             Uc_I_Negative_Over = 11;
0000f5 e0eb      	LDI  R30,LOW(11)
0000f6 2e7e      	MOV  R7,R30
                 ; 0000 00AC             Uc_I_Negative_Under = 0;
0000f7 24bb      	CLR  R11
                 ; 0000 00AD             Bit_I_Negative_Warning = 1;
0000f8 9af2      	SBI  0x1E,2
                 ; 0000 00AE         }
                 ; 0000 00AF     }
                 _0x19:
                 ; 0000 00B0     else
0000f9 c008      	RJMP _0x1C
                 _0x18:
                 ; 0000 00B1     {
                 ; 0000 00B2         Uc_I_Negative_Under++;
0000fa 94b3      	INC  R11
                 ; 0000 00B3         if(Uc_I_Negative_Under > 10)
0000fb e0ea      	LDI  R30,LOW(10)
0000fc 15eb      	CP   R30,R11
0000fd f420      	BRSH _0x1D
                 ; 0000 00B4         {
                 ; 0000 00B5             Uc_I_Negative_Under = 11;
0000fe e0eb      	LDI  R30,LOW(11)
0000ff 2ebe      	MOV  R11,R30
                 ; 0000 00B6             Uc_I_Negative_Over = 0;
000100 2477      	CLR  R7
                 ; 0000 00B7             Bit_I_Negative_Warning = 0;
000101 98f2      	CBI  0x1E,2
                 ; 0000 00B8         }
                 ; 0000 00B9     }
                 _0x1D:
                 _0x1C:
                 ; 0000 00BA 
                 ; 0000 00BB     /* I Positive */
                 ; 0000 00BC     Uint_ADC_Value = read_adc(ADC_I_POSITIVE);
000102 e0a2      	LDI  R26,LOW(2)
000103 df7e      	RCALL _read_adc
000104 018f      	MOVW R16,R30
                 ; 0000 00BD     if(Uint_ADC_Value <= ADC_I_POSITIVE_ZERO)   Uint_ADC_Value = ADC_I_POSITIVE_ZERO - Uint_ADC_Value;
                +
000105 3709     +CPI R16 , LOW ( 889 )
000106 e0e3     +LDI R30 , HIGH ( 889 )
000107 071e     +CPC R17 , R30
                 	__CPWRN 16,17,889
000108 f430      	BRSH _0x20
000109 e7e8      	LDI  R30,LOW(888)
00010a e0f3      	LDI  R31,HIGH(888)
00010b 1be0      	SUB  R30,R16
00010c 0bf1      	SBC  R31,R17
00010d 018f      	MOVW R16,R30
                 ; 0000 00BE     else    Uint_ADC_Value = 0;
00010e c002      	RJMP _0x21
                 _0x20:
                +
00010f e000     +LDI R16 , LOW ( 0 )
000110 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 00BF     Uint_I_Positive_Buff[Uc_Buffer_count] = Uint_ADC_Value;
                 _0x21:
000111 2ded      	MOV  R30,R13
000112 d29f      	RCALL SUBOPT_0x15
000113 d22f      	RCALL SUBOPT_0x5
000114 8300      	ST   Z,R16
000115 8311      	STD  Z+1,R17
                 ; 0000 00C0     if(Uint_Timer_Display >= TIME_UPDATE_DISPLAY)
000116 d210      	RCALL SUBOPT_0x1
000117 f180      	BRLO _0x22
                 ; 0000 00C1     {
                 ; 0000 00C2         /* Chuyen sang bo nho dem */
                 ; 0000 00C3         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
000118 e030      	LDI  R19,LOW(0)
                 _0x24:
000119 313e      	CPI  R19,30
00011a f438      	BRSH _0x25
                 ; 0000 00C4         {
                 ; 0000 00C5             Uint_Buff_Temp[Uc_Loop_count] = Uint_I_Positive_Buff[Uc_Loop_count];
00011b d22a      	RCALL SUBOPT_0x6
00011c d230      	RCALL SUBOPT_0x7
00011d 2fe3      	MOV  R30,R19
00011e d293      	RCALL SUBOPT_0x15
00011f d251      	RCALL SUBOPT_0xD
                 ; 0000 00C6         }
000120 5f3f      	SUBI R19,-1
000121 cff7      	RJMP _0x24
                 _0x25:
                 ; 0000 00C7         /* Sap xep bo nho dem tu min -> max */
                 ; 0000 00C8         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
000122 e030      	LDI  R19,LOW(0)
                 _0x27:
000123 313e      	CPI  R19,30
000124 f488      	BRSH _0x28
                 ; 0000 00C9         {
                 ; 0000 00CA             for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count < NUM_SAMPLE; Uc_Loop2_count++)
000125 2f23      	MOV  R18,R19
                 _0x2A:
000126 312e      	CPI  R18,30
000127 f460      	BRSH _0x2B
                 ; 0000 00CB             {
                 ; 0000 00CC                 if(Uint_Buff_Temp[Uc_Loop_count] > Uint_Buff_Temp[Uc_Loop2_count])
000128 d21d      	RCALL SUBOPT_0x6
000129 d22e      	RCALL SUBOPT_0xA
00012a f438      	BRSH _0x2C
                 ; 0000 00CD                 {
                 ; 0000 00CE                     Uint_temp = Uint_Buff_Temp[Uc_Loop_count];
00012b d21a      	RCALL SUBOPT_0x6
00012c d239      	RCALL SUBOPT_0xB
                 ; 0000 00CF                     Uint_Buff_Temp[Uc_Loop_count] = Uint_Buff_Temp[Uc_Loop2_count];
00012d d21f      	RCALL SUBOPT_0x7
00012e d23b      	RCALL SUBOPT_0xC
00012f d241      	RCALL SUBOPT_0xD
                 ; 0000 00D0                     Uint_Buff_Temp[Uc_Loop2_count] = Uint_temp;
000130 d239      	RCALL SUBOPT_0xC
000131 d241      	RCALL SUBOPT_0xE
                 ; 0000 00D1                 }
                 ; 0000 00D2             }
                 _0x2C:
000132 5f2f      	SUBI R18,-1
000133 cff2      	RJMP _0x2A
                 _0x2B:
                 ; 0000 00D3         }
000134 5f3f      	SUBI R19,-1
000135 cfed      	RJMP _0x27
                 _0x28:
                 ; 0000 00D4         /* Low filter & hight filter */
                 ; 0000 00D5         Ul_Sum = 0;
000136 d240      	RCALL SUBOPT_0xF
                 ; 0000 00D6         for(Uc_Loop_count = NUM_FILTER; Uc_Loop_count < (NUM_SAMPLE-NUM_FILTER); Uc_Loop_count++)
                 _0x2E:
000137 3134      	CPI  R19,20
000138 f420      	BRSH _0x2F
                 ; 0000 00D7         {
                 ; 0000 00D8             Ul_Sum += Uint_Buff_Temp[Uc_Loop_count];
000139 d20c      	RCALL SUBOPT_0x6
00013a d246      	RCALL SUBOPT_0x10
                 ; 0000 00D9         }
00013b 5f3f      	SUBI R19,-1
00013c cffa      	RJMP _0x2E
                 _0x2F:
                 ; 0000 00DA         Uint_data_led4 = (unsigned int)((float)Ul_Sum*ADC_I_POSITIVE_RATIO/(NUM_SAMPLE-2*NUM_FILTER));
00013d d258      	RCALL SUBOPT_0x11
                +
00013e efaf     +LDI R26 , LOW ( 0x404397FF )
00013f e9b7     +LDI R27 , HIGH ( 0x404397FF )
000140 e483     +LDI R24 , BYTE3 ( 0x404397FF )
000141 e490     +LDI R25 , BYTE4 ( 0x404397FF )
                 	__GETD2N 0x404397FF
000142 d37e      	RCALL __MULF12
000143 d25c      	RCALL SUBOPT_0x12
000144 93e0 0206 	STS  _Uint_data_led4,R30
000146 93f0 0207 	STS  _Uint_data_led4+1,R31
                 ; 0000 00DB         // Uint_data_led4 = (unsigned int)((float)Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER));
                 ; 0000 00DC     }
                 ; 0000 00DD     if(Uint_data_led4 > ADC_I_POSITIVE_SET)
                 _0x22:
000148 d26f      	RCALL SUBOPT_0x16
000149 d264      	RCALL SUBOPT_0x14
00014a f048      	BRLO _0x30
                 ; 0000 00DE     {
                 ; 0000 00DF         Uc_I_Positive_Over++;
00014b 9453      	INC  R5
                 ; 0000 00E0         if(Uc_I_Positive_Over > 10)
00014c e0ea      	LDI  R30,LOW(10)
00014d 15e5      	CP   R30,R5
00014e f420      	BRSH _0x31
                 ; 0000 00E1         {
                 ; 0000 00E2             Uc_I_Positive_Over = 11;
00014f e0eb      	LDI  R30,LOW(11)
000150 2e5e      	MOV  R5,R30
                 ; 0000 00E3             Uc_I_Positive_Under = 0;
000151 2499      	CLR  R9
                 ; 0000 00E4             Bit_I_Positive_Warning = 1;
000152 9af0      	SBI  0x1E,0
                 ; 0000 00E5         }
                 ; 0000 00E6     }
                 _0x31:
                 ; 0000 00E7     else
000153 c008      	RJMP _0x34
                 _0x30:
                 ; 0000 00E8     {
                 ; 0000 00E9         Uc_I_Positive_Under++;
000154 9493      	INC  R9
                 ; 0000 00EA         if(Uc_I_Positive_Under > 10)
000155 e0ea      	LDI  R30,LOW(10)
000156 15e9      	CP   R30,R9
000157 f420      	BRSH _0x35
                 ; 0000 00EB         {
                 ; 0000 00EC             Uc_I_Positive_Under = 11;
000158 e0eb      	LDI  R30,LOW(11)
000159 2e9e      	MOV  R9,R30
                 ; 0000 00ED             Uc_I_Positive_Over = 0;
00015a 2455      	CLR  R5
                 ; 0000 00EE             Bit_I_Positive_Warning = 0;
00015b 98f0      	CBI  0x1E,0
                 ; 0000 00EF         }
                 ; 0000 00F0     }
                 _0x35:
                 _0x34:
                 ; 0000 00F1     /* U Negative */
                 ; 0000 00F2     Uint_U_Negative_Buff[Uc_Buffer_count] = read_adc(ADC_U_NEGATIVE);
00015c 2ded      	MOV  R30,R13
00015d d25f      	RCALL SUBOPT_0x17
00015e d1e4      	RCALL SUBOPT_0x5
00015f 93ff      	PUSH R31
000160 93ef      	PUSH R30
000161 e0a3      	LDI  R26,LOW(3)
000162 df1f      	RCALL _read_adc
000163 91af      	POP  R26
000164 91bf      	POP  R27
000165 93ed      	ST   X+,R30
000166 93fc      	ST   X,R31
                 ; 0000 00F3     if(Uint_Timer_Display >= TIME_UPDATE_DISPLAY)
000167 d1bf      	RCALL SUBOPT_0x1
000168 f158      	BRLO _0x38
                 ; 0000 00F4     {
                 ; 0000 00F5         /* Chuyen sang bo nho dem */
                 ; 0000 00F6         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
000169 e030      	LDI  R19,LOW(0)
                 _0x3A:
00016a 313e      	CPI  R19,30
00016b f438      	BRSH _0x3B
                 ; 0000 00F7         {
                 ; 0000 00F8             Uint_Buff_Temp[Uc_Loop_count] = Uint_U_Negative_Buff[Uc_Loop_count];
00016c d1d9      	RCALL SUBOPT_0x6
00016d d1df      	RCALL SUBOPT_0x7
00016e 2fe3      	MOV  R30,R19
00016f d24d      	RCALL SUBOPT_0x17
000170 d200      	RCALL SUBOPT_0xD
                 ; 0000 00F9         }
000171 5f3f      	SUBI R19,-1
000172 cff7      	RJMP _0x3A
                 _0x3B:
                 ; 0000 00FA         /* Sap xep bo nho dem tu min -> max */
                 ; 0000 00FB         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
000173 e030      	LDI  R19,LOW(0)
                 _0x3D:
000174 313e      	CPI  R19,30
000175 f488      	BRSH _0x3E
                 ; 0000 00FC         {
                 ; 0000 00FD             for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count < NUM_SAMPLE; Uc_Loop2_count++)
000176 2f23      	MOV  R18,R19
                 _0x40:
000177 312e      	CPI  R18,30
000178 f460      	BRSH _0x41
                 ; 0000 00FE             {
                 ; 0000 00FF                 if(Uint_Buff_Temp[Uc_Loop_count] > Uint_Buff_Temp[Uc_Loop2_count])
000179 d1cc      	RCALL SUBOPT_0x6
00017a d1dd      	RCALL SUBOPT_0xA
00017b f438      	BRSH _0x42
                 ; 0000 0100                 {
                 ; 0000 0101                     Uint_temp = Uint_Buff_Temp[Uc_Loop_count];
00017c d1c9      	RCALL SUBOPT_0x6
00017d d1e8      	RCALL SUBOPT_0xB
                 ; 0000 0102                     Uint_Buff_Temp[Uc_Loop_count] = Uint_Buff_Temp[Uc_Loop2_count];
00017e d1ce      	RCALL SUBOPT_0x7
00017f d1ea      	RCALL SUBOPT_0xC
000180 d1f0      	RCALL SUBOPT_0xD
                 ; 0000 0103                     Uint_Buff_Temp[Uc_Loop2_count] = Uint_temp;
000181 d1e8      	RCALL SUBOPT_0xC
000182 d1f0      	RCALL SUBOPT_0xE
                 ; 0000 0104                 }
                 ; 0000 0105             }
                 _0x42:
000183 5f2f      	SUBI R18,-1
000184 cff2      	RJMP _0x40
                 _0x41:
                 ; 0000 0106         }
000185 5f3f      	SUBI R19,-1
000186 cfed      	RJMP _0x3D
                 _0x3E:
                 ; 0000 0107         /* Low filter & hight filter */
                 ; 0000 0108         Ul_Sum = 0;
000187 d1ef      	RCALL SUBOPT_0xF
                 ; 0000 0109         for(Uc_Loop_count = NUM_FILTER; Uc_Loop_count < (NUM_SAMPLE-NUM_FILTER); Uc_Loop_count++)
                 _0x44:
000188 3134      	CPI  R19,20
000189 f420      	BRSH _0x45
                 ; 0000 010A         {
                 ; 0000 010B             Ul_Sum += Uint_Buff_Temp[Uc_Loop_count];
00018a d1bb      	RCALL SUBOPT_0x6
00018b d1f5      	RCALL SUBOPT_0x10
                 ; 0000 010C         }
00018c 5f3f      	SUBI R19,-1
00018d cffa      	RJMP _0x44
                 _0x45:
                 ; 0000 010D         Uint_data_led1 = (unsigned int)((float)Ul_Sum*ADC_U_NEGATIVE_RATIO/(1024*(NUM_SAMPLE-2*NUM_FILTER)));
00018e d207      	RCALL SUBOPT_0x11
00018f d233      	RCALL SUBOPT_0x18
000190 93e0 0200 	STS  _Uint_data_led1,R30
000192 93f0 0201 	STS  _Uint_data_led1+1,R31
                 ; 0000 010E     }
                 ; 0000 010F     if(Uint_data_led1 > ADC_U_NEGATIVE_SET)
                 _0x38:
000194 d23c      	RCALL SUBOPT_0x19
000195 d218      	RCALL SUBOPT_0x14
000196 f048      	BRLO _0x46
                 ; 0000 0110     {
                 ; 0000 0111         Uc_U_Negative_Over++;
000197 9463      	INC  R6
                 ; 0000 0112         if(Uc_U_Negative_Over > 10)
000198 e0ea      	LDI  R30,LOW(10)
000199 15e6      	CP   R30,R6
00019a f420      	BRSH _0x47
                 ; 0000 0113         {
                 ; 0000 0114             Uc_U_Negative_Over = 11;
00019b e0eb      	LDI  R30,LOW(11)
00019c 2e6e      	MOV  R6,R30
                 ; 0000 0115             Uc_U_Negative_Under = 0;
00019d 24aa      	CLR  R10
                 ; 0000 0116             Bit_U_Negative_Warning = 1;
00019e 9af3      	SBI  0x1E,3
                 ; 0000 0117         }
                 ; 0000 0118     }
                 _0x47:
                 ; 0000 0119     else
00019f c008      	RJMP _0x4A
                 _0x46:
                 ; 0000 011A     {
                 ; 0000 011B         Uc_U_Negative_Under++;
0001a0 94a3      	INC  R10
                 ; 0000 011C         if(Uc_U_Negative_Under > 10)
0001a1 e0ea      	LDI  R30,LOW(10)
0001a2 15ea      	CP   R30,R10
0001a3 f420      	BRSH _0x4B
                 ; 0000 011D         {
                 ; 0000 011E             Uc_U_Negative_Under = 11;
0001a4 e0eb      	LDI  R30,LOW(11)
0001a5 2eae      	MOV  R10,R30
                 ; 0000 011F             Uc_U_Negative_Over = 0;
0001a6 2466      	CLR  R6
                 ; 0000 0120             Bit_U_Negative_Warning = 0;
0001a7 98f3      	CBI  0x1E,3
                 ; 0000 0121         }
                 ; 0000 0122     }
                 _0x4B:
                 _0x4A:
                 ; 0000 0123     /* U Positive */
                 ; 0000 0124     Uint_U_Positive_Buff[Uc_Buffer_count] = read_adc(ADC_U_POSITIVE);
0001a8 2ded      	MOV  R30,R13
0001a9 d22c      	RCALL SUBOPT_0x1A
0001aa d198      	RCALL SUBOPT_0x5
0001ab 93ff      	PUSH R31
0001ac 93ef      	PUSH R30
0001ad e0a1      	LDI  R26,LOW(1)
0001ae ded3      	RCALL _read_adc
0001af 91af      	POP  R26
0001b0 91bf      	POP  R27
0001b1 93ed      	ST   X+,R30
0001b2 93fc      	ST   X,R31
                 ; 0000 0125     if(Uint_Timer_Display >= TIME_UPDATE_DISPLAY)
0001b3 d173      	RCALL SUBOPT_0x1
0001b4 f180      	BRLO _0x4E
                 ; 0000 0126     {
                 ; 0000 0127         /* Chuyen sang bo nho dem */
                 ; 0000 0128         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
0001b5 e030      	LDI  R19,LOW(0)
                 _0x50:
0001b6 313e      	CPI  R19,30
0001b7 f438      	BRSH _0x51
                 ; 0000 0129         {
                 ; 0000 012A             Uint_Buff_Temp[Uc_Loop_count] = Uint_U_Positive_Buff[Uc_Loop_count];
0001b8 d18d      	RCALL SUBOPT_0x6
0001b9 d193      	RCALL SUBOPT_0x7
0001ba 2fe3      	MOV  R30,R19
0001bb d21a      	RCALL SUBOPT_0x1A
0001bc d1b4      	RCALL SUBOPT_0xD
                 ; 0000 012B         }
0001bd 5f3f      	SUBI R19,-1
0001be cff7      	RJMP _0x50
                 _0x51:
                 ; 0000 012C         /* Sap xep bo nho dem tu min -> max */
                 ; 0000 012D         for(Uc_Loop_count = 0; Uc_Loop_count < NUM_SAMPLE; Uc_Loop_count++)
0001bf e030      	LDI  R19,LOW(0)
                 _0x53:
0001c0 313e      	CPI  R19,30
0001c1 f488      	BRSH _0x54
                 ; 0000 012E         {
                 ; 0000 012F             for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count < NUM_SAMPLE; Uc_Loop2_count++)
0001c2 2f23      	MOV  R18,R19
                 _0x56:
0001c3 312e      	CPI  R18,30
0001c4 f460      	BRSH _0x57
                 ; 0000 0130             {
                 ; 0000 0131                 if(Uint_Buff_Temp[Uc_Loop_count] > Uint_Buff_Temp[Uc_Loop2_count])
0001c5 d180      	RCALL SUBOPT_0x6
0001c6 d191      	RCALL SUBOPT_0xA
0001c7 f438      	BRSH _0x58
                 ; 0000 0132                 {
                 ; 0000 0133                     Uint_temp = Uint_Buff_Temp[Uc_Loop_count];
0001c8 d17d      	RCALL SUBOPT_0x6
0001c9 d19c      	RCALL SUBOPT_0xB
                 ; 0000 0134                     Uint_Buff_Temp[Uc_Loop_count] = Uint_Buff_Temp[Uc_Loop2_count];
0001ca d182      	RCALL SUBOPT_0x7
0001cb d19e      	RCALL SUBOPT_0xC
0001cc d1a4      	RCALL SUBOPT_0xD
                 ; 0000 0135                     Uint_Buff_Temp[Uc_Loop2_count] = Uint_temp;
0001cd d19c      	RCALL SUBOPT_0xC
0001ce d1a4      	RCALL SUBOPT_0xE
                 ; 0000 0136                 }
                 ; 0000 0137             }
                 _0x58:
0001cf 5f2f      	SUBI R18,-1
0001d0 cff2      	RJMP _0x56
                 _0x57:
                 ; 0000 0138         }
0001d1 5f3f      	SUBI R19,-1
0001d2 cfed      	RJMP _0x53
                 _0x54:
                 ; 0000 0139         /* Low filter & hight filter */
                 ; 0000 013A         Ul_Sum = 0;
0001d3 d1a3      	RCALL SUBOPT_0xF
                 ; 0000 013B         for(Uc_Loop_count = NUM_FILTER; Uc_Loop_count < (NUM_SAMPLE-NUM_FILTER); Uc_Loop_count++)
                 _0x5A:
0001d4 3134      	CPI  R19,20
0001d5 f420      	BRSH _0x5B
                 ; 0000 013C         {
                 ; 0000 013D             Ul_Sum += Uint_Buff_Temp[Uc_Loop_count];
0001d6 d16f      	RCALL SUBOPT_0x6
0001d7 d1a9      	RCALL SUBOPT_0x10
                 ; 0000 013E         }
0001d8 5f3f      	SUBI R19,-1
0001d9 cffa      	RJMP _0x5A
                 _0x5B:
                 ; 0000 013F         Uint_data_led3 = (unsigned int)((float)Ul_Sum*ADC_U_POSITIVE_RATIO/(1024*(NUM_SAMPLE-2*NUM_FILTER)));
0001da d1bb      	RCALL SUBOPT_0x11
0001db d1e7      	RCALL SUBOPT_0x18
0001dc 93e0 0204 	STS  _Uint_data_led3,R30
0001de 93f0 0205 	STS  _Uint_data_led3+1,R31
                 ; 0000 0140         Uint_Timer_Display = 0;
0001e0 e0e0      	LDI  R30,LOW(0)
0001e1 93e0 02fa 	STS  _Uint_Timer_Display,R30
0001e3 93e0 02fb 	STS  _Uint_Timer_Display+1,R30
                 ; 0000 0141     }
                 ; 0000 0142     if(Uint_data_led3 > ADC_U_POSITIVE_SET)
                 _0x4E:
0001e5 d1f6      	RCALL SUBOPT_0x1B
0001e6 d1c7      	RCALL SUBOPT_0x14
0001e7 f048      	BRLO _0x5C
                 ; 0000 0143     {
                 ; 0000 0144         Uc_U_Positive_Over++;
0001e8 9443      	INC  R4
                 ; 0000 0145         if(Uc_U_Positive_Over > 10)
0001e9 e0ea      	LDI  R30,LOW(10)
0001ea 15e4      	CP   R30,R4
0001eb f420      	BRSH _0x5D
                 ; 0000 0146         {
                 ; 0000 0147             Uc_U_Positive_Over = 11;
0001ec e0eb      	LDI  R30,LOW(11)
0001ed 2e4e      	MOV  R4,R30
                 ; 0000 0148             Uc_U_Positive_Under = 0;
0001ee 2488      	CLR  R8
                 ; 0000 0149             Bit_U_Positive_Warning = 1;
0001ef 9af1      	SBI  0x1E,1
                 ; 0000 014A         }
                 ; 0000 014B     }
                 _0x5D:
                 ; 0000 014C     else
0001f0 c008      	RJMP _0x60
                 _0x5C:
                 ; 0000 014D     {
                 ; 0000 014E         Uc_U_Positive_Under++;
0001f1 9483      	INC  R8
                 ; 0000 014F         if(Uc_U_Positive_Under > 10)
0001f2 e0ea      	LDI  R30,LOW(10)
0001f3 15e8      	CP   R30,R8
0001f4 f420      	BRSH _0x61
                 ; 0000 0150         {
                 ; 0000 0151             Uc_U_Positive_Under = 11;
0001f5 e0eb      	LDI  R30,LOW(11)
0001f6 2e8e      	MOV  R8,R30
                 ; 0000 0152             Uc_U_Positive_Over = 0;
0001f7 2444      	CLR  R4
                 ; 0000 0153             Bit_U_Positive_Warning = 0;
0001f8 98f1      	CBI  0x1E,1
                 ; 0000 0154         }
                 ; 0000 0155     }
                 _0x61:
                 _0x60:
                 ; 0000 0156     Uc_Buffer_count++;
0001f9 94d3      	INC  R13
                 ; 0000 0157     if(Uc_Buffer_count >= NUM_SAMPLE)    Uc_Buffer_count = 0;
0001fa e1ee      	LDI  R30,LOW(30)
0001fb 16de      	CP   R13,R30
0001fc f008      	BRLO _0x64
0001fd 24dd      	CLR  R13
                 ; 0000 0158 
                 ; 0000 0159     if(Bit_I_Negative_Warning || Bit_I_Positive_Warning || Bit_U_Positive_Warning || Bit_U_Negative_Warning)
                 _0x64:
0001fe 99f2      	SBIC 0x1E,2
0001ff c006      	RJMP _0x66
000200 99f0      	SBIC 0x1E,0
000201 c004      	RJMP _0x66
000202 99f1      	SBIC 0x1E,1
000203 c002      	RJMP _0x66
000204 9bf3      	SBIS 0x1E,3
000205 c007      	RJMP _0x65
                 _0x66:
                 ; 0000 015A     {
                 ; 0000 015B         PROTECT_ON;
000206 9a44      	SBI  0x8,4
                 ; 0000 015C         Uint_Turnoff_relay_timer = 0;
000207 e0e0      	LDI  R30,LOW(0)
000208 93e0 02f8 	STS  _Uint_Turnoff_relay_timer,R30
00020a 93e0 02f9 	STS  _Uint_Turnoff_relay_timer+1,R30
                 ; 0000 015D     }
                 ; 0000 015E     else if(Uint_Turnoff_relay_timer >= 500)
00020c c003      	RJMP _0x6A
                 _0x65:
00020d d127      	RCALL SUBOPT_0x3
00020e f008      	BRLO _0x6B
                 ; 0000 015F     {
                 ; 0000 0160         PROTECT_OFF;
00020f 9844      	CBI  0x8,4
                 ; 0000 0161     }
                 ; 0000 0162     delay_ms(10);
                 _0x6B:
                 _0x6A:
000210 e0aa      	LDI  R26,LOW(10)
000211 e0b0      	LDI  R27,0
000212 d210      	RCALL _delay_ms
                 ; 0000 0163 }
000213 d37b      	RCALL __LOADLOCR6
000214 96ef      	ADIW R28,63
000215 9627      	ADIW R28,7
000216 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0166 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0167     // Declare your local variables here
                 ; 0000 0168 
                 ; 0000 0169     // Crystal Oscillator division factor: 1
                 ; 0000 016A     #pragma optsize-
                 ; 0000 016B     CLKPR=(1<<CLKPCE);
000217 e8e0      	LDI  R30,LOW(128)
000218 93e0 0061 	STS  97,R30
                 ; 0000 016C     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
00021a e0e0      	LDI  R30,LOW(0)
00021b 93e0 0061 	STS  97,R30
                 ; 0000 016D     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 016E     #pragma optsize+
                 ; 0000 016F     #endif
                 ; 0000 0170     // Input/Output Ports initialization
                 ; 0000 0171     // Port B initialization
                 ; 0000 0172     // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0173     DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00021d e2e8      	LDI  R30,LOW(40)
00021e b9e4      	OUT  0x4,R30
                 ; 0000 0174     // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 0175     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00021f e0e0      	LDI  R30,LOW(0)
000220 b9e5      	OUT  0x5,R30
                 ; 0000 0176 
                 ; 0000 0177     // Port C initialization
                 ; 0000 0178     // Function: Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0179     DDRC=(0<<DDC6) | (0<<DDC5) | (1<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000221 e1e0      	LDI  R30,LOW(16)
000222 b9e7      	OUT  0x7,R30
                 ; 0000 017A     // State: Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 017B     PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000223 e0e0      	LDI  R30,LOW(0)
000224 b9e8      	OUT  0x8,R30
                 ; 0000 017C 
                 ; 0000 017D     // Port D initialization
                 ; 0000 017E     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=In
                 ; 0000 017F     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
000225 e0e4      	LDI  R30,LOW(4)
000226 b9ea      	OUT  0xA,R30
                 ; 0000 0180     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0000 0181     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000227 e0e0      	LDI  R30,LOW(0)
000228 b9eb      	OUT  0xB,R30
                 ; 0000 0182 
                 ; 0000 0183     // Timer/Counter 0 initialization
                 ; 0000 0184     // Clock source: System Clock
                 ; 0000 0185     // Clock value: Timer 0 Stopped
                 ; 0000 0186     // Mode: Normal top=0xFF
                 ; 0000 0187     // OC0A output: Disconnected
                 ; 0000 0188     // OC0B output: Disconnected
                 ; 0000 0189     TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
000229 bde4      	OUT  0x24,R30
                 ; 0000 018A     TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00022a bde5      	OUT  0x25,R30
                 ; 0000 018B     TCNT0=0x00;
00022b bde6      	OUT  0x26,R30
                 ; 0000 018C     OCR0A=0x00;
00022c bde7      	OUT  0x27,R30
                 ; 0000 018D     OCR0B=0x00;
00022d bde8      	OUT  0x28,R30
                 ; 0000 018E 
                 ; 0000 018F     // Timer/Counter 1 initialization
                 ; 0000 0190     // Clock source: System Clock
                 ; 0000 0191     // Clock value: 8000,000 kHz
                 ; 0000 0192     // Mode: Normal top=0xFFFF
                 ; 0000 0193     // OC1A output: Disconnected
                 ; 0000 0194     // OC1B output: Disconnected
                 ; 0000 0195     // Noise Canceler: Off
                 ; 0000 0196     // Input Capture on Falling Edge
                 ; 0000 0197     // Timer Period: 2 ms
                 ; 0000 0198     // Timer1 Overflow Interrupt: On
                 ; 0000 0199     // Input Capture Interrupt: Off
                 ; 0000 019A     // Compare A Match Interrupt: Off
                 ; 0000 019B     // Compare B Match Interrupt: Off
                 ; 0000 019C     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00022e 93e0 0080 	STS  128,R30
                 ; 0000 019D     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000230 e0e1      	LDI  R30,LOW(1)
000231 93e0 0081 	STS  129,R30
                 ; 0000 019E     TCNT1H=0xC1;
000233 ece1      	LDI  R30,LOW(193)
000234 d0ec      	RCALL SUBOPT_0x0
                 ; 0000 019F     TCNT1L=0x80;
                 ; 0000 01A0     ICR1H=0x00;
000235 e0e0      	LDI  R30,LOW(0)
000236 93e0 0087 	STS  135,R30
                 ; 0000 01A1     ICR1L=0x00;
000238 93e0 0086 	STS  134,R30
                 ; 0000 01A2     OCR1AH=0x00;
00023a 93e0 0089 	STS  137,R30
                 ; 0000 01A3     OCR1AL=0x00;
00023c 93e0 0088 	STS  136,R30
                 ; 0000 01A4     OCR1BH=0x00;
00023e 93e0 008b 	STS  139,R30
                 ; 0000 01A5     OCR1BL=0x00;
000240 93e0 008a 	STS  138,R30
                 ; 0000 01A6 
                 ; 0000 01A7     // Timer/Counter 2 initialization
                 ; 0000 01A8     // Clock source: System Clock
                 ; 0000 01A9     // Clock value: Timer2 Stopped
                 ; 0000 01AA     // Mode: Normal top=0xFF
                 ; 0000 01AB     // OC2A output: Disconnected
                 ; 0000 01AC     // OC2B output: Disconnected
                 ; 0000 01AD     ASSR=(0<<EXCLK) | (0<<AS2);
000242 93e0 00b6 	STS  182,R30
                 ; 0000 01AE     TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
000244 93e0 00b0 	STS  176,R30
                 ; 0000 01AF     TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000246 93e0 00b1 	STS  177,R30
                 ; 0000 01B0     TCNT2=0x00;
000248 93e0 00b2 	STS  178,R30
                 ; 0000 01B1     OCR2A=0x00;
00024a 93e0 00b3 	STS  179,R30
                 ; 0000 01B2     OCR2B=0x00;
00024c 93e0 00b4 	STS  180,R30
                 ; 0000 01B3 
                 ; 0000 01B4     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 01B5     TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
00024e 93e0 006e 	STS  110,R30
                 ; 0000 01B6 
                 ; 0000 01B7     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 01B8     TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
000250 e0e1      	LDI  R30,LOW(1)
000251 93e0 006f 	STS  111,R30
                 ; 0000 01B9 
                 ; 0000 01BA     // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 01BB     TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
000253 e0e0      	LDI  R30,LOW(0)
000254 93e0 0070 	STS  112,R30
                 ; 0000 01BC 
                 ; 0000 01BD     // External Interrupt(s) initialization
                 ; 0000 01BE     // INT0: Off
                 ; 0000 01BF     // INT1: Off
                 ; 0000 01C0     // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 01C1     // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 01C2     // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 01C3     EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000256 93e0 0069 	STS  105,R30
                 ; 0000 01C4     EIMSK=(0<<INT1) | (0<<INT0);
000258 bbed      	OUT  0x1D,R30
                 ; 0000 01C5     PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
000259 93e0 0068 	STS  104,R30
                 ; 0000 01C6 
                 ; 0000 01C7     // USART initialization
                 ; 0000 01C8     // USART disabled
                 ; 0000 01C9     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00025b 93e0 00c1 	STS  193,R30
                 ; 0000 01CA 
                 ; 0000 01CB     // Analog Comparator initialization
                 ; 0000 01CC     // Analog Comparator: Off
                 ; 0000 01CD     // The Analog Comparator's positive input is
                 ; 0000 01CE     // connected to the AIN0 pin
                 ; 0000 01CF     // The Analog Comparator's negative input is
                 ; 0000 01D0     // connected to the AIN1 pin
                 ; 0000 01D1     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00025d e8e0      	LDI  R30,LOW(128)
00025e bfe0      	OUT  0x30,R30
                 ; 0000 01D2     ADCSRB=(0<<ACME);
00025f d181      	RCALL SUBOPT_0x1C
                 ; 0000 01D3     // Digital input buffer on AIN0: On
                 ; 0000 01D4     // Digital input buffer on AIN1: On
                 ; 0000 01D5     DIDR1=(0<<AIN0D) | (0<<AIN1D);
000260 93e0 007f 	STS  127,R30
                 ; 0000 01D6 
                 ; 0000 01D7 
                 ; 0000 01D8     // ADC initialization
                 ; 0000 01D9     // ADC Clock frequency: 1000,000 kHz
                 ; 0000 01DA     // ADC Voltage Reference: AREF pin
                 ; 0000 01DB     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 01DC     // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 01DD     // ADC4: On, ADC5: On
                 ; 0000 01DE     DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
000262 e0e0      	LDI  R30,LOW(0)
000263 93e0 007e 	STS  126,R30
                 ; 0000 01DF     ADMUX=ADC_VREF_TYPE;
000265 93e0 007c 	STS  124,R30
                 ; 0000 01E0     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000267 e8e3      	LDI  R30,LOW(131)
000268 93e0 007a 	STS  122,R30
                 ; 0000 01E1     ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00026a d176      	RCALL SUBOPT_0x1C
                 ; 0000 01E2 
                 ; 0000 01E3 
                 ; 0000 01E4     // SPI initialization
                 ; 0000 01E5     // SPI disabled
                 ; 0000 01E6     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00026b bdec      	OUT  0x2C,R30
                 ; 0000 01E7 
                 ; 0000 01E8     // TWI initialization
                 ; 0000 01E9     // TWI disabled
                 ; 0000 01EA     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00026c e0e0      	LDI  R30,LOW(0)
00026d 93e0 00bc 	STS  188,R30
                 ; 0000 01EB 
                 ; 0000 01EC     // Global enable interrupts
                 ; 0000 01ED     #asm("sei")
00026f 9478      	sei
                 ; 0000 01EE     PROTECT_OFF;
000270 9844      	CBI  0x8,4
                 ; 0000 01EF     while (1)
                 _0x70:
                 ; 0000 01F0     {
                 ; 0000 01F1     // Place your code here
                 ; 0000 01F2         PROTECT();
000271 de2b      	RCALL _PROTECT
                 ; 0000 01F3     }
000272 cffe      	RJMP _0x70
                 ; 0000 01F4 }
                 _0x73:
000273 cfff      	RJMP _0x73
                 ; .FEND
                 ;#include "scan_led.h"
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;unsigned int    Uint_data_led1 = 0;
                 ;unsigned int    Uint_data_led2 = 0;
                 ;unsigned int    Uint_data_led3 = 0;
                 ;unsigned int    Uint_data_led4 = 0;
                 ;unsigned char   Uc_Select_led=1;
                 ;
                 ;unsigned char   BCDLED[11]={0xF9,0x21,0xEA,0x6B,0x33,0x5B,0xDB,0x29,0xFB,0x7B,0x02};
                 
                 	.DSEG
                 ;
                 ;/* Day du lieu quet led qua duong spi_software
                 ;Co thẻ day tu 1 den 3 byte du lieu.
                 ;Du lieu sau khi day ra day du moi tien hanh xuat du lieu
                 ;num_bytes : so byte duoc day ra
                 ;data_first : du lieu dau tien
                 ;data_second: du lieu thu 2
                 ;data_third ; du lieu thu 3
                 ;*/
                 ;void    SEND_DATA_LED(unsigned char num_bytes,unsigned char  byte_1,unsigned char  byte_2,unsigned char  byte_3)
                 ; 0001 0015 {
                 
                 	.CSEG
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0001 0016     unsigned char   i;
                 ; 0001 0017     unsigned char   data[6];
                 ; 0001 0018     for(i=0;i<6;i++)    data[i] = 0;
000274 93aa      	ST   -Y,R26
000275 9726      	SBIW R28,6
000276 931a      	ST   -Y,R17
                 ;	num_bytes -> Y+10
                 ;	byte_1 -> Y+9
                 ;	byte_2 -> Y+8
                 ;	byte_3 -> Y+7
                 ;	i -> R17
                 ;	data -> Y+1
000277 e010      	LDI  R17,LOW(0)
                 _0x20005:
000278 3016      	CPI  R17,6
000279 f428      	BRSH _0x20006
00027a d16a      	RCALL SUBOPT_0x1D
00027b e0e0      	LDI  R30,LOW(0)
00027c 93ec      	ST   X,R30
00027d 5f1f      	SUBI R17,-1
00027e cff9      	RJMP _0x20005
                 _0x20006:
                 ; 0001 0019 data[0] = byte_1;
00027f 85e9      	LDD  R30,Y+9
000280 83e9      	STD  Y+1,R30
                 ; 0001 001A     data[1] = byte_2;
000281 85e8      	LDD  R30,Y+8
000282 83ea      	STD  Y+2,R30
                 ; 0001 001B     data[2] = byte_3;
000283 81ef      	LDD  R30,Y+7
000284 83eb      	STD  Y+3,R30
                 ; 0001 001C 
                 ; 0001 001D     for(i=0;i<(num_bytes - 1);i++)    SPI_SENDBYTE(data[i],0);
000285 e010      	LDI  R17,LOW(0)
                 _0x20008:
000286 85ea      	LDD  R30,Y+10
000287 e0f0      	LDI  R31,0
000288 9731      	SBIW R30,1
000289 2fa1      	MOV  R26,R17
00028a e0b0      	LDI  R27,0
00028b 17ae      	CP   R26,R30
00028c 07bf      	CPC  R27,R31
00028d f43c      	BRGE _0x20009
00028e d156      	RCALL SUBOPT_0x1D
00028f 91ec      	LD   R30,X
000290 93ea      	ST   -Y,R30
000291 e0a0      	LDI  R26,LOW(0)
000292 d073      	RCALL _SPI_SENDBYTE
000293 5f1f      	SUBI R17,-1
000294 cff1      	RJMP _0x20008
                 _0x20009:
                 ; 0001 001E SPI_SENDBYTE(data[i],1);
000295 d14f      	RCALL SUBOPT_0x1D
000296 91ec      	LD   R30,X
000297 93ea      	ST   -Y,R30
000298 e0a1      	LDI  R26,LOW(1)
000299 d06c      	RCALL _SPI_SENDBYTE
                 ; 0001 001F }
00029a 8118      	LDD  R17,Y+0
00029b 962b      	ADIW R28,11
00029c 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;/*
                 ;Ham quet led
                 ;num_led: Thu tu led
                 ;data: Du lieu hien thi tren led.
                 ;*/
                 ;void    SCAN_LED(void)
                 ; 0001 0028 {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0001 0029     unsigned char   byte1,byte2,byte3;
                 ; 0001 002A     unsigned char    data;
                 ; 0001 002B     unsigned char   bit_left;
                 ; 0001 002C     bit_left = 0x01;
00029d d2ea      	RCALL __SAVELOCR6
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
                 ;	data -> R18
                 ;	bit_left -> R21
00029e e051      	LDI  R21,LOW(1)
                 ; 0001 002D     byte1 = 0;
00029f e010      	LDI  R17,LOW(0)
                 ; 0001 002E     byte2 = 0;
0002a0 e000      	LDI  R16,LOW(0)
                 ; 0001 002F     byte3 = 0;
0002a1 e030      	LDI  R19,LOW(0)
                 ; 0001 0030 
                 ; 0001 0031     Uc_Select_led++;
0002a2 94c3      	INC  R12
                 ; 0001 0032     bit_left <<= (Uc_Select_led-1);
0002a3 2dec      	MOV  R30,R12
0002a4 50e1      	SUBI R30,LOW(1)
0002a5 2fa5      	MOV  R26,R21
0002a6 d2ba      	RCALL __LSLB12
0002a7 2f5e      	MOV  R21,R30
                 ; 0001 0033     if(Uc_Select_led > 8)
0002a8 e0e8      	LDI  R30,LOW(8)
0002a9 15ec      	CP   R30,R12
0002aa f418      	BRSH _0x2000A
                 ; 0001 0034     {
                 ; 0001 0035         Uc_Select_led = 1;
0002ab e0e1      	LDI  R30,LOW(1)
0002ac 2ece      	MOV  R12,R30
                 ; 0001 0036         bit_left = 0x01;
0002ad e051      	LDI  R21,LOW(1)
                 ; 0001 0037     }
                 ; 0001 0038     /* 7-seg 1*/
                 ; 0001 0039     data = Uint_data_led1/1000;
                 _0x2000A:
0002ae d122      	RCALL SUBOPT_0x19
0002af d13a      	RCALL SUBOPT_0x1E
                 ; 0001 003A     byte1 = BCDLED[10];
                 ; 0001 003B     // byte1 = 0xFE;
                 ; 0001 003C     if((byte1 & bit_left)) byte3 |= 0x04;
0002b0 f009      	BREQ _0x2000B
0002b1 6034      	ORI  R19,LOW(4)
                 ; 0001 003D     data = Uint_data_led1/100%10;
                 _0x2000B:
0002b2 d11e      	RCALL SUBOPT_0x19
0002b3 d13f      	RCALL SUBOPT_0x1F
                 ; 0001 003E     byte1 = BCDLED[data];
                 ; 0001 003F     // byte1 = 0x06;
                 ; 0001 0040     if(byte1 & bit_left) byte3 |= 0x08;
0002b4 d14b      	RCALL SUBOPT_0x20
0002b5 f009      	BREQ _0x2000C
0002b6 6038      	ORI  R19,LOW(8)
                 ; 0001 0041     data = Uint_data_led1/10%10;
                 _0x2000C:
0002b7 d119      	RCALL SUBOPT_0x19
0002b8 d14a      	RCALL SUBOPT_0x21
0002b9 d14c      	RCALL SUBOPT_0x22
                 ; 0001 0042     byte1 = BCDLED[data];
                 ; 0001 0043     byte1 |= 0x04;
0002ba d155      	RCALL SUBOPT_0x23
                 ; 0001 0044     // byte1 = 0x06;
                 ; 0001 0045     if(byte1 & bit_left) byte3 |= 0x10;
0002bb f009      	BREQ _0x2000D
0002bc 6130      	ORI  R19,LOW(16)
                 ; 0001 0046     data = Uint_data_led1%10;
                 _0x2000D:
0002bd d113      	RCALL SUBOPT_0x19
0002be d153      	RCALL SUBOPT_0x24
                 ; 0001 0047     byte1 = BCDLED[data];
                 ; 0001 0048     // byte1 = 0x06;
                 ; 0001 0049     if(byte1 & bit_left) byte2 |= 0x10;
0002bf f009      	BREQ _0x2000E
0002c0 6100      	ORI  R16,LOW(16)
                 ; 0001 004A     /* 7-seg 2 */
                 ; 0001 004B     data = Uint_data_led2/1000;
                 _0x2000E:
0002c1 d0e7      	RCALL SUBOPT_0x13
0002c2 d127      	RCALL SUBOPT_0x1E
                 ; 0001 004C     byte1 = BCDLED[10];
                 ; 0001 004D     if(byte1 & bit_left) byte2 |= 0x20;
0002c3 f009      	BREQ _0x2000F
0002c4 6200      	ORI  R16,LOW(32)
                 ; 0001 004E     data = Uint_data_led2/100%10;
                 _0x2000F:
0002c5 d0e3      	RCALL SUBOPT_0x13
0002c6 d12c      	RCALL SUBOPT_0x1F
                 ; 0001 004F     byte1 = BCDLED[data];
                 ; 0001 0050     byte1 |= 0x04;
0002c7 d148      	RCALL SUBOPT_0x23
                 ; 0001 0051     if(byte1 & bit_left) byte2 |= 0x08;
0002c8 f009      	BREQ _0x20010
0002c9 6008      	ORI  R16,LOW(8)
                 ; 0001 0052     data = Uint_data_led2/10%10;
                 _0x20010:
0002ca d0de      	RCALL SUBOPT_0x13
0002cb d137      	RCALL SUBOPT_0x21
0002cc d139      	RCALL SUBOPT_0x22
                 ; 0001 0053     byte1 = BCDLED[data];
                 ; 0001 0054     if(byte1 & bit_left) byte2 |= 0x04;
0002cd d132      	RCALL SUBOPT_0x20
0002ce f009      	BREQ _0x20011
0002cf 6004      	ORI  R16,LOW(4)
                 ; 0001 0055     data = Uint_data_led2%10;
                 _0x20011:
0002d0 d0d8      	RCALL SUBOPT_0x13
0002d1 d140      	RCALL SUBOPT_0x24
                 ; 0001 0056     byte1 = BCDLED[data];
                 ; 0001 0057     if(byte1 & bit_left) byte2 |= 0x01;
0002d2 f009      	BREQ _0x20012
0002d3 6001      	ORI  R16,LOW(1)
                 ; 0001 0058     /* 7-seg 3 */
                 ; 0001 0059     data = Uint_data_led3/1000;
                 _0x20012:
0002d4 d107      	RCALL SUBOPT_0x1B
0002d5 d144      	RCALL SUBOPT_0x25
                 ; 0001 005A     byte1 = BCDLED[data];
                 ; 0001 005B     if(byte1 & bit_left) byte3 |= 0x20;
0002d6 f009      	BREQ _0x20013
0002d7 6230      	ORI  R19,LOW(32)
                 ; 0001 005C     data = Uint_data_led3/100%10;
                 _0x20013:
0002d8 d103      	RCALL SUBOPT_0x1B
0002d9 d119      	RCALL SUBOPT_0x1F
                 ; 0001 005D     byte1 = BCDLED[data];
                 ; 0001 005E     // byte1 |= 0x80;
                 ; 0001 005F     if(byte1 & bit_left) byte3 |= 0x40;
0002da d125      	RCALL SUBOPT_0x20
0002db f009      	BREQ _0x20014
0002dc 6430      	ORI  R19,LOW(64)
                 ; 0001 0060     data = Uint_data_led3/10%10;
                 _0x20014:
0002dd d0fe      	RCALL SUBOPT_0x1B
0002de d124      	RCALL SUBOPT_0x21
0002df d126      	RCALL SUBOPT_0x22
                 ; 0001 0061     byte1 = BCDLED[data];
                 ; 0001 0062     byte1 |= 0x04;
0002e0 d12f      	RCALL SUBOPT_0x23
                 ; 0001 0063     if(byte1 & bit_left) byte3 |= 0x80;
0002e1 f009      	BREQ _0x20015
0002e2 6830      	ORI  R19,LOW(128)
                 ; 0001 0064     data = Uint_data_led3%10;
                 _0x20015:
0002e3 d0f8      	RCALL SUBOPT_0x1B
0002e4 d12d      	RCALL SUBOPT_0x24
                 ; 0001 0065     byte1 = BCDLED[data];
                 ; 0001 0066     if(byte1 & bit_left) byte3 |= 0x02;
0002e5 f009      	BREQ _0x20016
0002e6 6032      	ORI  R19,LOW(2)
                 ; 0001 0067     /* 7-seg 4 */
                 ; 0001 0068     data = Uint_data_led4/1000;
                 _0x20016:
0002e7 d0d0      	RCALL SUBOPT_0x16
0002e8 d131      	RCALL SUBOPT_0x25
                 ; 0001 0069     byte1 = BCDLED[data];
                 ; 0001 006A     if(byte1 & bit_left) byte3 |= 0x01; //2
0002e9 f009      	BREQ _0x20017
0002ea 6031      	ORI  R19,LOW(1)
                 ; 0001 006B     data = Uint_data_led4/100%10;
                 _0x20017:
0002eb d0cc      	RCALL SUBOPT_0x16
0002ec d106      	RCALL SUBOPT_0x1F
                 ; 0001 006C     byte1 = BCDLED[data];
                 ; 0001 006D     byte1 |= 0x04;
0002ed d122      	RCALL SUBOPT_0x23
                 ; 0001 006E     if(byte1 & bit_left) byte2 |= 0x40;
0002ee f009      	BREQ _0x20018
0002ef 6400      	ORI  R16,LOW(64)
                 ; 0001 006F     data = Uint_data_led4/10%10;
                 _0x20018:
0002f0 d0c7      	RCALL SUBOPT_0x16
0002f1 d111      	RCALL SUBOPT_0x21
0002f2 d113      	RCALL SUBOPT_0x22
                 ; 0001 0070     byte1 = BCDLED[data];
                 ; 0001 0071     // byte1 |= 0x80;
                 ; 0001 0072     if(byte1 & bit_left) byte2 |= 0x80; //7
0002f3 d10c      	RCALL SUBOPT_0x20
0002f4 f009      	BREQ _0x20019
0002f5 6800      	ORI  R16,LOW(128)
                 ; 0001 0073     data = Uint_data_led4%10;
                 _0x20019:
0002f6 d0c1      	RCALL SUBOPT_0x16
0002f7 d11a      	RCALL SUBOPT_0x24
                 ; 0001 0074     byte1 = BCDLED[data];
                 ; 0001 0075     if(byte1 & bit_left) byte2 |= 0x02;
0002f8 f009      	BREQ _0x2001A
0002f9 6002      	ORI  R16,LOW(2)
                 ; 0001 0076     bit_left = 0xff- bit_left;
                 _0x2001A:
0002fa efef      	LDI  R30,LOW(255)
0002fb 1be5      	SUB  R30,R21
0002fc 2f5e      	MOV  R21,R30
                 ; 0001 0077     SEND_DATA_LED(3,byte3,byte2,bit_left);
0002fd e0e3      	LDI  R30,LOW(3)
0002fe 93ea      	ST   -Y,R30
0002ff 933a      	ST   -Y,R19
000300 930a      	ST   -Y,R16
000301 2fa5      	MOV  R26,R21
000302 df71      	RCALL _SEND_DATA_LED
                 ; 0001 0078 }
000303 d28b      	RCALL __LOADLOCR6
000304 9626      	ADIW R28,6
000305 9508      	RET
                 ; .FEND
                 ;
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void    SPI_SENDBYTE(unsigned char  data,unsigned char action)
                 ; 0002 0005 {
                 
                 	.CSEG
                 _SPI_SENDBYTE:
                 ; .FSTART _SPI_SENDBYTE
                 ; 0002 0006     unsigned char   i;
                 ; 0002 0007     for(i=0;i<8;i++)
000306 93aa      	ST   -Y,R26
000307 931a      	ST   -Y,R17
                 ;	data -> Y+2
                 ;	action -> Y+1
                 ;	i -> R17
000308 e010      	LDI  R17,LOW(0)
                 _0x40004:
000309 3018      	CPI  R17,8
00030a f470      	BRSH _0x40005
                 ; 0002 0008     {
                 ; 0002 0009         if((data & 0x80) == 0x80)    DO_SPI_MOSI_HIGHT;
00030b 81ea      	LDD  R30,Y+2
00030c 78e0      	ANDI R30,LOW(0x80)
00030d 38e0      	CPI  R30,LOW(0x80)
00030e f411      	BRNE _0x40006
00030f 9a2b      	SBI  0x5,3
                 ; 0002 000A         else    DO_SPI_MOSI_LOW;
000310 c001      	RJMP _0x40009
                 _0x40006:
000311 982b      	CBI  0x5,3
                 ; 0002 000B         data <<= 1;
                 _0x40009:
000312 81ea      	LDD  R30,Y+2
000313 0fee      	LSL  R30
000314 83ea      	STD  Y+2,R30
                 ; 0002 000C         DO_SPI_SCK_HIGHT;
000315 9a2d      	SBI  0x5,5
                 ; 0002 000D         DO_SPI_SCK_LOW;
000316 982d      	CBI  0x5,5
                 ; 0002 000E     }
000317 5f1f      	SUBI R17,-1
000318 cff0      	RJMP _0x40004
                 _0x40005:
                 ; 0002 000F     if(action)
000319 81e9      	LDD  R30,Y+1
00031a 30e0      	CPI  R30,0
00031b f011      	BREQ _0x40010
                 ; 0002 0010     {
                 ; 0002 0011         DO_SPI_LATCH_HIGHT;
00031c 9a5a      	SBI  0xB,2
                 ; 0002 0012         DO_SPI_LATCH_LOW;
00031d 985a      	CBI  0xB,2
                 ; 0002 0013     }
                 ; 0002 0014 }
                 _0x40010:
00031e 8118      	LDD  R17,Y+0
00031f 9623      	ADIW R28,3
000320 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Uint_data_led1:
000200           	.BYTE 0x2
                 _Uint_data_led2:
000202           	.BYTE 0x2
                 _Uint_data_led3:
000204           	.BYTE 0x2
                 _Uint_data_led4:
000206           	.BYTE 0x2
                 _Uint_U_Positive_Buff:
000208           	.BYTE 0x3C
                 _Uint_U_Negative_Buff:
000244           	.BYTE 0x3C
                 _Uint_I_Positive_Buff:
000280           	.BYTE 0x3C
                 _Uint_I_Negative_Buff:
0002bc           	.BYTE 0x3C
                 _Uint_Turnoff_relay_timer:
0002f8           	.BYTE 0x2
                 _Uint_Timer_Display:
0002fa           	.BYTE 0x2
                 _BCDLED:
0002fc           	.BYTE 0xB
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000321 93e0 0085 	STS  133,R30
000323 e8e0      	LDI  R30,LOW(128)
000324 93e0 0084 	STS  132,R30
000326 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x1:
000327 91a0 02fa 	LDS  R26,_Uint_Timer_Display
000329 91b0 02fb 	LDS  R27,_Uint_Timer_Display+1
00032b 3ca8      	CPI  R26,LOW(0xC8)
00032c e0e0      	LDI  R30,HIGH(0xC8)
00032d 07be      	CPC  R27,R30
00032e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
00032f 91ed      	LD   R30,X+
000330 91fd      	LD   R31,X+
000331 9631      	ADIW R30,1
000332 93fe      	ST   -X,R31
000333 93ee      	ST   -X,R30
000334 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000335 91a0 02f8 	LDS  R26,_Uint_Turnoff_relay_timer
000337 91b0 02f9 	LDS  R27,_Uint_Turnoff_relay_timer+1
000339 3fa4      	CPI  R26,LOW(0x1F4)
00033a e0e1      	LDI  R30,HIGH(0x1F4)
00033b 07be      	CPC  R27,R30
00033c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
00033d ebac      	LDI  R26,LOW(_Uint_I_Negative_Buff)
00033e e0b2      	LDI  R27,HIGH(_Uint_I_Negative_Buff)
00033f e0f0      	LDI  R31,0
000340 0fee      	LSL  R30
000341 1fff      	ROL  R31
000342 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
000343 0fea      	ADD  R30,R26
000344 1ffb      	ADC  R31,R27
000345 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:93 WORDS
                 SUBOPT_0x6:
000346 2fe3      	MOV  R30,R19
000347 e0f0      	LDI  R31,0
000348 01de      	MOVW R26,R28
000349 9616      	ADIW R26,6
00034a 0fee      	LSL  R30
00034b 1fff      	ROL  R31
00034c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
00034d dff5      	RCALL SUBOPT_0x5
00034e 010f      	MOVW R0,R30
00034f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 27 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x8:
000350 0fae      	ADD  R26,R30
000351 1fbf      	ADC  R27,R31
000352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x9:
000353 d230      	RCALL __GETW1P
000354 01d0      	MOVW R26,R0
000355 93ed      	ST   X+,R30
000356 93fc      	ST   X,R31
000357 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:34 WORDS
                 SUBOPT_0xA:
000358 dff7      	RCALL SUBOPT_0x8
000359 900d      	LD   R0,X+
00035a 901c      	LD   R1,X
00035b 2fe2      	MOV  R30,R18
00035c e0f0      	LDI  R31,0
00035d 01de      	MOVW R26,R28
00035e 9616      	ADIW R26,6
00035f 0fee      	LSL  R30
000360 1fff      	ROL  R31
000361 dfee      	RCALL SUBOPT_0x8
000362 d221      	RCALL __GETW1P
000363 15e0      	CP   R30,R0
000364 05f1      	CPC  R31,R1
000365 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
000366 dfe9      	RCALL SUBOPT_0x8
000367 914d      	LD   R20,X+
000368 915c      	LD   R21,X
000369 cfdc      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0xC:
00036a 2fe2      	MOV  R30,R18
00036b e0f0      	LDI  R31,0
00036c 01de      	MOVW R26,R28
00036d 9616      	ADIW R26,6
00036e 0fee      	LSL  R30
00036f 1fff      	ROL  R31
000370 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
000371 dfde      	RCALL SUBOPT_0x8
000372 cfe0      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
000373 dfcf      	RCALL SUBOPT_0x5
000374 8340      	ST   Z,R20
000375 8351      	STD  Z+1,R21
000376 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xF:
000377 e0e0      	LDI  R30,LOW(0)
                +
000378 01de     +MOVW R26 , R28
000379 5bae     +SUBI R26 , LOW ( - 66 )
00037a 4fbf     +SBCI R27 , HIGH ( - 66 )
00037b 93ed     +ST X + , R30
00037c 93ed     +ST X + , R30
00037d 93ed     +ST X + , R30
00037e 93ec     +ST X , R30
                 	__CLRD1SX 66
00037f e03a      	LDI  R19,LOW(10)
000380 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:55 WORDS
                 SUBOPT_0x10:
000381 dfce      	RCALL SUBOPT_0x8
000382 d201      	RCALL __GETW1P
                +
000383 01de     +MOVW R26 , R28
000384 5bae     +SUBI R26 , LOW ( - 66 )
000385 4fbf     +SBCI R27 , HIGH ( - 66 )
000386 900d     +LD R0 , X +
000387 901d     +LD R1 , X +
000388 918d     +LD R24 , X +
000389 919c     +LD R25 , X
00038a 01d0     +MOVW R26 , R0
                 	__GETD2SX 66
00038b 2766      	CLR  R22
00038c 2777      	CLR  R23
00038d d1c6      	RCALL __ADDD12
                +
00038e 01de     +MOVW R26 , R28
00038f 5bae     +SUBI R26 , LOW ( - 66 )
000390 4fbf     +SBCI R27 , HIGH ( - 66 )
000391 93ed     +ST X + , R30
000392 93fd     +ST X + , R31
000393 936d     +ST X + , R22
000394 937c     +ST X , R23
                 	__PUTD1SX 66
000395 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x11:
                +
000396 01fe     +MOVW R30 , R28
000397 5bee     +SUBI R30 , LOW ( - 66 )
000398 4fff     +SBCI R31 , HIGH ( - 66 )
000399 9001     +LD R0 , Z +
00039a 9011     +LD R1 , Z +
00039b 9161     +LD R22 , Z +
00039c 8170     +LD R23 , Z
00039d 01f0     +MOVW R30 , R0
                 	__GETD1SX 66
00039e d0f2      	RCALL __CDF1U
00039f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
0003a0 01df      	MOVW R26,R30
0003a1 01cb      	MOVW R24,R22
                +
0003a2 e0e0     +LDI R30 , LOW ( 0x41200000 )
0003a3 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0003a4 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0003a5 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0003a6 d168      	RCALL __DIVF21
0003a7 d0b2      	RCALL __CFD1U
0003a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x13:
0003a9 91a0 0202 	LDS  R26,_Uint_data_led2
0003ab 91b0 0203 	LDS  R27,_Uint_data_led2+1
0003ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
0003ae 32ad      	CPI  R26,LOW(0x12D)
0003af e0e1      	LDI  R30,HIGH(0x12D)
0003b0 07be      	CPC  R27,R30
0003b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x15:
0003b2 e8a0      	LDI  R26,LOW(_Uint_I_Positive_Buff)
0003b3 e0b2      	LDI  R27,HIGH(_Uint_I_Positive_Buff)
0003b4 e0f0      	LDI  R31,0
0003b5 0fee      	LSL  R30
0003b6 1fff      	ROL  R31
0003b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x16:
0003b8 91a0 0206 	LDS  R26,_Uint_data_led4
0003ba 91b0 0207 	LDS  R27,_Uint_data_led4+1
0003bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x17:
0003bd e4a4      	LDI  R26,LOW(_Uint_U_Negative_Buff)
0003be e0b2      	LDI  R27,HIGH(_Uint_U_Negative_Buff)
0003bf e0f0      	LDI  R31,0
0003c0 0fee      	LSL  R30
0003c1 1fff      	ROL  R31
0003c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x18:
                +
0003c3 e0a0     +LDI R26 , LOW ( 0x43B90000 )
0003c4 e0b0     +LDI R27 , HIGH ( 0x43B90000 )
0003c5 eb89     +LDI R24 , BYTE3 ( 0x43B90000 )
0003c6 e493     +LDI R25 , BYTE4 ( 0x43B90000 )
                 	__GETD2N 0x43B90000
0003c7 d0f9      	RCALL __MULF12
0003c8 01df      	MOVW R26,R30
0003c9 01cb      	MOVW R24,R22
                +
0003ca e0e0     +LDI R30 , LOW ( 0x46200000 )
0003cb e0f0     +LDI R31 , HIGH ( 0x46200000 )
0003cc e260     +LDI R22 , BYTE3 ( 0x46200000 )
0003cd e476     +LDI R23 , BYTE4 ( 0x46200000 )
                 	__GETD1N 0x46200000
0003ce d140      	RCALL __DIVF21
0003cf d08a      	RCALL __CFD1U
0003d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x19:
0003d1 91a0 0200 	LDS  R26,_Uint_data_led1
0003d3 91b0 0201 	LDS  R27,_Uint_data_led1+1
0003d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1A:
0003d6 e0a8      	LDI  R26,LOW(_Uint_U_Positive_Buff)
0003d7 e0b2      	LDI  R27,HIGH(_Uint_U_Positive_Buff)
0003d8 e0f0      	LDI  R31,0
0003d9 0fee      	LSL  R30
0003da 1fff      	ROL  R31
0003db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1B:
0003dc 91a0 0204 	LDS  R26,_Uint_data_led3
0003de 91b0 0205 	LDS  R27,_Uint_data_led3+1
0003e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
0003e1 e0e0      	LDI  R30,LOW(0)
0003e2 93e0 007b 	STS  123,R30
0003e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1D:
0003e5 2fe1      	MOV  R30,R17
0003e6 e0f0      	LDI  R31,0
0003e7 01de      	MOVW R26,R28
0003e8 9611      	ADIW R26,1
0003e9 cf66      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1E:
0003ea eee8      	LDI  R30,LOW(1000)
0003eb e0f3      	LDI  R31,HIGH(1000)
0003ec d181      	RCALL __DIVW21U
0003ed 2f2e      	MOV  R18,R30
                +
0003ee 9110 0306+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
0003f0 2fe5      	MOV  R30,R21
0003f1 23e1      	AND  R30,R17
0003f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:34 WORDS
                 SUBOPT_0x1F:
0003f3 e6e4      	LDI  R30,LOW(100)
0003f4 e0f0      	LDI  R31,HIGH(100)
0003f5 d178      	RCALL __DIVW21U
0003f6 01df      	MOVW R26,R30
0003f7 e0ea      	LDI  R30,LOW(10)
0003f8 e0f0      	LDI  R31,HIGH(10)
0003f9 d187      	RCALL __MODW21U
0003fa 2f2e      	MOV  R18,R30
0003fb e0f0      	LDI  R31,0
0003fc 50e4      	SUBI R30,LOW(-_BCDLED)
0003fd 4ffd      	SBCI R31,HIGH(-_BCDLED)
0003fe 8110      	LD   R17,Z
0003ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x20:
000400 2fe5      	MOV  R30,R21
000401 23e1      	AND  R30,R17
000402 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x21:
000403 e0ea      	LDI  R30,LOW(10)
000404 e0f0      	LDI  R31,HIGH(10)
000405 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x22:
000406 d167      	RCALL __DIVW21U
000407 01df      	MOVW R26,R30
000408 dffa      	RCALL SUBOPT_0x21
000409 d177      	RCALL __MODW21U
00040a 2f2e      	MOV  R18,R30
00040b e0f0      	LDI  R31,0
00040c 50e4      	SUBI R30,LOW(-_BCDLED)
00040d 4ffd      	SBCI R31,HIGH(-_BCDLED)
00040e 8110      	LD   R17,Z
00040f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
000410 6014      	ORI  R17,LOW(4)
000411 cfee      	RJMP SUBOPT_0x20
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x24:
000412 dff0      	RCALL SUBOPT_0x21
000413 d16d      	RCALL __MODW21U
000414 2f2e      	MOV  R18,R30
000415 e0f0      	LDI  R31,0
000416 50e4      	SUBI R30,LOW(-_BCDLED)
000417 4ffd      	SBCI R31,HIGH(-_BCDLED)
000418 8110      	LD   R17,Z
000419 cfe6      	RJMP SUBOPT_0x20
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x25:
00041a eee8      	LDI  R30,LOW(1000)
00041b e0f3      	LDI  R31,HIGH(1000)
00041c d151      	RCALL __DIVW21U
00041d 2f2e      	MOV  R18,R30
00041e e0f0      	LDI  R31,0
00041f 50e4      	SUBI R30,LOW(-_BCDLED)
000420 4ffd      	SBCI R31,HIGH(-_BCDLED)
000421 8110      	LD   R17,Z
000422 cfdd      	RJMP SUBOPT_0x20
                 
                 
                 	.CSEG
                 _delay_ms:
000423 9610      	adiw r26,0
000424 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000425 ed80     +LDI R24 , LOW ( 0x7D0 )
000426 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000427 9701     +SBIW R24 , 1
000428 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000429 95a8      	wdr
00042a 9711      	sbiw r26,1
00042b f7c9      	brne __delay_ms0
                 __delay_ms1:
00042c 9508      	ret
                 
                 __ROUND_REPACK:
00042d 2355      	TST  R21
00042e f442      	BRPL __REPACK
00042f 3850      	CPI  R21,0x80
000430 f411      	BRNE __ROUND_REPACK0
000431 ffe0      	SBRS R30,0
000432 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000433 9631      	ADIW R30,1
000434 1f69      	ADC  R22,R25
000435 1f79      	ADC  R23,R25
000436 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000437 e850      	LDI  R21,0x80
000438 2757      	EOR  R21,R23
000439 f411      	BRNE __REPACK0
00043a 935f      	PUSH R21
00043b c073      	RJMP __ZERORES
                 __REPACK0:
00043c 3f5f      	CPI  R21,0xFF
00043d f031      	BREQ __REPACK1
00043e 0f66      	LSL  R22
00043f 0c00      	LSL  R0
000440 9557      	ROR  R21
000441 9567      	ROR  R22
000442 2f75      	MOV  R23,R21
000443 9508      	RET
                 __REPACK1:
000444 935f      	PUSH R21
000445 2000      	TST  R0
000446 f00a      	BRMI __REPACK2
000447 c073      	RJMP __MAXRES
                 __REPACK2:
000448 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000449 e850      	LDI  R21,0x80
00044a 2e19      	MOV  R1,R25
00044b 2215      	AND  R1,R21
00044c 0f88      	LSL  R24
00044d 1f99      	ROL  R25
00044e 2795      	EOR  R25,R21
00044f 0f55      	LSL  R21
000450 9587      	ROR  R24
                 
                 __UNPACK1:
000451 e850      	LDI  R21,0x80
000452 2e07      	MOV  R0,R23
000453 2205      	AND  R0,R21
000454 0f66      	LSL  R22
000455 1f77      	ROL  R23
000456 2775      	EOR  R23,R21
000457 0f55      	LSL  R21
000458 9567      	ROR  R22
000459 9508      	RET
                 
                 __CFD1U:
00045a 9468      	SET
00045b c001      	RJMP __CFD1U0
                 __CFD1:
00045c 94e8      	CLT
                 __CFD1U0:
00045d 935f      	PUSH R21
00045e dff2      	RCALL __UNPACK1
00045f 3870      	CPI  R23,0x80
000460 f018      	BRLO __CFD10
000461 3f7f      	CPI  R23,0xFF
000462 f408      	BRCC __CFD10
000463 c04b      	RJMP __ZERORES
                 __CFD10:
000464 e156      	LDI  R21,22
000465 1b57      	SUB  R21,R23
000466 f4aa      	BRPL __CFD11
000467 9551      	NEG  R21
000468 3058      	CPI  R21,8
000469 f40e      	BRTC __CFD19
00046a 3059      	CPI  R21,9
                 __CFD19:
00046b f030      	BRLO __CFD17
00046c efef      	SER  R30
00046d efff      	SER  R31
00046e ef6f      	SER  R22
00046f e77f      	LDI  R23,0x7F
000470 f977      	BLD  R23,7
000471 c01a      	RJMP __CFD15
                 __CFD17:
000472 2777      	CLR  R23
000473 2355      	TST  R21
000474 f0b9      	BREQ __CFD15
                 __CFD18:
000475 0fee      	LSL  R30
000476 1fff      	ROL  R31
000477 1f66      	ROL  R22
000478 1f77      	ROL  R23
000479 955a      	DEC  R21
00047a f7d1      	BRNE __CFD18
00047b c010      	RJMP __CFD15
                 __CFD11:
00047c 2777      	CLR  R23
                 __CFD12:
00047d 3058      	CPI  R21,8
00047e f028      	BRLO __CFD13
00047f 2fef      	MOV  R30,R31
000480 2ff6      	MOV  R31,R22
000481 2f67      	MOV  R22,R23
000482 5058      	SUBI R21,8
000483 cff9      	RJMP __CFD12
                 __CFD13:
000484 2355      	TST  R21
000485 f031      	BREQ __CFD15
                 __CFD14:
000486 9576      	LSR  R23
000487 9567      	ROR  R22
000488 95f7      	ROR  R31
000489 95e7      	ROR  R30
00048a 955a      	DEC  R21
00048b f7d1      	BRNE __CFD14
                 __CFD15:
00048c 2000      	TST  R0
00048d f40a      	BRPL __CFD16
00048e d0ca      	RCALL __ANEGD1
                 __CFD16:
00048f 915f      	POP  R21
000490 9508      	RET
                 
                 __CDF1U:
000491 9468      	SET
000492 c001      	RJMP __CDF1U0
                 __CDF1:
000493 94e8      	CLT
                 __CDF1U0:
000494 9730      	SBIW R30,0
000495 4060      	SBCI R22,0
000496 4070      	SBCI R23,0
000497 f0b1      	BREQ __CDF10
000498 2400      	CLR  R0
000499 f026      	BRTS __CDF11
00049a 2377      	TST  R23
00049b f412      	BRPL __CDF11
00049c 9400      	COM  R0
00049d d0bb      	RCALL __ANEGD1
                 __CDF11:
00049e 2e17      	MOV  R1,R23
00049f e17e      	LDI  R23,30
0004a0 2011      	TST  R1
                 __CDF12:
0004a1 f032      	BRMI __CDF13
0004a2 957a      	DEC  R23
0004a3 0fee      	LSL  R30
0004a4 1fff      	ROL  R31
0004a5 1f66      	ROL  R22
0004a6 1c11      	ROL  R1
0004a7 cff9      	RJMP __CDF12
                 __CDF13:
0004a8 2fef      	MOV  R30,R31
0004a9 2ff6      	MOV  R31,R22
0004aa 2d61      	MOV  R22,R1
0004ab 935f      	PUSH R21
0004ac df8a      	RCALL __REPACK
0004ad 915f      	POP  R21
                 __CDF10:
0004ae 9508      	RET
                 
                 __ZERORES:
0004af 27ee      	CLR  R30
0004b0 27ff      	CLR  R31
0004b1 2766      	CLR  R22
0004b2 2777      	CLR  R23
0004b3 915f      	POP  R21
0004b4 9508      	RET
                 
                 __MINRES:
0004b5 efef      	SER  R30
0004b6 efff      	SER  R31
0004b7 e76f      	LDI  R22,0x7F
0004b8 ef7f      	SER  R23
0004b9 915f      	POP  R21
0004ba 9508      	RET
                 
                 __MAXRES:
0004bb efef      	SER  R30
0004bc efff      	SER  R31
0004bd e76f      	LDI  R22,0x7F
0004be e77f      	LDI  R23,0x7F
0004bf 915f      	POP  R21
0004c0 9508      	RET
                 
                 __MULF12:
0004c1 935f      	PUSH R21
0004c2 df86      	RCALL __UNPACK
0004c3 3870      	CPI  R23,0x80
0004c4 f351      	BREQ __ZERORES
0004c5 3890      	CPI  R25,0x80
0004c6 f341      	BREQ __ZERORES
0004c7 2401      	EOR  R0,R1
0004c8 9408      	SEC
0004c9 1f79      	ADC  R23,R25
0004ca f423      	BRVC __MULF124
0004cb f31c      	BRLT __ZERORES
                 __MULF125:
0004cc 2000      	TST  R0
0004cd f33a      	BRMI __MINRES
0004ce cfec      	RJMP __MAXRES
                 __MULF124:
0004cf 920f      	PUSH R0
0004d0 931f      	PUSH R17
0004d1 932f      	PUSH R18
0004d2 933f      	PUSH R19
0004d3 934f      	PUSH R20
0004d4 2711      	CLR  R17
0004d5 2722      	CLR  R18
0004d6 2799      	CLR  R25
0004d7 9f68      	MUL  R22,R24
0004d8 01a0      	MOVW R20,R0
0004d9 9f8f      	MUL  R24,R31
0004da 2d30      	MOV  R19,R0
0004db 0d41      	ADD  R20,R1
0004dc 1f59      	ADC  R21,R25
0004dd 9f6b      	MUL  R22,R27
0004de 0d30      	ADD  R19,R0
0004df 1d41      	ADC  R20,R1
0004e0 1f59      	ADC  R21,R25
0004e1 9f8e      	MUL  R24,R30
0004e2 d027      	RCALL __MULF126
0004e3 9fbf      	MUL  R27,R31
0004e4 d025      	RCALL __MULF126
0004e5 9f6a      	MUL  R22,R26
0004e6 d023      	RCALL __MULF126
0004e7 9fbe      	MUL  R27,R30
0004e8 d01d      	RCALL __MULF127
0004e9 9faf      	MUL  R26,R31
0004ea d01b      	RCALL __MULF127
0004eb 9fae      	MUL  R26,R30
0004ec 0d11      	ADD  R17,R1
0004ed 1f29      	ADC  R18,R25
0004ee 1f39      	ADC  R19,R25
0004ef 1f49      	ADC  R20,R25
0004f0 1f59      	ADC  R21,R25
0004f1 2fe3      	MOV  R30,R19
0004f2 2ff4      	MOV  R31,R20
0004f3 2f65      	MOV  R22,R21
0004f4 2f52      	MOV  R21,R18
0004f5 914f      	POP  R20
0004f6 913f      	POP  R19
0004f7 912f      	POP  R18
0004f8 911f      	POP  R17
0004f9 900f      	POP  R0
0004fa 2366      	TST  R22
0004fb f02a      	BRMI __MULF122
0004fc 0f55      	LSL  R21
0004fd 1fee      	ROL  R30
0004fe 1fff      	ROL  R31
0004ff 1f66      	ROL  R22
000500 c002      	RJMP __MULF123
                 __MULF122:
000501 9573      	INC  R23
000502 f24b      	BRVS __MULF125
                 __MULF123:
000503 df29      	RCALL __ROUND_REPACK
000504 915f      	POP  R21
000505 9508      	RET
                 
                 __MULF127:
000506 0d10      	ADD  R17,R0
000507 1d21      	ADC  R18,R1
000508 1f39      	ADC  R19,R25
000509 c002      	RJMP __MULF128
                 __MULF126:
00050a 0d20      	ADD  R18,R0
00050b 1d31      	ADC  R19,R1
                 __MULF128:
00050c 1f49      	ADC  R20,R25
00050d 1f59      	ADC  R21,R25
00050e 9508      	RET
                 
                 __DIVF21:
00050f 935f      	PUSH R21
000510 df38      	RCALL __UNPACK
000511 3870      	CPI  R23,0x80
000512 f421      	BRNE __DIVF210
000513 2011      	TST  R1
                 __DIVF211:
000514 f40a      	BRPL __DIVF219
000515 cf9f      	RJMP __MINRES
                 __DIVF219:
000516 cfa4      	RJMP __MAXRES
                 __DIVF210:
000517 3890      	CPI  R25,0x80
000518 f409      	BRNE __DIVF218
                 __DIVF217:
000519 cf95      	RJMP __ZERORES
                 __DIVF218:
00051a 2401      	EOR  R0,R1
00051b 9408      	SEC
00051c 0b97      	SBC  R25,R23
00051d f41b      	BRVC __DIVF216
00051e f3d4      	BRLT __DIVF217
00051f 2000      	TST  R0
000520 cff3      	RJMP __DIVF211
                 __DIVF216:
000521 2f79      	MOV  R23,R25
000522 931f      	PUSH R17
000523 932f      	PUSH R18
000524 933f      	PUSH R19
000525 934f      	PUSH R20
000526 2411      	CLR  R1
000527 2711      	CLR  R17
000528 2722      	CLR  R18
000529 2733      	CLR  R19
00052a 2744      	CLR  R20
00052b 2755      	CLR  R21
00052c e290      	LDI  R25,32
                 __DIVF212:
00052d 17ae      	CP   R26,R30
00052e 07bf      	CPC  R27,R31
00052f 0786      	CPC  R24,R22
000530 0741      	CPC  R20,R17
000531 f030      	BRLO __DIVF213
000532 1bae      	SUB  R26,R30
000533 0bbf      	SBC  R27,R31
000534 0b86      	SBC  R24,R22
000535 0b41      	SBC  R20,R17
000536 9408      	SEC
000537 c001      	RJMP __DIVF214
                 __DIVF213:
000538 9488      	CLC
                 __DIVF214:
000539 1f55      	ROL  R21
00053a 1f22      	ROL  R18
00053b 1f33      	ROL  R19
00053c 1c11      	ROL  R1
00053d 1faa      	ROL  R26
00053e 1fbb      	ROL  R27
00053f 1f88      	ROL  R24
000540 1f44      	ROL  R20
000541 959a      	DEC  R25
000542 f751      	BRNE __DIVF212
000543 01f9      	MOVW R30,R18
000544 2d61      	MOV  R22,R1
000545 914f      	POP  R20
000546 913f      	POP  R19
000547 912f      	POP  R18
000548 911f      	POP  R17
000549 2366      	TST  R22
00054a f032      	BRMI __DIVF215
00054b 0f55      	LSL  R21
00054c 1fee      	ROL  R30
00054d 1fff      	ROL  R31
00054e 1f66      	ROL  R22
00054f 957a      	DEC  R23
000550 f243      	BRVS __DIVF217
                 __DIVF215:
000551 dedb      	RCALL __ROUND_REPACK
000552 915f      	POP  R21
000553 9508      	RET
                 
                 __ADDD12:
000554 0fea      	ADD  R30,R26
000555 1ffb      	ADC  R31,R27
000556 1f68      	ADC  R22,R24
000557 1f79      	ADC  R23,R25
000558 9508      	RET
                 
                 __ANEGD1:
000559 95f0      	COM  R31
00055a 9560      	COM  R22
00055b 9570      	COM  R23
00055c 95e1      	NEG  R30
00055d 4fff      	SBCI R31,-1
00055e 4f6f      	SBCI R22,-1
00055f 4f7f      	SBCI R23,-1
000560 9508      	RET
                 
                 __LSLB12:
000561 23ee      	TST  R30
000562 2e0e      	MOV  R0,R30
000563 2fea      	MOV  R30,R26
000564 f019      	BREQ __LSLB12R
                 __LSLB12L:
000565 0fee      	LSL  R30
000566 940a      	DEC  R0
000567 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000568 9508      	RET
                 
                 __CWD1:
000569 2f6f      	MOV  R22,R31
00056a 0f66      	ADD  R22,R22
00056b 0b66      	SBC  R22,R22
00056c 2f76      	MOV  R23,R22
00056d 9508      	RET
                 
                 __DIVW21U:
00056e 2400      	CLR  R0
00056f 2411      	CLR  R1
000570 e190      	LDI  R25,16
                 __DIVW21U1:
000571 0faa      	LSL  R26
000572 1fbb      	ROL  R27
000573 1c00      	ROL  R0
000574 1c11      	ROL  R1
000575 1a0e      	SUB  R0,R30
000576 0a1f      	SBC  R1,R31
000577 f418      	BRCC __DIVW21U2
000578 0e0e      	ADD  R0,R30
000579 1e1f      	ADC  R1,R31
00057a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00057b 60a1      	SBR  R26,1
                 __DIVW21U3:
00057c 959a      	DEC  R25
00057d f799      	BRNE __DIVW21U1
00057e 01fd      	MOVW R30,R26
00057f 01d0      	MOVW R26,R0
000580 9508      	RET
                 
                 __MODW21U:
000581 dfec      	RCALL __DIVW21U
000582 01fd      	MOVW R30,R26
000583 9508      	RET
                 
                 __GETW1P:
000584 91ed      	LD   R30,X+
000585 91fc      	LD   R31,X
000586 9711      	SBIW R26,1
000587 9508      	RET
                 
                 __SAVELOCR6:
000588 935a      	ST   -Y,R21
                 __SAVELOCR5:
000589 934a      	ST   -Y,R20
                 __SAVELOCR4:
00058a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00058b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00058c 931a      	ST   -Y,R17
00058d 930a      	ST   -Y,R16
00058e 9508      	RET
                 
                 __LOADLOCR6:
00058f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000590 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000591 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000592 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000593 8119      	LDD  R17,Y+1
000594 8108      	LD   R16,Y
000595 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega88P register use summary:
r0 :  39 r1 :  28 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   4 r7 :   4 
r8 :   4 r9 :   4 r10:   4 r11:   4 r12:   4 r13:   7 r14:   0 r15:   2 
r16:  20 r17:  40 r18:  33 r19:  66 r20:  24 r21:  65 r22:  49 r23:  43 
r24:  28 r25:  34 r26:  78 r27:  42 r28:  18 r29:   1 r30: 291 r31:  84 
x  :  36 y  :  60 z  :  21 
Registers used: 32 out of 35 (91.4%)

ATmega88P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  10 
adiw  :  13 and   :   4 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  27 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   2 brmi  :   5 brne  :  16 brpl  :   5 brsh  :  36 brtc  :   1 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   0 cbi   :   9 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :  33 
cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 cp    :  13 
cpc   :  10 cpi   :  36 cpse  :   0 dec   :   9 des   :   0 eor   :   5 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :  11 ld    :  36 ldd   :  14 ldi   : 169 lds   :  18 lpm   :   7 
lsl   :  20 lsr   :   1 mov   :  59 movw  :  32 mul   :   9 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :  19 out   :  21 
pop   :  20 push  :  19 rcall : 208 ret   :  57 reti  :   1 rjmp  :  88 
rol   :  32 ror   :   7 sbc   :   8 sbci  :  13 sbi   :   8 sbic  :   3 
sbis  :   1 sbiw  :  11 sbr   :   1 sbrc  :   0 sbrs  :   1 sec   :   3 
seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   2 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  53 std   :   7 
sts   :  43 sub   :   6 subi  :  29 swap  :   0 tst   :  13 wdr   :   1 

Instructions used: 72 out of 114 (63.2%)

ATmega88P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b2c   2824     36   2860    8192  34.9%
[.dseg] 0x000100 0x000307      0    263    263    1024  25.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
